System.register("bundle://internal/_virtual/builtin-pipeline-settings.ts",["./rollupPluginModLoBabelHelpers.js","cc","./builtin-pipeline-types.ts"],(function(t){var e,o,i,n,r,s,a,p,l,g,c,y,u,d,b,m,h;return{setters:[function(t){e=t.applyDecoratedDescriptor,o=t.inheritsLoose,i=t.createClass,n=t.initializerDefineProperty,r=t.assertThisInitialized},function(t){s=t.cclegacy,a=t._decorator,p=t.Camera,l=t.CCBoolean,g=t.CCInteger,c=t.CCFloat,y=t.Material,u=t.Texture2D,d=t.rendering,b=t.Component},function(t){m=t.fillRequiredPipelineSettings,h=t.makePipelineSettings}],execute:function(){var f,_,P,M,S,O,w,E,G,D,k,C,A,j,v,x,F,B,R,I,T,L,X,z,H,q,Y,N;s._RF.push({},"de1c2EHcMhAIYRZY5nyTQHG","builtin-pipeline-settings",void 0);var Q=a.ccclass,Z=a.disallowMultiple,J=a.executeInEditMode,K=a.menu,U=a.property,V=a.requireComponent;a.type,t("BuiltinPipelineSettings",(f=Q("BuiltinPipelineSettings"),_=K("Rendering/BuiltinPipelineSettings"),P=V(p),M=U(l),S=U({displayName:"Editor Preview (Experimental)",type:l}),O=U({group:{id:"MSAA",name:"Multisample Anti-Aliasing"},type:l}),w=U({group:{id:"MSAA",name:"Multisample Anti-Aliasing",style:"section"},type:g,range:[2,4,2]}),E=U({group:{id:"ShadingScale",name:"ShadingScale",style:"section"},type:l}),G=U({tooltip:"i18n:postprocess.shadingScale",group:{id:"ShadingScale",name:"ShadingScale"},type:c,range:[.01,4,.01],slide:!0}),D=U({group:{id:"Bloom",name:"Bloom (PostProcessing)",style:"section"},type:l}),k=U({group:{id:"Bloom",name:"Bloom (PostProcessing)",style:"section"},type:y}),C=U({tooltip:"i18n:bloom.enableAlphaMask",group:{id:"Bloom",name:"Bloom (PostProcessing)",style:"section"},type:l}),A=U({tooltip:"i18n:bloom.iterations",group:{id:"Bloom",name:"Bloom (PostProcessing)",style:"section"},type:g,range:[1,6,1],slide:!0}),j=U({tooltip:"i18n:bloom.threshold",group:{id:"Bloom",name:"Bloom (PostProcessing)",style:"section"},type:c,min:0}),v=U({group:{id:"Color Grading",name:"ColorGrading (LDR) (PostProcessing)",style:"section"},type:l}),x=U({group:{id:"Color Grading",name:"ColorGrading (LDR) (PostProcessing)",style:"section"},type:y}),F=U({tooltip:"i18n:color_grading.contribute",group:{id:"Color Grading",name:"ColorGrading (LDR) (PostProcessing)",style:"section"},type:c,range:[0,1,.01],slide:!0}),B=U({tooltip:"i18n:color_grading.originalMap",group:{id:"Color Grading",name:"ColorGrading (LDR) (PostProcessing)",style:"section"},type:u}),R=U({group:{id:"FXAA",name:"Fast Approximate Anti-Aliasing (PostProcessing)",style:"section"},type:l}),I=U({group:{id:"FXAA",name:"Fast Approximate Anti-Aliasing (PostProcessing)",style:"section"},type:y}),T=U({group:{id:"FSR",name:"FidelityFX Super Resolution",style:"section"},type:l}),L=U({group:{id:"FSR",name:"FidelityFX Super Resolution",style:"section"},type:y}),X=U({group:{id:"FSR",name:"FidelityFX Super Resolution",style:"section"},type:c,range:[0,1,.01],slide:!0}),z=U({group:{id:"ToneMapping",name:"ToneMapping",style:"section"},type:y}),f(H=_(H=P(H=Z(H=J((Y=e((q=function(t){function e(){for(var e,o=arguments.length,i=new Array(o),s=0;s<o;s++)i[s]=arguments[s];return e=t.call.apply(t,[this].concat(i))||this,n(e,"_settings",Y,r(e)),n(e,"_editorPreview",N,r(e)),e}o(e,t);var s=e.prototype;return s.getPipelineSettings=function(){return this._settings},s.onEnable=function(){m(this._settings),this.getComponent(p).camera.pipelineSettings=this._settings},s.onDisable=function(){this.getComponent(p).camera.pipelineSettings=null},s._tryEnableEditorPreview=function(){void 0!==d&&(this._editorPreview?d.setEditorPipelineSettings(this._settings):this._disableEditorPreview())},s._disableEditorPreview=function(){void 0!==d&&(d.getEditorPipelineSettings()===this._settings&&d.setEditorPipelineSettings(null))},i(e,[{key:"editorPreview",get:function(){return this._editorPreview},set:function(t){this._editorPreview=t}},{key:"MsaaEnable",get:function(){return this._settings.msaa.enabled},set:function(t){this._settings.msaa.enabled=t}},{key:"msaaSampleCount",get:function(){return this._settings.msaa.sampleCount},set:function(t){t=Math.pow(2,Math.ceil(Math.log2(Math.max(t,2)))),t=Math.min(t,4),this._settings.msaa.sampleCount=t}},{key:"shadingScaleEnable",get:function(){return this._settings.enableShadingScale},set:function(t){this._settings.enableShadingScale=t}},{key:"shadingScale",get:function(){return this._settings.shadingScale},set:function(t){this._settings.shadingScale=t}},{key:"bloomEnable",get:function(){return this._settings.bloom.enabled},set:function(t){this._settings.bloom.enabled=t}},{key:"bloomMaterial",get:function(){return this._settings.bloom.material},set:function(t){this._settings.bloom.material!==t&&(this._settings.bloom.material=t)}},{key:"bloomEnableAlphaMask",get:function(){return this._settings.bloom.enableAlphaMask},set:function(t){this._settings.bloom.enableAlphaMask=t}},{key:"bloomIterations",get:function(){return this._settings.bloom.iterations},set:function(t){this._settings.bloom.iterations=t}},{key:"bloomThreshold",get:function(){return this._settings.bloom.threshold},set:function(t){this._settings.bloom.threshold=t}},{key:"bloomIntensity",get:function(){return this._settings.bloom.intensity},set:function(t){this._settings.bloom.intensity=t}},{key:"colorGradingEnable",get:function(){return this._settings.colorGrading.enabled},set:function(t){this._settings.colorGrading.enabled=t}},{key:"colorGradingMaterial",get:function(){return this._settings.colorGrading.material},set:function(t){this._settings.colorGrading.material!==t&&(this._settings.colorGrading.material=t)}},{key:"colorGradingContribute",get:function(){return this._settings.colorGrading.contribute},set:function(t){this._settings.colorGrading.contribute=t}},{key:"colorGradingMap",get:function(){return this._settings.colorGrading.colorGradingMap},set:function(t){this._settings.colorGrading.colorGradingMap=t}},{key:"fxaaEnable",get:function(){return this._settings.fxaa.enabled},set:function(t){this._settings.fxaa.enabled=t}},{key:"fxaaMaterial",get:function(){return this._settings.fxaa.material},set:function(t){this._settings.fxaa.material!==t&&(this._settings.fxaa.material=t)}},{key:"fsrEnable",get:function(){return this._settings.fsr.enabled},set:function(t){this._settings.fsr.enabled=t}},{key:"fsrMaterial",get:function(){return this._settings.fsr.material},set:function(t){this._settings.fsr.material!==t&&(this._settings.fsr.material=t)}},{key:"fsrSharpness",get:function(){return this._settings.fsr.sharpness},set:function(t){this._settings.fsr.sharpness=t}},{key:"toneMappingMaterial",get:function(){return this._settings.toneMapping.material},set:function(t){this._settings.toneMapping.material!==t&&(this._settings.toneMapping.material=t)}}]),e}(b)).prototype,"_settings",[U],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return h()}}),N=e(q.prototype,"_editorPreview",[M],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),e(q.prototype,"editorPreview",[S],Object.getOwnPropertyDescriptor(q.prototype,"editorPreview"),q.prototype),e(q.prototype,"MsaaEnable",[O],Object.getOwnPropertyDescriptor(q.prototype,"MsaaEnable"),q.prototype),e(q.prototype,"msaaSampleCount",[w],Object.getOwnPropertyDescriptor(q.prototype,"msaaSampleCount"),q.prototype),e(q.prototype,"shadingScaleEnable",[E],Object.getOwnPropertyDescriptor(q.prototype,"shadingScaleEnable"),q.prototype),e(q.prototype,"shadingScale",[G],Object.getOwnPropertyDescriptor(q.prototype,"shadingScale"),q.prototype),e(q.prototype,"bloomEnable",[D],Object.getOwnPropertyDescriptor(q.prototype,"bloomEnable"),q.prototype),e(q.prototype,"bloomMaterial",[k],Object.getOwnPropertyDescriptor(q.prototype,"bloomMaterial"),q.prototype),e(q.prototype,"bloomEnableAlphaMask",[C],Object.getOwnPropertyDescriptor(q.prototype,"bloomEnableAlphaMask"),q.prototype),e(q.prototype,"bloomIterations",[A],Object.getOwnPropertyDescriptor(q.prototype,"bloomIterations"),q.prototype),e(q.prototype,"bloomThreshold",[j],Object.getOwnPropertyDescriptor(q.prototype,"bloomThreshold"),q.prototype),e(q.prototype,"colorGradingEnable",[v],Object.getOwnPropertyDescriptor(q.prototype,"colorGradingEnable"),q.prototype),e(q.prototype,"colorGradingMaterial",[x],Object.getOwnPropertyDescriptor(q.prototype,"colorGradingMaterial"),q.prototype),e(q.prototype,"colorGradingContribute",[F],Object.getOwnPropertyDescriptor(q.prototype,"colorGradingContribute"),q.prototype),e(q.prototype,"colorGradingMap",[B],Object.getOwnPropertyDescriptor(q.prototype,"colorGradingMap"),q.prototype),e(q.prototype,"fxaaEnable",[R],Object.getOwnPropertyDescriptor(q.prototype,"fxaaEnable"),q.prototype),e(q.prototype,"fxaaMaterial",[I],Object.getOwnPropertyDescriptor(q.prototype,"fxaaMaterial"),q.prototype),e(q.prototype,"fsrEnable",[T],Object.getOwnPropertyDescriptor(q.prototype,"fsrEnable"),q.prototype),e(q.prototype,"fsrMaterial",[L],Object.getOwnPropertyDescriptor(q.prototype,"fsrMaterial"),q.prototype),e(q.prototype,"fsrSharpness",[X],Object.getOwnPropertyDescriptor(q.prototype,"fsrSharpness"),q.prototype),e(q.prototype,"toneMappingMaterial",[z],Object.getOwnPropertyDescriptor(q.prototype,"toneMappingMaterial"),q.prototype),H=q))||H)||H)||H)||H)||H));s._RF.pop()}}}));

System.register("bundle://internal/_virtual/builtin-pipeline-types.ts",["cc"],(function(e){var a,n;return{setters:[function(e){a=e.cclegacy,n=e.gfx}],execute:function(){e({fillRequiredBloom:o,fillRequiredColorGrading:u,fillRequiredFSR:b,fillRequiredFXAA:m,fillRequiredHBAO:function(e){void 0===e.enabled&&(e.enabled=!1);void 0===e.radiusScale&&(e.radiusScale=1);void 0===e.angleBiasDegree&&(e.angleBiasDegree=10);void 0===e.blurSharpness&&(e.blurSharpness=3);void 0===e.aoSaturation&&(e.aoSaturation=1);void 0===e.needBlur&&(e.needBlur=!1)},fillRequiredMSAA:r,fillRequiredPipelineSettings:function(e){e.msaa?r(e.msaa):e.msaa=i();void 0===e.enableShadingScale&&(e.enableShadingScale=!1);void 0===e.shadingScale&&(e.shadingScale=.5);e.bloom?o(e.bloom):e.bloom={enabled:!1,material:null,enableAlphaMask:!1,iterations:3,threshold:.8,intensity:2.3};e.toneMapping?f(e.toneMapping):e.toneMapping={material:null};e.colorGrading?u(e.colorGrading):e.colorGrading={enabled:!1,material:null,contribute:1,colorGradingMap:null};e.fsr?b(e.fsr):e.fsr={enabled:!1,material:null,sharpness:.8};e.fxaa?m(e.fxaa):e.fxaa={enabled:!1,material:null}},fillRequiredToneMapping:f,makeBloom:t,makeColorGrading:d,makeFSR:s,makeFXAA:c,makeHBAO:function(){return{enabled:!1,radiusScale:1,angleBiasDegree:10,blurSharpness:3,aoSaturation:1,needBlur:!1}},makeMSAA:i,makePipelineSettings:function(){return{msaa:i(),enableShadingScale:!1,shadingScale:.5,bloom:{enabled:!1,material:null,enableAlphaMask:!1,iterations:3,threshold:.8,intensity:2.3},toneMapping:{material:null},colorGrading:{enabled:!1,material:null,contribute:1,colorGradingMap:null},fsr:{enabled:!1,material:null,sharpness:.8},fxaa:{enabled:!1,material:null}}},makeToneMapping:p}),a._RF.push({},"cbf30kCUX9A3K+QpVC6wnzx","builtin-pipeline-types",void 0);var l=n.SampleCount;function i(){return{enabled:!1,sampleCount:l.X4}}function r(e){void 0===e.enabled&&(e.enabled=!1),void 0===e.sampleCount&&(e.sampleCount=l.X4)}function t(){return{enabled:!1,material:null,enableAlphaMask:!1,iterations:3,threshold:.8,intensity:2.3}}function o(e){void 0===e.enabled&&(e.enabled=!1),void 0===e.material&&(e.material=null),void 0===e.enableAlphaMask&&(e.enableAlphaMask=!1),void 0===e.iterations&&(e.iterations=3),void 0===e.threshold&&(e.threshold=.8),void 0===e.intensity&&(e.intensity=2.3)}function d(){return{enabled:!1,material:null,contribute:1,colorGradingMap:null}}function u(e){void 0===e.enabled&&(e.enabled=!1),void 0===e.material&&(e.material=null),void 0===e.contribute&&(e.contribute=1),void 0===e.colorGradingMap&&(e.colorGradingMap=null)}function s(){return{enabled:!1,material:null,sharpness:.8}}function b(e){void 0===e.enabled&&(e.enabled=!1),void 0===e.material&&(e.material=null),void 0===e.sharpness&&(e.sharpness=.8)}function c(){return{enabled:!1,material:null}}function m(e){void 0===e.enabled&&(e.enabled=!1),void 0===e.material&&(e.material=null)}function p(){return{material:null}}function f(e){void 0===e.material&&(e.material=null)}a._RF.pop()}}}));

System.register("bundle://internal/_virtual/builtin-pipeline.ts",["./rollupPluginModLoBabelHelpers.js","cc","./env","./builtin-pipeline-types.ts"],(function(e){var a,t,i,n,r,s,o,d,l,h,c,u,p,g,m,S,f,_;return{setters:[function(e){a=e.createForOfIteratorHelperLoose},function(e){t=e.cclegacy,i=e.geometry,n=e.gfx,r=e.renderer,s=e.Vec2,o=e.Vec4,d=e.rendering,l=e.assert,h=e.clamp,c=e.Vec3,u=e.Material,p=e.Layers,g=e.PipelineEventType,m=e.sys,S=e.pipeline},function(e){f=e.DEBUG},function(e){_=e.makePipelineSettings}],execute:function(){e("getPingPongRenderTarget",G),t._RF.push({},"ff9b0GZzgRM/obMbHGfCNbk","builtin-pipeline",void 0);var w=i.AABB,b=i.Sphere,P=i.intersect,R=n.ClearFlagBit,T=n.Color,M=n.Format,E=n.FormatFeatureBit,v=n.LoadOp,C=n.StoreOp,A=n.TextureType,L=n.Viewport,x=r.scene,D=x.CameraUsage,F=x.CSMLevel,N=x.LightType;function O(e){return!!(e.clearFlag&(R.COLOR|R.STENCIL<<1))}function B(e,a,t,i,n,r){e.shadowFixedArea||e.csmLevel===F.LEVEL_1?(n.left=0,n.top=0,n.width=Math.trunc(a),n.height=Math.trunc(t)):(n.left=Math.trunc(i%2*.5*a),n.top=r>0?Math.trunc(.5*(1-Math.floor(i/2))*t):Math.trunc(.5*Math.floor(i/2)*t),n.width=Math.trunc(.5*a),n.height=Math.trunc(.5*t)),n.left=Math.max(0,n.left),n.top=Math.max(0,n.top),n.width=Math.max(1,n.width),n.height=Math.max(1,n.height)}var Q=e("PipelineConfigs",(function(){this.isWeb=!1,this.isWebGL1=!1,this.isWebGPU=!1,this.isMobile=!1,this.isHDR=!1,this.useFloatOutput=!1,this.toneMappingType=0,this.shadowEnabled=!1,this.shadowMapFormat=M.R32F,this.shadowMapSize=new s(1,1),this.usePlanarShadow=!1,this.screenSpaceSignY=1,this.supportDepthSample=!1,this.mobileMaxSpotLightShadowMaps=1,this.platform=new o(0,0,0,0)}));function y(e,a){var t=E.SAMPLED_TEXTURE|E.LINEAR_FILTER,i=e.device;a.isWeb=!m.isNative,a.isWebGL1=i.gfxAPI===n.API.WEBGL,a.isWebGPU=i.gfxAPI===n.API.WEBGPU,a.isMobile=m.isMobile,a.isHDR=e.pipelineSceneData.isHDR,a.useFloatOutput=e.getMacroBool("CC_USE_FLOAT_OUTPUT"),a.toneMappingType=e.pipelineSceneData.postSettings.toneMappingType;var s=e.pipelineSceneData.shadows;a.shadowEnabled=s.enabled,a.shadowMapFormat=S.supportsR32FloatTexture(e.device)?M.R32F:M.RGBA8,a.shadowMapSize.set(s.size),a.usePlanarShadow=s.enabled&&s.type===r.scene.ShadowType.Planar,a.screenSpaceSignY=e.device.capabilities.screenSpaceSignY,a.supportDepthSample=(e.device.getFormatFeatures(M.DEPTH_STENCIL)&t)===t;var o=i.capabilities.screenSpaceSignY;a.platform.x=a.isMobile?1:0,a.platform.w=.5*o+.5<<1|.5*i.capabilities.clipSpaceSignY+.5}var H=_(),z=e("CameraConfigs",(function(){this.settings=H,this.isMainGameWindow=!1,this.renderWindowId=0,this.colorName="",this.depthStencilName="",this.enableFullPipeline=!1,this.enableProfiler=!1,this.remainingPasses=0,this.enableShadingScale=!1,this.shadingScale=1,this.nativeWidth=1,this.nativeHeight=1,this.width=1,this.height=1,this.enableHDR=!1,this.radianceFormat=n.Format.RGBA8,this.copyAndTonemapMaterial=null,this.enableStoreSceneDepth=!1})),I=new T(0,0,0,0);function W(e,a,t,i){l(!!t.copyAndTonemapMaterial);var n=e.addRenderPass(t.nativeWidth,t.nativeHeight,"cc-tone-mapping");return n.addRenderTarget(t.colorName,v.CLEAR,C.STORE,I),n.addTexture(i,"inputTexture"),n.setVec4("g_platform",a.platform),n.addQueue(d.QueueHint.OPAQUE).addFullscreenQuad(t.copyAndTonemapMaterial,1),n}function G(e,a,t){return e.startsWith(a)?""+a+(1-Number(e.charAt(a.length)))+"_"+t:a+"0_"+t}var U=function(){function e(){this.lights=[],this.shadowEnabledSpotLights=[],this._sphere=b.create(0,0,0,1),this._boundingBox=new w,this._rangedDirLightBoundingBox=new w(0,0,0,.5,.5,.5)}var t=e.prototype;return t.cullLights=function(e,t,i){this.lights.length=0,this.shadowEnabledSpotLights.length=0;for(var n,r=a(e.spotLights);!(n=r()).done;){var s=n.value;s.baked||(b.set(this._sphere,s.position.x,s.position.y,s.position.z,s.range),P.sphereFrustum(this._sphere,t)&&(s.shadowEnabled?this.shadowEnabledSpotLights.push(s):this.lights.push(s)))}for(var o,d=a(e.sphereLights);!(o=d()).done;){var l=o.value;l.baked||(b.set(this._sphere,l.position.x,l.position.y,l.position.z,l.range),P.sphereFrustum(this._sphere,t)&&this.lights.push(l))}for(var h,u=a(e.pointLights);!(h=u()).done;){var p=h.value;p.baked||(b.set(this._sphere,p.position.x,p.position.y,p.position.z,p.range),P.sphereFrustum(this._sphere,t)&&this.lights.push(p))}for(var g,m=a(e.rangedDirLights);!(g=m()).done;){var S=g.value;w.transform(this._boundingBox,this._rangedDirLightBoundingBox,S.node.getWorldMatrix()),P.aabbFrustum(this._boundingBox,t)&&this.lights.push(S)}i&&this.shadowEnabledSpotLights.sort((function(e,a){return c.squaredDistance(i,e.position)-c.squaredDistance(i,a.position)}))},t._addLightQueues=function(e,t){for(var i,n=a(this.lights);!(i=n()).done;){var r=i.value,s=t.addQueue(d.QueueHint.BLEND,"forward-add");switch(r.type){case N.SPHERE:s.name="sphere-light";break;case N.SPOT:s.name="spot-light";break;case N.POINT:s.name="point-light";break;case N.RANGED_DIRECTIONAL:s.name="ranged-directional-light";break;default:s.name="unknown-light"}s.addScene(e,d.SceneFlags.BLEND,r)}},t.addSpotlightShadowPasses=function(e,t,i){for(var n,r=0,s=a(this.shadowEnabledSpotLights);!(n=s()).done;){var o=n.value,l=e.pipelineSceneData.shadows.size,h=e.addRenderPass(l.x,l.y,"default");if(h.name="SpotLightShadowPass"+r,h.addRenderTarget("SpotShadowMap"+r,v.CLEAR,C.STORE,new T(1,1,1,1)),h.addDepthStencil("SpotShadowDepth"+r,v.CLEAR,C.DISCARD),h.addQueue(d.QueueHint.NONE,"shadow-caster").addScene(t,d.SceneFlags.OPAQUE|d.SceneFlags.MASK|d.SceneFlags.SHADOW_CASTER).useLightFrustum(o),++r>=i)break}},t.addLightQueues=function(e,t,i){this._addLightQueues(t,e);for(var n,r=0,s=a(this.shadowEnabledSpotLights);!(n=s()).done;){var o=n.value;if(e.addTexture("SpotShadowMap"+r,"cc_spotShadowMap"),e.addQueue(d.QueueHint.BLEND,"forward-add").addScene(t,d.SceneFlags.BLEND,o),++r>=i)break}},t.addLightPasses=function(e,t,i,n,r,s,o,l,h,c){this._addLightQueues(o,c);for(var u,p=0,g=h.pipelineSceneData.shadows.size,m=a(this.shadowEnabledSpotLights);!(u=m()).done;){var S=u.value,f=h.addRenderPass(g.x,g.y,"default");f.name="SpotlightShadowPass",f.addRenderTarget("ShadowMap"+n,v.CLEAR,C.STORE,new T(1,1,1,1)),f.addDepthStencil("ShadowDepth"+n,v.CLEAR,C.DISCARD),f.addQueue(d.QueueHint.NONE,"shadow-caster").addScene(o,d.SceneFlags.OPAQUE|d.SceneFlags.MASK|d.SceneFlags.SHADOW_CASTER).useLightFrustum(S);var _=++p===this.shadowEnabledSpotLights.length?i:C.STORE;(c=h.addRenderPass(r,s,"default")).name="SpotlightWithShadowMap",c.setViewport(l),c.addRenderTarget(e,v.LOAD),c.addDepthStencil(t,v.LOAD,_),c.addTexture("ShadowMap"+n,"cc_spotShadowMap"),c.addQueue(d.QueueHint.BLEND,"forward-add").addScene(o,d.SceneFlags.BLEND,S)}return c},t.isMultipleLightPassesNeeded=function(){return this.shadowEnabledSpotLights.length>0},e}(),V=e("BuiltinForwardPassBuilder",function(){function e(){this.forwardLighting=new U,this._viewport=new L,this._clearColor=new T(0,0,0,1),this._reflectionProbeClearColor=new c(0,0,0)}var i=e.prototype;return i.getConfigOrder=function(){return e.ConfigOrder},i.getRenderOrder=function(){return e.RenderOrder},i.configCamera=function(e,a,t){t.enableMainLightShadowMap=a.shadowEnabled&&!a.usePlanarShadow&&!!e.scene&&!!e.scene.mainLight&&e.scene.mainLight.shadowEnabled,t.enableMainLightPlanarShadowMap=a.shadowEnabled&&a.usePlanarShadow&&!!e.scene&&!!e.scene.mainLight&&e.scene.mainLight.shadowEnabled,t.enablePlanarReflectionProbe=t.isMainGameWindow||e.cameraUsage===D.SCENE_VIEW,t.enableMSAA=t.settings.msaa.enabled&&!t.enableStoreSceneDepth&&!a.isWeb&&!a.isWebGL1,t.enableSingleForwardPass=a.isMobile||t.enableMSAA,++t.remainingPasses},i.windowResize=function(e,a,t,i,n,r,s){var o=d.ResourceFlags,l=d.ResourceResidency,h=i.renderWindowId,c=t.settings,u=t.enableShadingScale?Math.max(Math.floor(r*t.shadingScale),1):r,p=t.enableShadingScale?Math.max(Math.floor(s*t.shadingScale),1):s;if(t.enableMSAA&&(t.enableHDR?e.addTexture("MsaaRadiance"+h,A.TEX2D,t.radianceFormat,u,p,1,1,1,c.msaa.sampleCount,o.COLOR_ATTACHMENT,l.MEMORYLESS):e.addTexture("MsaaRadiance"+h,A.TEX2D,M.RGBA8,u,p,1,1,1,c.msaa.sampleCount,o.COLOR_ATTACHMENT,l.MEMORYLESS),e.addTexture("MsaaDepthStencil"+h,A.TEX2D,M.DEPTH_STENCIL,u,p,1,1,1,c.msaa.sampleCount,o.DEPTH_STENCIL_ATTACHMENT,l.MEMORYLESS)),e.addRenderTarget("ShadowMap"+h,a.shadowMapFormat,a.shadowMapSize.x,a.shadowMapSize.y),e.addDepthStencil("ShadowDepth"+h,M.DEPTH_STENCIL,a.shadowMapSize.x,a.shadowMapSize.y),t.enableSingleForwardPass)for(var g=a.mobileMaxSpotLightShadowMaps,m=0;m!==g;++m)e.addRenderTarget("SpotShadowMap"+m,a.shadowMapFormat,a.shadowMapSize.x,a.shadowMapSize.y),e.addDepthStencil("SpotShadowDepth"+m,M.DEPTH_STENCIL,a.shadowMapSize.x,a.shadowMapSize.y)},i.setup=function(e,a,t,i,n){var r=i.window.renderWindowId,s=i.scene,o=s.mainLight;--t.remainingPasses,l(t.remainingPasses>=0),this.forwardLighting.cullLights(s,i.frustum),t.enableMainLightShadowMap&&(l(!!o),this._addCascadedShadowMapPass(e,a,r,o,i)),t.enableSingleForwardPass&&this.forwardLighting.addSpotlightShadowPasses(e,i,a.mobileMaxSpotLightShadowMaps),this._tryAddReflectionProbePasses(e,t,r,o,i.scene),t.remainingPasses>0||t.enableShadingScale?(n.colorName=t.enableShadingScale?"ScaledRadiance0_"+r:"Radiance0_"+r,n.depthStencilName=t.enableShadingScale?"ScaledSceneDepth_"+r:"SceneDepth_"+r):(n.colorName=t.colorName,n.depthStencilName=t.depthStencilName);var d=this._addForwardRadiancePasses(e,a,t,r,i,t.width,t.height,o,n.colorName,n.depthStencilName,!t.enableMSAA,t.enableStoreSceneDepth?C.STORE:C.DISCARD);return t.enableStoreSceneDepth||(n.depthStencilName=""),0===t.remainingPasses&&t.enableShadingScale?W(e,a,t,n.colorName):d},i._addCascadedShadowMapPass=function(e,a,t,i,n){var r=d.QueueHint,s=d.SceneFlags,o=e.pipelineSceneData.shadows.size,l=o.x,h=o.y,c=this._viewport;c.left=c.top=0,c.width=l,c.height=h;var u=e.addRenderPass(l,h,"default");u.name="CascadedShadowMap",u.addRenderTarget("ShadowMap"+t,v.CLEAR,C.STORE,new T(1,1,1,1)),u.addDepthStencil("ShadowDepth"+t,v.CLEAR,C.DISCARD);for(var p=e.pipelineSceneData.csmSupported?i.csmLevel:1,g=0;g!==p;++g){B(i,l,h,g,this._viewport,a.screenSpaceSignY);var m=u.addQueue(r.NONE,"shadow-caster");a.isWebGPU||m.setViewport(this._viewport),m.addScene(n,s.OPAQUE|s.MASK|s.SHADOW_CASTER).useLightFrustum(i,g)}},i._tryAddReflectionProbePasses=function(e,i,s,o,l){var h=t.internal.reflectionProbeManager;if(h)for(var c,u=d.ResourceResidency,p=h.getProbes(),g=0,m=a(p);!(c=m()).done;){var S=c.value;if(S.needRender){var f=S.renderArea(),_=Math.max(Math.floor(f.x),1),w=Math.max(Math.floor(f.y),1);if(S.probeType===r.scene.ProbeType.PLANAR){if(!i.enablePlanarReflectionProbe)continue;var b=S.realtimePlanarTexture.window,P="PlanarProbeRT"+g,R="PlanarProbeDS"+g;e.addRenderWindow(P,i.radianceFormat,_,w,b),e.addDepthStencil(R,n.Format.DEPTH_STENCIL,_,w,u.MEMORYLESS);var T=e.addRenderPass(_,w,"default");T.name="PlanarReflectionProbe"+g,this._buildReflectionProbePass(T,i,s,S.camera,P,R,o,l)}if(4===++g)break}}},i._buildReflectionProbePass=function(e,a,t,i,n,r,s,o){void 0===o&&(o=null);var l=d.QueueHint,h=d.SceneFlags,c=a.enableMSAA?C.DISCARD:C.STORE;if(O(i)){this._reflectionProbeClearColor.x=i.clearColor.x,this._reflectionProbeClearColor.y=i.clearColor.y,this._reflectionProbeClearColor.z=i.clearColor.z;var u=d.packRGBE(this._reflectionProbeClearColor);this._clearColor.x=u.x,this._clearColor.y=u.y,this._clearColor.z=u.z,this._clearColor.w=u.w,e.addRenderTarget(n,v.CLEAR,c,this._clearColor)}else e.addRenderTarget(n,v.LOAD,c);i.clearFlag&R.DEPTH_STENCIL?e.addDepthStencil(r,v.CLEAR,C.DISCARD,i.clearDepth,i.clearStencil,i.clearFlag&R.DEPTH_STENCIL):e.addDepthStencil(r,v.LOAD,C.DISCARD),a.enableMainLightShadowMap&&e.addTexture("ShadowMap"+t,"cc_shadowMap"),e.addQueue(l.NONE,"reflect-map").addScene(i,h.OPAQUE|h.MASK|h.REFLECTION_PROBE,s||void 0,o||void 0)},i._addForwardRadiancePasses=function(e,a,t,i,n,r,s,o,h,c,u,p){void 0===u&&(u=!1),void 0===p&&(p=C.DISCARD);var g=d.QueueHint,m=d.SceneFlags,S=n.clearColor;this._clearColor.x=S.x,this._clearColor.y=S.y,this._clearColor.z=S.z,this._clearColor.w=S.w;var f=n.viewport;this._viewport.left=Math.round(f.x*r),this._viewport.top=Math.round(f.y*s),this._viewport.width=Math.max(Math.round(f.width*r),1),this._viewport.height=Math.max(Math.round(f.height*s),1);var _=!u&&t.enableMSAA;l(!_||t.enableSingleForwardPass);var w=t.enableSingleForwardPass?this._addForwardSingleRadiancePass(e,a,t,i,n,_,r,s,o,h,c,p):this._addForwardMultipleRadiancePasses(e,t,i,n,r,s,o,h,c,p);t.enableMainLightPlanarShadowMap&&this._addPlanarShadowQueue(n,o,w);var b=m.BLEND|(n.geometryRenderer?m.GEOMETRY:m.NONE);return w.addQueue(g.BLEND).addScene(n,b,o||void 0),w},i._addForwardSingleRadiancePass=function(e,a,t,i,n,r,s,o,d,h,c,u){var p;if(l(t.enableSingleForwardPass),r){var g="MsaaRadiance"+i,m="MsaaDepthStencil"+i,S=t.settings.msaa.sampleCount,f=e.addMultisampleRenderPass(s,o,S,0,"default");f.name="MsaaForwardPass",this._buildForwardMainLightPass(f,t,i,n,g,m,C.DISCARD,d),f.resolveRenderTarget(g,h),p=f}else(p=e.addRenderPass(s,o,"default")).name="ForwardPass",this._buildForwardMainLightPass(p,t,i,n,h,c,u,d);return l(void 0!==p),this.forwardLighting.addLightQueues(p,n,a.mobileMaxSpotLightShadowMaps),p},i._addForwardMultipleRadiancePasses=function(e,a,t,i,n,r,s,o,d,h){l(!a.enableSingleForwardPass);var c=e.addRenderPass(n,r,"default");c.name="ForwardPass";var u=this.forwardLighting.isMultipleLightPassesNeeded()?C.STORE:h;return this._buildForwardMainLightPass(c,a,t,i,o,d,u,s),c=this.forwardLighting.addLightPasses(o,d,h,t,n,r,i,this._viewport,e,c)},i._buildForwardMainLightPass=function(e,a,t,i,n,r,s,o,l){void 0===l&&(l=null);var h=d.QueueHint,c=d.SceneFlags;e.setViewport(this._viewport);var u=a.enableMSAA?C.DISCARD:C.STORE;O(i)?e.addRenderTarget(n,v.CLEAR,u,this._clearColor):e.addRenderTarget(n,v.LOAD,u),i.clearFlag&R.DEPTH_STENCIL?e.addDepthStencil(r,v.CLEAR,s,i.clearDepth,i.clearStencil,i.clearFlag&R.DEPTH_STENCIL):e.addDepthStencil(r,v.LOAD,s),a.enableMainLightShadowMap&&e.addTexture("ShadowMap"+t,"cc_shadowMap"),e.addQueue(h.NONE).addScene(i,c.OPAQUE|c.MASK,o||void 0,l||void 0)},i._addPlanarShadowQueue=function(e,a,t){var i=d.QueueHint,n=d.SceneFlags;t.addQueue(i.BLEND,"planar-shadow").addScene(e,n.SHADOW_CASTER|n.PLANAR_SHADOW|n.BLEND,a||void 0)},e}());V.ConfigOrder=100,V.RenderOrder=100;var k=e("BuiltinBloomPassBuilder",function(){function e(){this._clearColorTransparentBlack=new T(0,0,0,0),this._bloomParams=new o(0,0,0,0),this._bloomTexSize=new o(0,0,0,0),this._bloomWidths=[],this._bloomHeights=[],this._bloomTexNames=[]}var a=e.prototype;return a.getConfigOrder=function(){return 0},a.getRenderOrder=function(){return 200},a.configCamera=function(e,a,t){t.enableBloom=t.settings.bloom.enabled&&!!t.settings.bloom.material,t.enableBloom&&++t.remainingPasses},a.windowResize=function(e,a,t,i){if(t.enableBloom)for(var n=i.renderWindowId,r=t.width,s=t.height,o=0;o!==t.settings.bloom.iterations+1;++o)r=Math.max(Math.floor(r/2),1),s=Math.max(Math.floor(s/2),1),e.addRenderTarget("BloomTex"+n+"_"+o,t.radianceFormat,r,s)},a.setup=function(e,a,t,i,n,r){if(!t.enableBloom)return r;--t.remainingPasses,l(t.remainingPasses>=0);var s=i.window.renderWindowId;return l(!!t.settings.bloom.material),this._addKawaseDualFilterBloomPasses(e,a,t,t.settings,t.settings.bloom.material,s,t.width,t.height,n.colorName)},a._addKawaseDualFilterBloomPasses=function(e,a,t,i,n,r,s,o,l){var h=d.QueueHint,c=i.bloom.iterations,u=c+1;this._bloomWidths.length=u,this._bloomHeights.length=u,this._bloomWidths[0]=Math.max(Math.floor(s/2),1),this._bloomHeights[0]=Math.max(Math.floor(o/2),1);for(var p=1;p!==u;++p)this._bloomWidths[p]=Math.max(Math.floor(this._bloomWidths[p-1]/2),1),this._bloomHeights[p]=Math.max(Math.floor(this._bloomHeights[p-1]/2),1);this._bloomTexNames.length=u;for(var g=0;g!==u;++g)this._bloomTexNames[g]="BloomTex"+r+"_"+g;this._bloomParams.x=a.useFloatOutput?1:0,this._bloomParams.x=0,this._bloomParams.z=i.bloom.threshold,this._bloomParams.w=i.bloom.enableAlphaMask?1:0;var m=e.addRenderPass(this._bloomWidths[0],this._bloomHeights[0],"cc-bloom-prefilter");m.addRenderTarget(this._bloomTexNames[0],v.CLEAR,C.STORE,this._clearColorTransparentBlack),m.addTexture(l,"inputTexture"),m.setVec4("g_platform",a.platform),m.setVec4("bloomParams",this._bloomParams),m.addQueue(h.OPAQUE).addFullscreenQuad(n,0);for(var S=1;S!==u;++S){var f=e.addRenderPass(this._bloomWidths[S],this._bloomHeights[S],"cc-bloom-downsample");f.addRenderTarget(this._bloomTexNames[S],v.CLEAR,C.STORE,this._clearColorTransparentBlack),f.addTexture(this._bloomTexNames[S-1],"bloomTexture"),this._bloomTexSize.x=this._bloomWidths[S-1],this._bloomTexSize.y=this._bloomHeights[S-1],f.setVec4("g_platform",a.platform),f.setVec4("bloomTexSize",this._bloomTexSize),f.addQueue(h.OPAQUE).addFullscreenQuad(n,1)}for(var _=c;_-- >0;){var w=e.addRenderPass(this._bloomWidths[_],this._bloomHeights[_],"cc-bloom-upsample");w.addRenderTarget(this._bloomTexNames[_],v.CLEAR,C.STORE,this._clearColorTransparentBlack),w.addTexture(this._bloomTexNames[_+1],"bloomTexture"),this._bloomTexSize.x=this._bloomWidths[_+1],this._bloomTexSize.y=this._bloomHeights[_+1],w.setVec4("g_platform",a.platform),w.setVec4("bloomTexSize",this._bloomTexSize),w.addQueue(h.OPAQUE).addFullscreenQuad(n,2)}var b=e.addRenderPass(s,o,"cc-bloom-combine");return b.addRenderTarget(l,v.LOAD,C.STORE),b.addTexture(this._bloomTexNames[0],"bloomTexture"),b.setVec4("g_platform",a.platform),b.setVec4("bloomParams",this._bloomParams),b.addQueue(h.BLEND).addFullscreenQuad(n,3),0===t.remainingPasses?W(e,a,t,l):b},e}()),Y=e("BuiltinToneMappingPassBuilder",function(){function e(){this._colorGradingTexSize=new s(0,0)}var a=e.prototype;return a.getConfigOrder=function(){return 0},a.getRenderOrder=function(){return 300},a.configCamera=function(e,a,t){var i=t.settings;t.enableColorGrading=i.colorGrading.enabled&&!!i.colorGrading.material&&!!i.colorGrading.colorGradingMap,t.enableToneMapping=t.enableHDR||t.enableColorGrading,t.enableToneMapping&&++t.remainingPasses},a.windowResize=function(e,a,t){t.enableColorGrading&&(l(!!t.settings.colorGrading.material),t.settings.colorGrading.material.setProperty("colorGradingMap",t.settings.colorGrading.colorGradingMap))},a.setup=function(e,a,t,i,n,r){if(!t.enableToneMapping)return r;if(--t.remainingPasses,l(t.remainingPasses>=0),0===t.remainingPasses)return this._addCopyAndTonemapPass(e,a,t,t.nativeWidth,t.nativeHeight,n.colorName,t.colorName);var s=t.renderWindowId,o=t.enableShadingScale?"ScaledLdrColor":"LdrColor",d=G(n.colorName,o,s),h=n.colorName;return n.colorName=d,this._addCopyAndTonemapPass(e,a,t,t.width,t.height,h,d)},a._addCopyAndTonemapPass=function(e,a,t,i,n,r,s){var o,h=t.settings;if(t.enableColorGrading){l(!!h.colorGrading.material),l(!!h.colorGrading.colorGradingMap);var c=h.colorGrading.colorGradingMap;this._colorGradingTexSize.x=c.width,this._colorGradingTexSize.y=c.height;var u=c.width===c.height;(o=u?e.addRenderPass(i,n,"cc-color-grading-8x8"):e.addRenderPass(i,n,"cc-color-grading-nx1")).addRenderTarget(s,v.CLEAR,C.STORE,I),o.addTexture(r,"sceneColorMap"),o.setVec4("g_platform",a.platform),o.setVec2("lutTextureSize",this._colorGradingTexSize),o.setFloat("contribute",h.colorGrading.contribute),o.addQueue(d.QueueHint.OPAQUE).addFullscreenQuad(h.colorGrading.material,u?1:0)}else(o=e.addRenderPass(i,n,"cc-tone-mapping")).addRenderTarget(s,v.CLEAR,C.STORE,I),o.addTexture(r,"inputTexture"),o.setVec4("g_platform",a.platform),h.toneMapping.material?o.addQueue(d.QueueHint.OPAQUE).addFullscreenQuad(h.toneMapping.material,0):(l(!!t.copyAndTonemapMaterial),o.addQueue(d.QueueHint.OPAQUE).addFullscreenQuad(t.copyAndTonemapMaterial,0));return o},e}()),X=e("BuiltinFXAAPassBuilder",function(){function e(){this._fxaaParams=new o(0,0,0,0)}var a=e.prototype;return a.getConfigOrder=function(){return 0},a.getRenderOrder=function(){return 400},a.configCamera=function(e,a,t){t.enableFXAA=t.settings.fxaa.enabled&&!!t.settings.fxaa.material,t.enableFXAA&&++t.remainingPasses},a.setup=function(e,a,t,i,n,r){if(!t.enableFXAA)return r;--t.remainingPasses,l(t.remainingPasses>=0);var s=t.renderWindowId,o=t.enableShadingScale?"ScaledLdrColor":"LdrColor",d=G(n.colorName,o,s);if(l(!!t.settings.fxaa.material),0===t.remainingPasses)return t.enableShadingScale?(this._addFxaaPass(e,a,t.settings.fxaa.material,t.width,t.height,n.colorName,d),W(e,a,t,d)):(l(t.width===t.nativeWidth),l(t.height===t.nativeHeight),this._addFxaaPass(e,a,t.settings.fxaa.material,t.width,t.height,n.colorName,t.colorName));var h=n.colorName;return n.colorName=d,this._addFxaaPass(e,a,t.settings.fxaa.material,t.width,t.height,h,d)},a._addFxaaPass=function(e,a,t,i,n,r,s){this._fxaaParams.x=i,this._fxaaParams.y=n,this._fxaaParams.z=1/i,this._fxaaParams.w=1/n;var o=e.addRenderPass(i,n,"cc-fxaa");return o.addRenderTarget(s,v.CLEAR,C.STORE,I),o.addTexture(r,"sceneColorMap"),o.setVec4("g_platform",a.platform),o.setVec4("texSize",this._fxaaParams),o.addQueue(d.QueueHint.OPAQUE).addFullscreenQuad(t,0),o},e}()),K=e("BuiltinFsrPassBuilder",function(){function e(){this._fsrParams=new o(0,0,0,0),this._fsrTexSize=new o(0,0,0,0)}var a=e.prototype;return a.getConfigOrder=function(){return 0},a.getRenderOrder=function(){return 500},a.configCamera=function(e,a,t){t.enableFSR=t.settings.fsr.enabled&&!!t.settings.fsr.material&&t.enableShadingScale&&t.shadingScale<1,t.enableFSR&&++t.remainingPasses},a.setup=function(e,a,t,i,n,r){if(!t.enableFSR)return r;--t.remainingPasses;var s=n.colorName,o=0===t.remainingPasses?t.colorName:G(n.colorName,"UiColor",t.renderWindowId);return n.colorName=o,l(!!t.settings.fsr.material),this._addFsrPass(e,a,t,t.settings,t.settings.fsr.material,t.renderWindowId,t.width,t.height,s,t.nativeWidth,t.nativeHeight,o)},a._addFsrPass=function(e,a,t,i,n,r,s,o,l,c,u,p){this._fsrTexSize.x=s,this._fsrTexSize.y=o,this._fsrTexSize.z=c,this._fsrTexSize.w=u,this._fsrParams.x=h(1-i.fsr.sharpness,.02,.98);var g=G(p,"UiColor",r),m=e.addRenderPass(c,u,"cc-fsr-easu");m.addRenderTarget(g,v.CLEAR,C.STORE,I),m.addTexture(l,"outputResultMap"),m.setVec4("g_platform",a.platform),m.setVec4("fsrTexSize",this._fsrTexSize),m.addQueue(d.QueueHint.OPAQUE).addFullscreenQuad(n,0);var S=e.addRenderPass(c,u,"cc-fsr-rcas");return S.addRenderTarget(p,v.CLEAR,C.STORE,I),S.addTexture(g,"outputResultMap"),S.setVec4("g_platform",a.platform),S.setVec4("fsrTexSize",this._fsrTexSize),S.setVec4("fsrParams",this._fsrParams),S.addQueue(d.QueueHint.OPAQUE).addFullscreenQuad(n,1),S},e}()),q=e("BuiltinUiPassBuilder",function(){function e(){}var a=e.prototype;return a.getConfigOrder=function(){return 0},a.getRenderOrder=function(){return 1e3},a.setup=function(e,a,t,i,n,r){l(!!r);var s=d.SceneFlags.UI;return t.enableProfiler&&(s|=d.SceneFlags.PROFILER,r.showStatistics=!0),r.addQueue(d.QueueHint.BLEND,"default","default").addScene(i,s),r},e}());if(d){var j=d.QueueHint,Z=d.SceneFlags,J=function(){function e(){this._pipelineEvent=t.director.root.pipelineEvent,this._forwardPass=new V,this._bloomPass=new k,this._toneMappingPass=new Y,this._fxaaPass=new X,this._fsrPass=new K,this._uiPass=new q,this._clearColor=new T(0,0,0,1),this._viewport=new L,this._configs=new Q,this._cameraConfigs=new z,this._copyAndTonemapMaterial=new u,this._initialized=!1,this._passBuilders=[]}var i=e.prototype;return i._setupPipelinePreview=function(e,a){if(e.cameraUsage===D.SCENE_VIEW||e.cameraUsage===D.PREVIEW){var t=d.getEditorPipelineSettings();a.settings=t||H}else e.pipelineSettings?a.settings=e.pipelineSettings:a.settings=H},i._preparePipelinePasses=function(e){var t=this._passBuilders;t.length=0;var i=e.settings;if(i._passes){for(var n,r=a(i._passes);!(n=r()).done;){var s=n.value;t.push(s)}l(t.length===i._passes.length)}t.push(this._forwardPass),i.bloom.enabled&&t.push(this._bloomPass),t.push(this._toneMappingPass),i.fxaa.enabled&&t.push(this._fxaaPass),i.fsr.enabled&&t.push(this._fsrPass),t.push(this._uiPass)},i._setupBuiltinCameraConfigs=function(e,a,t){var i=e.window,r=e.cameraUsage===D.GAME&&!!i.swapchain;t.isMainGameWindow=r,t.renderWindowId=i.renderWindowId,t.colorName=i.colorName,t.depthStencilName=i.depthStencilName,t.enableFullPipeline=0!=(e.visibility&p.Enum.DEFAULT),t.enableProfiler=f,t.remainingPasses=0,t.shadingScale=t.settings.shadingScale,t.enableShadingScale=t.settings.enableShadingScale&&1!==t.shadingScale,t.nativeWidth=Math.max(Math.floor(i.width),1),t.nativeHeight=Math.max(Math.floor(i.height),1),t.width=t.enableShadingScale?Math.max(Math.floor(t.nativeWidth*t.shadingScale),1):t.nativeWidth,t.height=t.enableShadingScale?Math.max(Math.floor(t.nativeHeight*t.shadingScale),1):t.nativeHeight,t.enableHDR=t.enableFullPipeline&&a.useFloatOutput,t.radianceFormat=t.enableHDR?n.Format.RGBA16F:n.Format.RGBA8,t.copyAndTonemapMaterial=this._copyAndTonemapMaterial,t.enableStoreSceneDepth=!1},i._setupCameraConfigs=function(e,t,i){this._setupPipelinePreview(e,i),this._preparePipelinePasses(i),this._passBuilders.sort((function(e,a){return e.getConfigOrder()-a.getConfigOrder()})),this._setupBuiltinCameraConfigs(e,t,i);for(var n,r=a(this._passBuilders);!(n=r()).done;){var s=n.value;s.configCamera&&s.configCamera(e,t,i)}},i.windowResize=function(e,t,i,n,r){y(e,this._configs),this._setupCameraConfigs(i,this._configs,this._cameraConfigs);var s=t.renderWindowId;e.addRenderWindow(this._cameraConfigs.colorName,M.RGBA8,n,r,t,this._cameraConfigs.depthStencilName);var o=this._cameraConfigs.width,d=this._cameraConfigs.height;this._cameraConfigs.enableShadingScale?(e.addDepthStencil("ScaledSceneDepth_"+s,M.DEPTH_STENCIL,o,d),e.addRenderTarget("ScaledRadiance0_"+s,this._cameraConfigs.radianceFormat,o,d),e.addRenderTarget("ScaledRadiance1_"+s,this._cameraConfigs.radianceFormat,o,d),e.addRenderTarget("ScaledLdrColor0_"+s,M.RGBA8,o,d),e.addRenderTarget("ScaledLdrColor1_"+s,M.RGBA8,o,d)):(e.addDepthStencil("SceneDepth_"+s,M.DEPTH_STENCIL,o,d),e.addRenderTarget("Radiance0_"+s,this._cameraConfigs.radianceFormat,o,d),e.addRenderTarget("Radiance1_"+s,this._cameraConfigs.radianceFormat,o,d),e.addRenderTarget("LdrColor0_"+s,M.RGBA8,o,d),e.addRenderTarget("LdrColor1_"+s,M.RGBA8,o,d)),e.addRenderTarget("UiColor0_"+s,M.RGBA8,n,r),e.addRenderTarget("UiColor1_"+s,M.RGBA8,n,r);for(var l,h=a(this._passBuilders);!(l=h()).done;){var c=l.value;c.windowResize&&c.windowResize(e,this._configs,this._cameraConfigs,t,i,n,r)}},i.setup=function(e,t){if(!this._initMaterials(t))for(var i,n=a(e);!(i=n()).done;){var r=i.value;r.scene&&r.window&&(this._setupCameraConfigs(r,this._configs,this._cameraConfigs),this._pipelineEvent.emit(g.RENDER_CAMERA_BEGIN,r),this._cameraConfigs.enableFullPipeline?this._buildForwardPipeline(t,r,r.scene,this._passBuilders):this._buildSimplePipeline(t,r),this._pipelineEvent.emit(g.RENDER_CAMERA_END,r))}},i._buildSimplePipeline=function(e,a){var t=Math.max(Math.floor(a.window.width),1),i=Math.max(Math.floor(a.window.height),1),n=this._cameraConfigs.colorName,r=this._cameraConfigs.depthStencilName,s=a.viewport;this._viewport.left=Math.round(s.x*t),this._viewport.top=Math.round(s.y*i),this._viewport.width=Math.max(Math.round(s.width*t),1),this._viewport.height=Math.max(Math.round(s.height*i),1);var o=a.clearColor;this._clearColor.x=o.x,this._clearColor.y=o.y,this._clearColor.z=o.z,this._clearColor.w=o.w;var d=e.addRenderPass(t,i,"default");O(a)?d.addRenderTarget(n,v.CLEAR,C.STORE,this._clearColor):d.addRenderTarget(n,v.LOAD,C.STORE),a.clearFlag&R.DEPTH_STENCIL?d.addDepthStencil(r,v.CLEAR,C.DISCARD,a.clearDepth,a.clearStencil,a.clearFlag&R.DEPTH_STENCIL):d.addDepthStencil(r,v.LOAD,C.DISCARD),d.setViewport(this._viewport),d.addQueue(j.OPAQUE).addScene(a,Z.OPAQUE);var l=Z.BLEND|Z.UI;this._cameraConfigs.enableProfiler&&(l|=Z.PROFILER,d.showStatistics=!0),d.addQueue(j.BLEND).addScene(a,l)},i._buildForwardPipeline=function(e,t,i,n){!function(e){e.sort((function(e,a){return e.getRenderOrder()-a.getRenderOrder()}))}(n);for(var r,s={colorName:"",depthStencilName:""},o=void 0,d=a(n);!(r=d()).done;){var h=r.value;h.setup&&(o=h.setup(e,this._configs,this._cameraConfigs,t,s,o))}l(0===this._cameraConfigs.remainingPasses)},i._initMaterials=function(e){return this._initialized?0:(y(e,this._configs),this._copyAndTonemapMaterial._uuid="builtin-pipeline-tone-mapping-material",this._copyAndTonemapMaterial.initialize({effectName:"pipeline/post-process/tone-mapping"}),this._copyAndTonemapMaterial.effectAsset&&(this._initialized=!0),this._initialized?0:1)},e}();d.setCustomPipeline("Builtin",new J)}t._RF.pop()}}}));

System.register("bundle://internal/_virtual/env",[],(function(e){return{execute:function(){e("DEBUG",!1)}}}));

System.register("bundle://internal/_virtual/internal",["./builtin-pipeline-settings.ts","./builtin-pipeline-types.ts","./builtin-pipeline.ts"],(function(){return{setters:[null,null,null],execute:function(){}}}));

System.register("bundle://internal/_virtual/rollupPluginModLoBabelHelpers.js",[],(function(e){return{execute:function(){function r(e,r){for(var t=0;t<r.length;t++){var i=r[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,a(i.key),i)}}function t(r,i){return(t=e("setPrototypeOf",Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,r){return e.__proto__=r,e}))(r,i)}function i(e,r){if(e){if("string"==typeof e)return n(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?n(e,r):void 0}}function n(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,i=new Array(r);t<r;t++)i[t]=e[t];return i}function o(e,r){if("object"!=typeof e||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var i=t.call(e,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(e)}function a(e){var r=o(e,"string");return"symbol"==typeof r?r:String(r)}e({applyDecoratedDescriptor:function(e,r,t,i,n){var o={};Object.keys(i).forEach((function(e){o[e]=i[e]})),o.enumerable=!!o.enumerable,o.configurable=!!o.configurable,("value"in o||o.initializer)&&(o.writable=!0);o=t.slice().reverse().reduce((function(t,i){return i(e,r,t)||t}),o),n&&void 0!==o.initializer&&(o.value=o.initializer?o.initializer.call(n):void 0,o.initializer=void 0);void 0===o.initializer&&(Object.defineProperty(e,r,o),o=null);return o},arrayLikeToArray:n,assertThisInitialized:function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},createClass:function(e,t,i){t&&r(e.prototype,t);i&&r(e,i);return Object.defineProperty(e,"prototype",{writable:!1}),e},createForOfIteratorHelperLoose:function(e,r){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(t)return(t=t.call(e)).next.bind(t);if(Array.isArray(e)||(t=i(e))||r&&e&&"number"==typeof e.length){t&&(e=t);var n=0;return function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},inheritsLoose:function(e,r){e.prototype=Object.create(r.prototype),e.prototype.constructor=e,t(e,r)},initializerDefineProperty:function(e,r,t,i){if(!t)return;Object.defineProperty(e,r,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(i):void 0})},setPrototypeOf:t,toPrimitive:o,toPropertyKey:a,unsupportedIterableToArray:i})}}}));

(function(r) {
  r('virtual:///prerequisite-imports/internal', 'bundle://internal/_virtual/internal'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2ZpbGU6L0M6L1Byb2dyYW1EYXRhL2NvY29zL2VkaXRvcnMvQ3JlYXRvci8zLjguNS9yZXNvdXJjZXMvcmVzb3VyY2VzLzNkL2VuZ2luZS9lZGl0b3IvYXNzZXRzL2RlZmF1bHRfcmVuZGVycGlwZWxpbmUvZmlsZTovQzovUHJvZ3JhbURhdGEvY29jb3MvZWRpdG9ycy9DcmVhdG9yLzMuOC41L3Jlc291cmNlcy9yZXNvdXJjZXMvM2QvZW5naW5lL2VkaXRvci9hc3NldHMvZGVmYXVsdF9yZW5kZXJwaXBlbGluZS9idWlsdGluLXBpcGVsaW5lLXNldHRpbmdzLnRzIiwiLi4vZmlsZTovQzovUHJvZ3JhbURhdGEvY29jb3MvZWRpdG9ycy9DcmVhdG9yLzMuOC41L3Jlc291cmNlcy9yZXNvdXJjZXMvM2QvZW5naW5lL2VkaXRvci9hc3NldHMvZGVmYXVsdF9yZW5kZXJwaXBlbGluZS9maWxlOi9DOi9Qcm9ncmFtRGF0YS9jb2Nvcy9lZGl0b3JzL0NyZWF0b3IvMy44LjUvcmVzb3VyY2VzL3Jlc291cmNlcy8zZC9lbmdpbmUvZWRpdG9yL2Fzc2V0cy9kZWZhdWx0X3JlbmRlcnBpcGVsaW5lL2J1aWx0aW4tcGlwZWxpbmUtdHlwZXMudHMiLCIuLi9maWxlOi9DOi9Qcm9ncmFtRGF0YS9jb2Nvcy9lZGl0b3JzL0NyZWF0b3IvMy44LjUvcmVzb3VyY2VzL3Jlc291cmNlcy8zZC9lbmdpbmUvZWRpdG9yL2Fzc2V0cy9kZWZhdWx0X3JlbmRlcnBpcGVsaW5lL2ZpbGU6L0M6L1Byb2dyYW1EYXRhL2NvY29zL2VkaXRvcnMvQ3JlYXRvci8zLjguNS9yZXNvdXJjZXMvcmVzb3VyY2VzLzNkL2VuZ2luZS9lZGl0b3IvYXNzZXRzL2RlZmF1bHRfcmVuZGVycGlwZWxpbmUvYnVpbHRpbi1waXBlbGluZS50cyIsIi4uL3ZpcnR1YWw6L2NjL3ZpcnR1YWw6L2NjL2VudiIsIi4uL2NjZTovaW50ZXJuYWwvY2NlOi9pbnRlcm5hbC9yb2xsdXBQbHVnaW5Nb2RMb0JhYmVsSGVscGVycy5qcyJdLCJuYW1lcyI6WyJjY2NsYXNzIiwiX2RlY29yYXRvciIsImRpc2FsbG93TXVsdGlwbGUiLCJleGVjdXRlSW5FZGl0TW9kZSIsIm1lbnUiLCJwcm9wZXJ0eSIsInJlcXVpcmVDb21wb25lbnQiLCJ0eXBlIiwiX2RlYyIsIl9kZWMyIiwiX2RlYzMiLCJDYW1lcmEiLCJfZGVjNCIsIkNDQm9vbGVhbiIsIl9kZWM1IiwiZGlzcGxheU5hbWUiLCJfZGVjNiIsImdyb3VwIiwiaWQiLCJuYW1lIiwiX2RlYzciLCJzdHlsZSIsIkNDSW50ZWdlciIsInJhbmdlIiwiX2RlYzgiLCJfZGVjOSIsInRvb2x0aXAiLCJDQ0Zsb2F0Iiwic2xpZGUiLCJfZGVjMTAiLCJfZGVjMTEiLCJNYXRlcmlhbCIsIl9kZWMxMiIsIl9kZWMxMyIsIl9kZWMxNCIsIm1pbiIsIl9kZWMxNSIsIl9kZWMxNiIsIl9kZWMxNyIsIl9kZWMxOCIsIlRleHR1cmUyRCIsIl9kZWMxOSIsIl9kZWMyMCIsIl9kZWMyMSIsIl9kZWMyMiIsIl9kZWMyMyIsIl9kZWMyNCIsIl9jbGFzcyIsIl9kZXNjcmlwdG9yIiwiX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvciIsIl9jbGFzczIiLCJfQ29tcG9uZW50IiwiQnVpbHRpblBpcGVsaW5lU2V0dGluZ3MiLCJfdGhpcyIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY2FsbCIsImFwcGx5IiwiY29uY2F0IiwiX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX2Rlc2NyaXB0b3IyIiwiX2luaGVyaXRzTG9vc2UiLCJfcHJvdG8iLCJwcm90b3R5cGUiLCJnZXRQaXBlbGluZVNldHRpbmdzIiwidGhpcyIsIl9zZXR0aW5ncyIsIm9uRW5hYmxlIiwiZmlsbFJlcXVpcmVkUGlwZWxpbmVTZXR0aW5ncyIsImdldENvbXBvbmVudCIsImNhbWVyYSIsInBpcGVsaW5lU2V0dGluZ3MiLCJvbkRpc2FibGUiLCJfdHJ5RW5hYmxlRWRpdG9yUHJldmlldyIsInVuZGVmaW5lZCIsInJlbmRlcmluZyIsIl9lZGl0b3JQcmV2aWV3Iiwic2V0RWRpdG9yUGlwZWxpbmVTZXR0aW5ncyIsIl9kaXNhYmxlRWRpdG9yUHJldmlldyIsImdldEVkaXRvclBpcGVsaW5lU2V0dGluZ3MiLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJnZXQiLCJzZXQiLCJ2IiwibXNhYSIsImVuYWJsZWQiLCJ2YWx1ZSIsInNhbXBsZUNvdW50IiwiTWF0aCIsInBvdyIsImNlaWwiLCJsb2cyIiwibWF4IiwiZW5hYmxlU2hhZGluZ1NjYWxlIiwic2hhZGluZ1NjYWxlIiwiYmxvb20iLCJtYXRlcmlhbCIsImVuYWJsZUFscGhhTWFzayIsIml0ZXJhdGlvbnMiLCJ0aHJlc2hvbGQiLCJpbnRlbnNpdHkiLCJjb2xvckdyYWRpbmciLCJjb250cmlidXRlIiwiY29sb3JHcmFkaW5nTWFwIiwidmFsIiwiZnhhYSIsImZzciIsInNoYXJwbmVzcyIsInRvbmVNYXBwaW5nIiwiQ29tcG9uZW50IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiaW5pdGlhbGl6ZXIiLCJtYWtlUGlwZWxpbmVTZXR0aW5ncyIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9SRiIsInBvcCIsInJhZGl1c1NjYWxlIiwiYW5nbGVCaWFzRGVncmVlIiwiYmx1clNoYXJwbmVzcyIsImFvU2F0dXJhdGlvbiIsIm5lZWRCbHVyIiwiZmlsbFJlcXVpcmVkTVNBQSIsIm1ha2VNU0FBIiwiZmlsbFJlcXVpcmVkQmxvb20iLCJmaWxsUmVxdWlyZWRUb25lTWFwcGluZyIsImZpbGxSZXF1aXJlZENvbG9yR3JhZGluZyIsImZpbGxSZXF1aXJlZEZTUiIsImZpbGxSZXF1aXJlZEZYQUEiLCJTYW1wbGVDb3VudCIsImdmeCIsIlg0IiwibWFrZUJsb29tIiwibWFrZUNvbG9yR3JhZGluZyIsIm1ha2VGU1IiLCJtYWtlRlhBQSIsIm1ha2VUb25lTWFwcGluZyIsIkFBQkIiLCJnZW9tZXRyeSIsIlNwaGVyZSIsImludGVyc2VjdCIsIkNsZWFyRmxhZ0JpdCIsIkNvbG9yIiwiRm9ybWF0IiwiRm9ybWF0RmVhdHVyZUJpdCIsIkxvYWRPcCIsIlN0b3JlT3AiLCJUZXh0dXJlVHlwZSIsIlZpZXdwb3J0Iiwic2NlbmUiLCJyZW5kZXJlciIsIkNhbWVyYVVzYWdlIiwiQ1NNTGV2ZWwiLCJMaWdodFR5cGUiLCJmb3J3YXJkTmVlZENsZWFyQ29sb3IiLCJjbGVhckZsYWciLCJDT0xPUiIsIlNURU5DSUwiLCJnZXRDc21NYWluTGlnaHRWaWV3cG9ydCIsImxpZ2h0IiwidyIsImgiLCJsZXZlbCIsInZwIiwic2NyZWVuU3BhY2VTaWduWSIsInNoYWRvd0ZpeGVkQXJlYSIsImNzbUxldmVsIiwiTEVWRUxfMSIsImxlZnQiLCJ0b3AiLCJ3aWR0aCIsInRydW5jIiwiaGVpZ2h0IiwiZmxvb3IiLCJQaXBlbGluZUNvbmZpZ3MiLCJpc1dlYiIsImlzV2ViR0wxIiwiaXNXZWJHUFUiLCJpc01vYmlsZSIsImlzSERSIiwidXNlRmxvYXRPdXRwdXQiLCJ0b25lTWFwcGluZ1R5cGUiLCJzaGFkb3dFbmFibGVkIiwic2hhZG93TWFwRm9ybWF0IiwiUjMyRiIsInNoYWRvd01hcFNpemUiLCJWZWMyIiwidXNlUGxhbmFyU2hhZG93Iiwic3VwcG9ydERlcHRoU2FtcGxlIiwibW9iaWxlTWF4U3BvdExpZ2h0U2hhZG93TWFwcyIsInBsYXRmb3JtIiwiVmVjNCIsInNldHVwUGlwZWxpbmVDb25maWdzIiwicHBsIiwiY29uZmlncyIsInNhbXBsZUZlYXR1cmUiLCJTQU1QTEVEX1RFWFRVUkUiLCJMSU5FQVJfRklMVEVSIiwiZGV2aWNlIiwic3lzIiwiaXNOYXRpdmUiLCJnZnhBUEkiLCJBUEkiLCJXRUJHTCIsIldFQkdQVSIsInBpcGVsaW5lU2NlbmVEYXRhIiwiZ2V0TWFjcm9Cb29sIiwicG9zdFNldHRpbmdzIiwic2hhZG93SW5mbyIsInNoYWRvd3MiLCJwaXBlbGluZSIsInN1cHBvcnRzUjMyRmxvYXRUZXh0dXJlIiwiUkdCQTgiLCJzaXplIiwiU2hhZG93VHlwZSIsIlBsYW5hciIsImNhcGFiaWxpdGllcyIsImdldEZvcm1hdEZlYXR1cmVzIiwiREVQVEhfU1RFTkNJTCIsIngiLCJjbGlwU3BhY2VTaWduWSIsImRlZmF1bHRTZXR0aW5ncyIsIkNhbWVyYUNvbmZpZ3MiLCJzZXR0aW5ncyIsImlzTWFpbkdhbWVXaW5kb3ciLCJyZW5kZXJXaW5kb3dJZCIsImNvbG9yTmFtZSIsImRlcHRoU3RlbmNpbE5hbWUiLCJlbmFibGVGdWxsUGlwZWxpbmUiLCJlbmFibGVQcm9maWxlciIsInJlbWFpbmluZ1Bhc3NlcyIsIm5hdGl2ZVdpZHRoIiwibmF0aXZlSGVpZ2h0IiwiZW5hYmxlSERSIiwicmFkaWFuY2VGb3JtYXQiLCJjb3B5QW5kVG9uZW1hcE1hdGVyaWFsIiwiZW5hYmxlU3RvcmVTY2VuZURlcHRoIiwic0NsZWFyQ29sb3JUcmFuc3BhcmVudEJsYWNrIiwiYWRkQ29weVRvU2NyZWVuUGFzcyIsInBwbENvbmZpZ3MiLCJjYW1lcmFDb25maWdzIiwiaW5wdXQiLCJhc3NlcnQiLCJwYXNzIiwiYWRkUmVuZGVyUGFzcyIsImFkZFJlbmRlclRhcmdldCIsIkNMRUFSIiwiU1RPUkUiLCJhZGRUZXh0dXJlIiwic2V0VmVjNCIsImFkZFF1ZXVlIiwiUXVldWVIaW50IiwiT1BBUVVFIiwiYWRkRnVsbHNjcmVlblF1YWQiLCJnZXRQaW5nUG9uZ1JlbmRlclRhcmdldCIsInByZXZOYW1lIiwicHJlZml4Iiwic3RhcnRzV2l0aCIsIk51bWJlciIsImNoYXJBdCIsIkZvcndhcmRMaWdodGluZyIsImxpZ2h0cyIsInNoYWRvd0VuYWJsZWRTcG90TGlnaHRzIiwiX3NwaGVyZSIsImNyZWF0ZSIsIl9ib3VuZGluZ0JveCIsIl9yYW5nZWREaXJMaWdodEJvdW5kaW5nQm94IiwiY3VsbExpZ2h0cyIsImZydXN0dW0iLCJjYW1lcmFQb3MiLCJfc3RlcCIsIl9pdGVyYXRvciIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UiLCJzcG90TGlnaHRzIiwiZG9uZSIsImJha2VkIiwicG9zaXRpb24iLCJ5IiwieiIsInNwaGVyZUZydXN0dW0iLCJwdXNoIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsInNwaGVyZUxpZ2h0cyIsIl9zdGVwMyIsIl9pdGVyYXRvcjMiLCJwb2ludExpZ2h0cyIsIl9zdGVwNCIsIl9pdGVyYXRvcjQiLCJyYW5nZWREaXJMaWdodHMiLCJ0cmFuc2Zvcm0iLCJub2RlIiwiZ2V0V29ybGRNYXRyaXgiLCJhYWJiRnJ1c3R1bSIsInNvcnQiLCJsaHMiLCJyaHMiLCJWZWMzIiwic3F1YXJlZERpc3RhbmNlIiwiX2FkZExpZ2h0UXVldWVzIiwiX3N0ZXA1IiwiX2l0ZXJhdG9yNSIsInF1ZXVlIiwiQkxFTkQiLCJTUEhFUkUiLCJTUE9UIiwiUE9JTlQiLCJSQU5HRURfRElSRUNUSU9OQUwiLCJhZGRTY2VuZSIsIlNjZW5lRmxhZ3MiLCJhZGRTcG90bGlnaHRTaGFkb3dQYXNzZXMiLCJtYXhOdW1TaGFkb3dNYXBzIiwiX3N0ZXA2IiwiaSIsIl9pdGVyYXRvcjYiLCJzaGFkb3dQYXNzIiwiYWRkRGVwdGhTdGVuY2lsIiwiRElTQ0FSRCIsIk5PTkUiLCJNQVNLIiwiU0hBRE9XX0NBU1RFUiIsInVzZUxpZ2h0RnJ1c3R1bSIsImFkZExpZ2h0UXVldWVzIiwiX3N0ZXA3IiwiX2l0ZXJhdG9yNyIsImFkZExpZ2h0UGFzc2VzIiwiZGVwdGhTdGVuY2lsU3RvcmVPcCIsInZpZXdwb3J0IiwiX3N0ZXA4IiwiY291bnQiLCJfaXRlcmF0b3I4Iiwic3RvcmVPcCIsInNldFZpZXdwb3J0IiwiTE9BRCIsImlzTXVsdGlwbGVMaWdodFBhc3Nlc05lZWRlZCIsIkJ1aWx0aW5Gb3J3YXJkUGFzc0J1aWxkZXIiLCJmb3J3YXJkTGlnaHRpbmciLCJfdmlld3BvcnQiLCJfY2xlYXJDb2xvciIsIl9yZWZsZWN0aW9uUHJvYmVDbGVhckNvbG9yIiwiX3Byb3RvMiIsImdldENvbmZpZ09yZGVyIiwiQ29uZmlnT3JkZXIiLCJnZXRSZW5kZXJPcmRlciIsIlJlbmRlck9yZGVyIiwiY29uZmlnQ2FtZXJhIiwicGlwZWxpbmVDb25maWdzIiwiZW5hYmxlTWFpbkxpZ2h0U2hhZG93TWFwIiwibWFpbkxpZ2h0IiwiZW5hYmxlTWFpbkxpZ2h0UGxhbmFyU2hhZG93TWFwIiwiZW5hYmxlUGxhbmFyUmVmbGVjdGlvblByb2JlIiwiY2FtZXJhVXNhZ2UiLCJTQ0VORV9WSUVXIiwiZW5hYmxlTVNBQSIsImVuYWJsZVNpbmdsZUZvcndhcmRQYXNzIiwid2luZG93UmVzaXplIiwid2luZG93IiwiUmVzb3VyY2VGbGFncyIsIlJlc291cmNlUmVzaWRlbmN5IiwiVEVYMkQiLCJDT0xPUl9BVFRBQ0hNRU5UIiwiTUVNT1JZTEVTUyIsIkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCIsInNldHVwIiwiY29udGV4dCIsIl9hZGRDYXNjYWRlZFNoYWRvd01hcFBhc3MiLCJfdHJ5QWRkUmVmbGVjdGlvblByb2JlUGFzc2VzIiwiX2FkZEZvcndhcmRSYWRpYW5jZVBhc3NlcyIsInNoYWRvd1NpemUiLCJjc21TdXBwb3J0ZWQiLCJyZWZsZWN0aW9uUHJvYmVNYW5hZ2VyIiwiY2NsZWdhY3kiLCJpbnRlcm5hbCIsIl9zdGVwOSIsInByb2JlcyIsImdldFByb2JlcyIsInByb2JlSUQiLCJfaXRlcmF0b3I5IiwicHJvYmUiLCJuZWVkUmVuZGVyIiwiYXJlYSIsInJlbmRlckFyZWEiLCJwcm9iZVR5cGUiLCJQcm9iZVR5cGUiLCJQTEFOQVIiLCJyZWFsdGltZVBsYW5hclRleHR1cmUiLCJhZGRSZW5kZXJXaW5kb3ciLCJwcm9iZVBhc3MiLCJfYnVpbGRSZWZsZWN0aW9uUHJvYmVQYXNzIiwiY29sb3JTdG9yZU9wIiwiY2xlYXJDb2xvciIsInBhY2tSR0JFIiwiY2xlYXJEZXB0aCIsImNsZWFyU3RlbmNpbCIsIlJFRkxFQ1RJT05fUFJPQkUiLCJkaXNhYmxlTVNBQSIsInJvdW5kIiwiX2FkZEZvcndhcmRTaW5nbGVSYWRpYW5jZVBhc3MiLCJfYWRkRm9yd2FyZE11bHRpcGxlUmFkaWFuY2VQYXNzZXMiLCJfYWRkUGxhbmFyU2hhZG93UXVldWUiLCJzY2VuZUZsYWdzIiwiZ2VvbWV0cnlSZW5kZXJlciIsIkdFT01FVFJZIiwibXNhYVJhZGlhbmNlTmFtZSIsIm1zYWFEZXB0aFN0ZW5jaWxOYW1lIiwibXNQYXNzIiwiYWRkTXVsdGlzYW1wbGVSZW5kZXJQYXNzIiwiX2J1aWxkRm9yd2FyZE1haW5MaWdodFBhc3MiLCJyZXNvbHZlUmVuZGVyVGFyZ2V0IiwiZmlyc3RTdG9yZU9wIiwiUExBTkFSX1NIQURPVyIsIkJ1aWx0aW5CbG9vbVBhc3NCdWlsZGVyIiwiX2NsZWFyQ29sb3JUcmFuc3BhcmVudEJsYWNrIiwiX2Jsb29tUGFyYW1zIiwiX2Jsb29tVGV4U2l6ZSIsIl9ibG9vbVdpZHRocyIsIl9ibG9vbUhlaWdodHMiLCJfYmxvb21UZXhOYW1lcyIsIl9wcm90bzMiLCJlbmFibGVCbG9vbSIsImJsb29tV2lkdGgiLCJibG9vbUhlaWdodCIsInByZXZSZW5kZXJQYXNzIiwiX2FkZEthd2FzZUR1YWxGaWx0ZXJCbG9vbVBhc3NlcyIsImJsb29tTWF0ZXJpYWwiLCJyYWRpYW5jZU5hbWUiLCJzaXplQ291bnQiLCJwcmVmaWx0ZXJQYXNzIiwiZG93blBhc3MiLCJ1cFBhc3MiLCJjb21iaW5lUGFzcyIsIkJ1aWx0aW5Ub25lTWFwcGluZ1Bhc3NCdWlsZGVyIiwiX2NvbG9yR3JhZGluZ1RleFNpemUiLCJfcHJvdG80IiwiZW5hYmxlQ29sb3JHcmFkaW5nIiwiZW5hYmxlVG9uZU1hcHBpbmciLCJzZXRQcm9wZXJ0eSIsIl9hZGRDb3B5QW5kVG9uZW1hcFBhc3MiLCJsZHJDb2xvclByZWZpeCIsImxkckNvbG9yTmFtZSIsImx1dFRleCIsImlzU3F1YXJlTWFwIiwic2V0VmVjMiIsInNldEZsb2F0IiwiQnVpbHRpbkZYQUFQYXNzQnVpbGRlciIsIl9meGFhUGFyYW1zIiwiX3Byb3RvNSIsImVuYWJsZUZYQUEiLCJfYWRkRnhhYVBhc3MiLCJpbnB1dENvbG9yTmFtZSIsImZ4YWFNYXRlcmlhbCIsIkJ1aWx0aW5Gc3JQYXNzQnVpbGRlciIsIl9mc3JQYXJhbXMiLCJfZnNyVGV4U2l6ZSIsIl9wcm90bzYiLCJlbmFibGVGU1IiLCJvdXRwdXRDb2xvck5hbWUiLCJfYWRkRnNyUGFzcyIsImZzck1hdGVyaWFsIiwiY2xhbXAiLCJmc3JDb2xvck5hbWUiLCJlYXN1UGFzcyIsInJjYXNQYXNzIiwiQnVpbHRpblVpUGFzc0J1aWxkZXIiLCJfcHJvdG83IiwiZmxhZ3MiLCJVSSIsIlBST0ZJTEVSIiwic2hvd1N0YXRpc3RpY3MiLCJCdWlsdGluUGlwZWxpbmVCdWlsZGVyIiwiX3BpcGVsaW5lRXZlbnQiLCJkaXJlY3RvciIsInJvb3QiLCJwaXBlbGluZUV2ZW50IiwiX2ZvcndhcmRQYXNzIiwiX2Jsb29tUGFzcyIsIl90b25lTWFwcGluZ1Bhc3MiLCJfZnhhYVBhc3MiLCJfZnNyUGFzcyIsIl91aVBhc3MiLCJfY29uZmlncyIsIl9jYW1lcmFDb25maWdzIiwiX2NvcHlBbmRUb25lbWFwTWF0ZXJpYWwiLCJfaW5pdGlhbGl6ZWQiLCJfcGFzc0J1aWxkZXJzIiwiX3Byb3RvOCIsIl9zZXR1cFBpcGVsaW5lUHJldmlldyIsIlBSRVZJRVciLCJlZGl0b3JTZXR0aW5ncyIsIl9wcmVwYXJlUGlwZWxpbmVQYXNzZXMiLCJwYXNzQnVpbGRlcnMiLCJfcGFzc2VzIiwiX3N0ZXAxMCIsIl9pdGVyYXRvcjEwIiwiX3NldHVwQnVpbHRpbkNhbWVyYUNvbmZpZ3MiLCJHQU1FIiwic3dhcGNoYWluIiwidmlzaWJpbGl0eSIsIkxheWVycyIsIkVudW0iLCJERUZBVUxUIiwiREVCVUciLCJSR0JBMTZGIiwiX3NldHVwQ2FtZXJhQ29uZmlncyIsImEiLCJiIiwiX3N0ZXAxMSIsIl9pdGVyYXRvcjExIiwiYnVpbGRlciIsIl9zdGVwMTIiLCJfaXRlcmF0b3IxMiIsImNhbWVyYXMiLCJfaW5pdE1hdGVyaWFscyIsIl9zdGVwMTMiLCJfaXRlcmF0b3IxMyIsImVtaXQiLCJQaXBlbGluZUV2ZW50VHlwZSIsIlJFTkRFUl9DQU1FUkFfQkVHSU4iLCJfYnVpbGRGb3J3YXJkUGlwZWxpbmUiLCJfYnVpbGRTaW1wbGVQaXBlbGluZSIsIlJFTkRFUl9DQU1FUkFfRU5EIiwic29ydFBpcGVsaW5lUGFzc0J1aWxkZXJzQnlSZW5kZXJPcmRlciIsIl9zdGVwMTQiLCJsYXN0UGFzcyIsIl9pdGVyYXRvcjE0IiwiX3V1aWQiLCJpbml0aWFsaXplIiwiZWZmZWN0TmFtZSIsImVmZmVjdEFzc2V0Iiwic2V0Q3VzdG9tUGlwZWxpbmUiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJfc2V0UHJvdG90eXBlT2YiLCJvIiwicCIsInNldFByb3RvdHlwZU9mIiwiYmluZCIsIl9fcHJvdG9fXyIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwibiIsInRvU3RyaW5nIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsImZyb20iLCJ0ZXN0IiwiYXJyIiwibGVuIiwiYXJyMiIsIl90b1ByaW1pdGl2ZSIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJyZXMiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJhcmciLCJkZWNvcmF0b3JzIiwiZGVzYyIsImtleXMiLCJmb3JFYWNoIiwicmV2ZXJzZSIsInJlZHVjZSIsImRlY29yYXRvciIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiYWxsb3dBcnJheUxpa2UiLCJpdCIsIml0ZXJhdG9yIiwibmV4dCIsImlzQXJyYXkiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiXSwibWFwcGluZ3MiOiJpdEJBbUNBLElBQVFBLEVBQXlGQyxFQUF6RkQsUUFBU0UsRUFBZ0ZELEVBQWhGQyxpQkFBa0JDLEVBQThERixFQUE5REUsa0JBQW1CQyxFQUEyQ0gsRUFBM0NHLEtBQU1D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Qyw4QkFrYTVCLFNBQW9DbEQsRUFBUXRoQixFQUFVd2hCLEVBQVl6SyxHQUNoRSxJQUFLeUssRUFBWSxPQUNqQnBhLE9BQU9xYSxlQUFlSCxFQUFRdGhCLEVBQVUsQ0FDdENnSCxXQUFZd2EsRUFBV3hhLFdBQ3ZCRCxhQUFjeWEsRUFBV3phLGFBQ3pCRSxTQUFVdWEsRUFBV3ZhLFNBQ3JCMUIsTUFBT2ljLEVBQVd0YSxZQUFjc2EsRUFBV3RhLFlBQVkzRCxLQUFLd1QsUUFBVyIsImZpbGUiOiJhbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gQ29weXJpZ2h0IChjKSAyMDIxLTIwMjQgWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcclxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG9cclxuIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzXHJcbiBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuXHJcbiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxyXG4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiovXHJcblxyXG5pbXBvcnQge1xyXG4gICAgX2RlY29yYXRvciwgQ2FtZXJhLCBDQ0Jvb2xlYW4sIENDRmxvYXQsIENDSW50ZWdlciwgQ29tcG9uZW50LFxyXG4gICAgTWF0ZXJpYWwsIHJlbmRlcmluZywgVGV4dHVyZTJELFxyXG59IGZyb20gJ2NjJztcclxuXHJcbmltcG9ydCB7IEVESVRPUiB9IGZyb20gJ2NjL2Vudic7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgZmlsbFJlcXVpcmVkUGlwZWxpbmVTZXR0aW5ncywgbWFrZVBpcGVsaW5lU2V0dGluZ3MsIFBpcGVsaW5lU2V0dGluZ3MsXHJcbn0gZnJvbSAnLi9idWlsdGluLXBpcGVsaW5lLXR5cGVzJztcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgZGlzYWxsb3dNdWx0aXBsZSwgZXhlY3V0ZUluRWRpdE1vZGUsIG1lbnUsIHByb3BlcnR5LCByZXF1aXJlQ29tcG9uZW50LCB0eXBlIH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ0J1aWx0aW5QaXBlbGluZVNldHRpbmdzJylcclxuQG1lbnUoJ1JlbmRlcmluZy9CdWlsdGluUGlwZWxpbmVTZXR0aW5ncycpXHJcbkByZXF1aXJlQ29tcG9uZW50KENhbWVyYSlcclxuQGRpc2FsbG93TXVsdGlwbGVcclxuQGV4ZWN1dGVJbkVkaXRNb2RlXHJcbmV4cG9ydCBjbGFzcyBCdWlsdGluUGlwZWxpbmVTZXR0aW5ncyBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBAcHJvcGVydHlcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3NldHRpbmdzOiBQaXBlbGluZVNldHRpbmdzID0gbWFrZVBpcGVsaW5lU2V0dGluZ3MoKTtcclxuXHJcbiAgICBnZXRQaXBlbGluZVNldHRpbmdzKCk6IFBpcGVsaW5lU2V0dGluZ3Mge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncztcclxuICAgIH1cclxuXHJcbiAgICAvLyBFbmFibGUvRGlzYWJsZVxyXG4gICAgb25FbmFibGUoKTogdm9pZCB7XHJcbiAgICAgICAgZmlsbFJlcXVpcmVkUGlwZWxpbmVTZXR0aW5ncyh0aGlzLl9zZXR0aW5ncyk7XHJcbiAgICAgICAgY29uc3QgY2FtZXJhQ29tcG9uZW50ID0gdGhpcy5nZXRDb21wb25lbnQoQ2FtZXJhKSE7XHJcbiAgICAgICAgY29uc3QgY2FtZXJhID0gY2FtZXJhQ29tcG9uZW50LmNhbWVyYTtcclxuICAgICAgICBjYW1lcmEucGlwZWxpbmVTZXR0aW5ncyA9IHRoaXMuX3NldHRpbmdzO1xyXG5cclxuICAgICAgICBpZiAoRURJVE9SKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyeUVuYWJsZUVkaXRvclByZXZpZXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbkRpc2FibGUoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgY2FtZXJhQ29tcG9uZW50ID0gdGhpcy5nZXRDb21wb25lbnQoQ2FtZXJhKSE7XHJcbiAgICAgICAgY29uc3QgY2FtZXJhID0gY2FtZXJhQ29tcG9uZW50LmNhbWVyYTtcclxuICAgICAgICBjYW1lcmEucGlwZWxpbmVTZXR0aW5ncyA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmIChFRElUT1IpIHtcclxuICAgICAgICAgICAgdGhpcy5fZGlzYWJsZUVkaXRvclByZXZpZXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRWRpdG9yIFByZXZpZXdcclxuICAgIEBwcm9wZXJ0eShDQ0Jvb2xlYW4pXHJcbiAgICBwcm90ZWN0ZWQgX2VkaXRvclByZXZpZXcgPSBmYWxzZTtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIGRpc3BsYXlOYW1lOiAnRWRpdG9yIFByZXZpZXcgKEV4cGVyaW1lbnRhbCknLFxyXG4gICAgICAgIHR5cGU6IENDQm9vbGVhbixcclxuICAgIH0pXHJcbiAgICBnZXQgZWRpdG9yUHJldmlldygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZWRpdG9yUHJldmlldztcclxuICAgIH1cclxuICAgIHNldCBlZGl0b3JQcmV2aWV3KHY6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9lZGl0b3JQcmV2aWV3ID0gdjtcclxuICAgICAgICBpZiAoRURJVE9SKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyeUVuYWJsZUVkaXRvclByZXZpZXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgX3RyeUVuYWJsZUVkaXRvclByZXZpZXcoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHJlbmRlcmluZyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2VkaXRvclByZXZpZXcpIHtcclxuICAgICAgICAgICAgcmVuZGVyaW5nLnNldEVkaXRvclBpcGVsaW5lU2V0dGluZ3ModGhpcy5fc2V0dGluZ3MpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc2FibGVFZGl0b3JQcmV2aWV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIF9kaXNhYmxlRWRpdG9yUHJldmlldygpOiB2b2lkIHtcclxuICAgICAgICBpZiAocmVuZGVyaW5nID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjdXJyZW50ID0gcmVuZGVyaW5nLmdldEVkaXRvclBpcGVsaW5lU2V0dGluZ3MoKSBhcyBQaXBlbGluZVNldHRpbmdzIHwgbnVsbDtcclxuICAgICAgICBpZiAoY3VycmVudCA9PT0gdGhpcy5fc2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgcmVuZGVyaW5nLnNldEVkaXRvclBpcGVsaW5lU2V0dGluZ3MobnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIE1TQUFcclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgZ3JvdXA6IHsgaWQ6ICdNU0FBJywgbmFtZTogJ011bHRpc2FtcGxlIEFudGktQWxpYXNpbmcnIH0sXHJcbiAgICAgICAgdHlwZTogQ0NCb29sZWFuLFxyXG4gICAgfSlcclxuICAgIGdldCBNc2FhRW5hYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5tc2FhLmVuYWJsZWQ7XHJcbiAgICB9XHJcbiAgICBzZXQgTXNhYUVuYWJsZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzLm1zYWEuZW5hYmxlZCA9IHZhbHVlO1xyXG4gICAgICAgIGlmIChFRElUT1IpIHtcclxuICAgICAgICAgICAgdGhpcy5fdHJ5RW5hYmxlRWRpdG9yUHJldmlldygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIGdyb3VwOiB7IGlkOiAnTVNBQScsIG5hbWU6ICdNdWx0aXNhbXBsZSBBbnRpLUFsaWFzaW5nJywgc3R5bGU6ICdzZWN0aW9uJyB9LFxyXG4gICAgICAgIHR5cGU6IENDSW50ZWdlcixcclxuICAgICAgICByYW5nZTogWzIsIDQsIDJdLFxyXG4gICAgfSlcclxuICAgIHNldCBtc2FhU2FtcGxlQ291bnQodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHZhbHVlID0gMiAqKiBNYXRoLmNlaWwoTWF0aC5sb2cyKE1hdGgubWF4KHZhbHVlLCAyKSkpO1xyXG4gICAgICAgIHZhbHVlID0gTWF0aC5taW4odmFsdWUsIDQpO1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzLm1zYWEuc2FtcGxlQ291bnQgPSB2YWx1ZTtcclxuICAgICAgICBpZiAoRURJVE9SKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyeUVuYWJsZUVkaXRvclByZXZpZXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgbXNhYVNhbXBsZUNvdW50KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLm1zYWEuc2FtcGxlQ291bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2hhZGluZyBTY2FsZVxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICBncm91cDogeyBpZDogJ1NoYWRpbmdTY2FsZScsIG5hbWU6ICdTaGFkaW5nU2NhbGUnLCBzdHlsZTogJ3NlY3Rpb24nIH0sXHJcbiAgICAgICAgdHlwZTogQ0NCb29sZWFuLFxyXG4gICAgfSlcclxuICAgIHNldCBzaGFkaW5nU2NhbGVFbmFibGUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9zZXR0aW5ncy5lbmFibGVTaGFkaW5nU2NhbGUgPSB2YWx1ZTtcclxuICAgICAgICBpZiAoRURJVE9SKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyeUVuYWJsZUVkaXRvclByZXZpZXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgc2hhZGluZ1NjYWxlRW5hYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5lbmFibGVTaGFkaW5nU2NhbGU7XHJcbiAgICB9XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiAnaTE4bjpwb3N0cHJvY2Vzcy5zaGFkaW5nU2NhbGUnLFxyXG4gICAgICAgIGdyb3VwOiB7IGlkOiAnU2hhZGluZ1NjYWxlJywgbmFtZTogJ1NoYWRpbmdTY2FsZScgfSxcclxuICAgICAgICB0eXBlOiBDQ0Zsb2F0LFxyXG4gICAgICAgIHJhbmdlOiBbMC4wMSwgNCwgMC4wMV0sXHJcbiAgICAgICAgc2xpZGU6IHRydWUsXHJcbiAgICB9KVxyXG4gICAgc2V0IHNoYWRpbmdTY2FsZSh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3Muc2hhZGluZ1NjYWxlID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKEVESVRPUikge1xyXG4gICAgICAgICAgICB0aGlzLl90cnlFbmFibGVFZGl0b3JQcmV2aWV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IHNoYWRpbmdTY2FsZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5zaGFkaW5nU2NhbGU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQmxvb21cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgZ3JvdXA6IHsgaWQ6ICdCbG9vbScsIG5hbWU6ICdCbG9vbSAoUG9zdFByb2Nlc3NpbmcpJywgc3R5bGU6ICdzZWN0aW9uJyB9LFxyXG4gICAgICAgIHR5cGU6IENDQm9vbGVhbixcclxuICAgIH0pXHJcbiAgICBzZXQgYmxvb21FbmFibGUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9zZXR0aW5ncy5ibG9vbS5lbmFibGVkID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKEVESVRPUikge1xyXG4gICAgICAgICAgICB0aGlzLl90cnlFbmFibGVFZGl0b3JQcmV2aWV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGJsb29tRW5hYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5ibG9vbS5lbmFibGVkO1xyXG4gICAgfVxyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgZ3JvdXA6IHsgaWQ6ICdCbG9vbScsIG5hbWU6ICdCbG9vbSAoUG9zdFByb2Nlc3NpbmcpJywgc3R5bGU6ICdzZWN0aW9uJyB9LFxyXG4gICAgICAgIHR5cGU6IE1hdGVyaWFsLFxyXG4gICAgfSlcclxuICAgIHNldCBibG9vbU1hdGVyaWFsKHZhbHVlOiBNYXRlcmlhbCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5ibG9vbS5tYXRlcmlhbCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9zZXR0aW5ncy5ibG9vbS5tYXRlcmlhbCA9IHZhbHVlO1xyXG4gICAgICAgIGlmIChFRElUT1IpIHtcclxuICAgICAgICAgICAgdGhpcy5fdHJ5RW5hYmxlRWRpdG9yUHJldmlldygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBibG9vbU1hdGVyaWFsKCk6IE1hdGVyaWFsIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3MuYmxvb20ubWF0ZXJpYWwhO1xyXG4gICAgfVxyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogJ2kxOG46Ymxvb20uZW5hYmxlQWxwaGFNYXNrJyxcclxuICAgICAgICBncm91cDogeyBpZDogJ0Jsb29tJywgbmFtZTogJ0Jsb29tIChQb3N0UHJvY2Vzc2luZyknLCBzdHlsZTogJ3NlY3Rpb24nIH0sXHJcbiAgICAgICAgdHlwZTogQ0NCb29sZWFuLFxyXG4gICAgfSlcclxuICAgIHNldCBibG9vbUVuYWJsZUFscGhhTWFzayh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzLmJsb29tLmVuYWJsZUFscGhhTWFzayA9IHZhbHVlO1xyXG4gICAgICAgIGlmIChFRElUT1IpIHtcclxuICAgICAgICAgICAgdGhpcy5fdHJ5RW5hYmxlRWRpdG9yUHJldmlldygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBibG9vbUVuYWJsZUFscGhhTWFzaygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3MuYmxvb20uZW5hYmxlQWxwaGFNYXNrO1xyXG4gICAgfVxyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogJ2kxOG46Ymxvb20uaXRlcmF0aW9ucycsXHJcbiAgICAgICAgZ3JvdXA6IHsgaWQ6ICdCbG9vbScsIG5hbWU6ICdCbG9vbSAoUG9zdFByb2Nlc3NpbmcpJywgc3R5bGU6ICdzZWN0aW9uJyB9LFxyXG4gICAgICAgIHR5cGU6IENDSW50ZWdlcixcclxuICAgICAgICByYW5nZTogWzEsIDYsIDFdLFxyXG4gICAgICAgIHNsaWRlOiB0cnVlLFxyXG4gICAgfSlcclxuICAgIHNldCBibG9vbUl0ZXJhdGlvbnModmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzLmJsb29tLml0ZXJhdGlvbnMgPSB2YWx1ZTtcclxuICAgICAgICBpZiAoRURJVE9SKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyeUVuYWJsZUVkaXRvclByZXZpZXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgYmxvb21JdGVyYXRpb25zKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLmJsb29tLml0ZXJhdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiAnaTE4bjpibG9vbS50aHJlc2hvbGQnLFxyXG4gICAgICAgIGdyb3VwOiB7IGlkOiAnQmxvb20nLCBuYW1lOiAnQmxvb20gKFBvc3RQcm9jZXNzaW5nKScsIHN0eWxlOiAnc2VjdGlvbicgfSxcclxuICAgICAgICB0eXBlOiBDQ0Zsb2F0LFxyXG4gICAgICAgIG1pbjogMCxcclxuICAgIH0pXHJcbiAgICBzZXQgYmxvb21UaHJlc2hvbGQodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzLmJsb29tLnRocmVzaG9sZCA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGJsb29tVGhyZXNob2xkKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLmJsb29tLnRocmVzaG9sZDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgYmxvb21JbnRlbnNpdHkodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzLmJsb29tLmludGVuc2l0eSA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGJsb29tSW50ZW5zaXR5KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLmJsb29tLmludGVuc2l0eTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb2xvciBHcmFkaW5nIChMRFIpXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIGdyb3VwOiB7IGlkOiAnQ29sb3IgR3JhZGluZycsIG5hbWU6ICdDb2xvckdyYWRpbmcgKExEUikgKFBvc3RQcm9jZXNzaW5nKScsIHN0eWxlOiAnc2VjdGlvbicgfSxcclxuICAgICAgICB0eXBlOiBDQ0Jvb2xlYW4sXHJcbiAgICB9KVxyXG4gICAgc2V0IGNvbG9yR3JhZGluZ0VuYWJsZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzLmNvbG9yR3JhZGluZy5lbmFibGVkID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKEVESVRPUikge1xyXG4gICAgICAgICAgICB0aGlzLl90cnlFbmFibGVFZGl0b3JQcmV2aWV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGNvbG9yR3JhZGluZ0VuYWJsZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3MuY29sb3JHcmFkaW5nLmVuYWJsZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICBncm91cDogeyBpZDogJ0NvbG9yIEdyYWRpbmcnLCBuYW1lOiAnQ29sb3JHcmFkaW5nIChMRFIpIChQb3N0UHJvY2Vzc2luZyknLCBzdHlsZTogJ3NlY3Rpb24nIH0sXHJcbiAgICAgICAgdHlwZTogTWF0ZXJpYWwsXHJcbiAgICB9KVxyXG4gICAgc2V0IGNvbG9yR3JhZGluZ01hdGVyaWFsKHZhbHVlOiBNYXRlcmlhbCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5jb2xvckdyYWRpbmcubWF0ZXJpYWwgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MuY29sb3JHcmFkaW5nLm1hdGVyaWFsID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKEVESVRPUikge1xyXG4gICAgICAgICAgICB0aGlzLl90cnlFbmFibGVFZGl0b3JQcmV2aWV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGNvbG9yR3JhZGluZ01hdGVyaWFsKCk6IE1hdGVyaWFsIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3MuY29sb3JHcmFkaW5nLm1hdGVyaWFsITtcclxuICAgIH1cclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6ICdpMThuOmNvbG9yX2dyYWRpbmcuY29udHJpYnV0ZScsXHJcbiAgICAgICAgZ3JvdXA6IHsgaWQ6ICdDb2xvciBHcmFkaW5nJywgbmFtZTogJ0NvbG9yR3JhZGluZyAoTERSKSAoUG9zdFByb2Nlc3NpbmcpJywgc3R5bGU6ICdzZWN0aW9uJyB9LFxyXG4gICAgICAgIHR5cGU6IENDRmxvYXQsXHJcbiAgICAgICAgcmFuZ2U6IFswLCAxLCAwLjAxXSxcclxuICAgICAgICBzbGlkZTogdHJ1ZSxcclxuICAgIH0pXHJcbiAgICBzZXQgY29sb3JHcmFkaW5nQ29udHJpYnV0ZSh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MuY29sb3JHcmFkaW5nLmNvbnRyaWJ1dGUgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGdldCBjb2xvckdyYWRpbmdDb250cmlidXRlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLmNvbG9yR3JhZGluZy5jb250cmlidXRlO1xyXG4gICAgfVxyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogJ2kxOG46Y29sb3JfZ3JhZGluZy5vcmlnaW5hbE1hcCcsXHJcbiAgICAgICAgZ3JvdXA6IHsgaWQ6ICdDb2xvciBHcmFkaW5nJywgbmFtZTogJ0NvbG9yR3JhZGluZyAoTERSKSAoUG9zdFByb2Nlc3NpbmcpJywgc3R5bGU6ICdzZWN0aW9uJyB9LFxyXG4gICAgICAgIHR5cGU6IFRleHR1cmUyRCxcclxuICAgIH0pXHJcbiAgICBzZXQgY29sb3JHcmFkaW5nTWFwKHZhbDogVGV4dHVyZTJEKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MuY29sb3JHcmFkaW5nLmNvbG9yR3JhZGluZ01hcCA9IHZhbDtcclxuICAgICAgICBpZiAoRURJVE9SKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyeUVuYWJsZUVkaXRvclByZXZpZXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgY29sb3JHcmFkaW5nTWFwKCk6IFRleHR1cmUyRCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLmNvbG9yR3JhZGluZy5jb2xvckdyYWRpbmdNYXAhO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZYQUFcclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgZ3JvdXA6IHsgaWQ6ICdGWEFBJywgbmFtZTogJ0Zhc3QgQXBwcm94aW1hdGUgQW50aS1BbGlhc2luZyAoUG9zdFByb2Nlc3NpbmcpJywgc3R5bGU6ICdzZWN0aW9uJyB9LFxyXG4gICAgICAgIHR5cGU6IENDQm9vbGVhbixcclxuICAgIH0pXHJcbiAgICBzZXQgZnhhYUVuYWJsZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzLmZ4YWEuZW5hYmxlZCA9IHZhbHVlO1xyXG4gICAgICAgIGlmIChFRElUT1IpIHtcclxuICAgICAgICAgICAgdGhpcy5fdHJ5RW5hYmxlRWRpdG9yUHJldmlldygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBmeGFhRW5hYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5meGFhLmVuYWJsZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICBncm91cDogeyBpZDogJ0ZYQUEnLCBuYW1lOiAnRmFzdCBBcHByb3hpbWF0ZSBBbnRpLUFsaWFzaW5nIChQb3N0UHJvY2Vzc2luZyknLCBzdHlsZTogJ3NlY3Rpb24nIH0sXHJcbiAgICAgICAgdHlwZTogTWF0ZXJpYWwsXHJcbiAgICB9KVxyXG4gICAgc2V0IGZ4YWFNYXRlcmlhbCh2YWx1ZTogTWF0ZXJpYWwpIHtcclxuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MuZnhhYS5tYXRlcmlhbCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9zZXR0aW5ncy5meGFhLm1hdGVyaWFsID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKEVESVRPUikge1xyXG4gICAgICAgICAgICB0aGlzLl90cnlFbmFibGVFZGl0b3JQcmV2aWV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGZ4YWFNYXRlcmlhbCgpOiBNYXRlcmlhbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLmZ4YWEubWF0ZXJpYWwhO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZTUlxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICBncm91cDogeyBpZDogJ0ZTUicsIG5hbWU6ICdGaWRlbGl0eUZYIFN1cGVyIFJlc29sdXRpb24nLCBzdHlsZTogJ3NlY3Rpb24nIH0sXHJcbiAgICAgICAgdHlwZTogQ0NCb29sZWFuLFxyXG4gICAgfSlcclxuICAgIHNldCBmc3JFbmFibGUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9zZXR0aW5ncy5mc3IuZW5hYmxlZCA9IHZhbHVlO1xyXG4gICAgICAgIGlmIChFRElUT1IpIHtcclxuICAgICAgICAgICAgdGhpcy5fdHJ5RW5hYmxlRWRpdG9yUHJldmlldygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBmc3JFbmFibGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLmZzci5lbmFibGVkO1xyXG4gICAgfVxyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgZ3JvdXA6IHsgaWQ6ICdGU1InLCBuYW1lOiAnRmlkZWxpdHlGWCBTdXBlciBSZXNvbHV0aW9uJywgc3R5bGU6ICdzZWN0aW9uJyB9LFxyXG4gICAgICAgIHR5cGU6IE1hdGVyaWFsLFxyXG4gICAgfSlcclxuICAgIHNldCBmc3JNYXRlcmlhbCh2YWx1ZTogTWF0ZXJpYWwpIHtcclxuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MuZnNyLm1hdGVyaWFsID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzLmZzci5tYXRlcmlhbCA9IHZhbHVlO1xyXG4gICAgICAgIGlmIChFRElUT1IpIHtcclxuICAgICAgICAgICAgdGhpcy5fdHJ5RW5hYmxlRWRpdG9yUHJldmlldygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBmc3JNYXRlcmlhbCgpOiBNYXRlcmlhbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLmZzci5tYXRlcmlhbCE7XHJcbiAgICB9XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICBncm91cDogeyBpZDogJ0ZTUicsIG5hbWU6ICdGaWRlbGl0eUZYIFN1cGVyIFJlc29sdXRpb24nLCBzdHlsZTogJ3NlY3Rpb24nIH0sXHJcbiAgICAgICAgdHlwZTogQ0NGbG9hdCxcclxuICAgICAgICByYW5nZTogWzAsIDEsIDAuMDFdLFxyXG4gICAgICAgIHNsaWRlOiB0cnVlLFxyXG4gICAgfSlcclxuICAgIHNldCBmc3JTaGFycG5lc3ModmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzLmZzci5zaGFycG5lc3MgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGdldCBmc3JTaGFycG5lc3MoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3MuZnNyLnNoYXJwbmVzcztcclxuICAgIH1cclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIGdyb3VwOiB7IGlkOiAnVG9uZU1hcHBpbmcnLCBuYW1lOiAnVG9uZU1hcHBpbmcnLCBzdHlsZTogJ3NlY3Rpb24nIH0sXHJcbiAgICAgICAgdHlwZTogTWF0ZXJpYWwsXHJcbiAgICB9KVxyXG4gICAgc2V0IHRvbmVNYXBwaW5nTWF0ZXJpYWwodmFsdWU6IE1hdGVyaWFsKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLnRvbmVNYXBwaW5nLm1hdGVyaWFsID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzLnRvbmVNYXBwaW5nLm1hdGVyaWFsID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKEVESVRPUikge1xyXG4gICAgICAgICAgICB0aGlzLl90cnlFbmFibGVFZGl0b3JQcmV2aWV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IHRvbmVNYXBwaW5nTWF0ZXJpYWwoKTogTWF0ZXJpYWwge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy50b25lTWFwcGluZy5tYXRlcmlhbCE7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuIENvcHlyaWdodCAoYykgMjAyMS0yMDI0IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbVxyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcclxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG9cclxuIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzXHJcbiBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuXHJcbiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxyXG4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiovXHJcblxyXG4vKipcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PSAhRE8gTk9UIENIQU5HRSBUSEUgRk9MTE9XSU5HIFNFQ1RJT04gTUFOVUFMTFkhID09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogVGhlIGZvbGxvd2luZyBzZWN0aW9uIGlzIGF1dG8tZ2VuZXJhdGVkLlxyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09ICFETyBOT1QgQ0hBTkdFIFRIRSBGT0xMT1dJTkcgU0VDVElPTiBNQU5VQUxMWSEgPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKi9cclxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xyXG5pbXBvcnQgeyBNYXRlcmlhbCwgVGV4dHVyZTJELCBnZnggfSBmcm9tICdjYyc7XHJcblxyXG5jb25zdCB7IFNhbXBsZUNvdW50IH0gPSBnZng7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE1TQUEge1xyXG4gICAgZW5hYmxlZDogYm9vbGVhbjsgLyogZmFsc2UgKi9cclxuICAgIHNhbXBsZUNvdW50OiBnZnguU2FtcGxlQ291bnQ7IC8qIFNhbXBsZUNvdW50Llg0ICovXHJcbiAgICBbbmFtZTogc3RyaW5nXTogdW5rbm93bjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VNU0FBKCk6IE1TQUEge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZSxcclxuICAgICAgICBzYW1wbGVDb3VudDogU2FtcGxlQ291bnQuWDQsXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmlsbFJlcXVpcmVkTVNBQSh2YWx1ZTogTVNBQSk6IHZvaWQge1xyXG4gICAgaWYgKHZhbHVlLmVuYWJsZWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHZhbHVlLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICh2YWx1ZS5zYW1wbGVDb3VudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsdWUuc2FtcGxlQ291bnQgPSBTYW1wbGVDb3VudC5YNDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIQkFPIHtcclxuICAgIGVuYWJsZWQ6IGJvb2xlYW47IC8qIGZhbHNlICovXHJcbiAgICByYWRpdXNTY2FsZTogbnVtYmVyOyAvKiAxICovXHJcbiAgICBhbmdsZUJpYXNEZWdyZWU6IG51bWJlcjsgLyogMTAgKi9cclxuICAgIGJsdXJTaGFycG5lc3M6IG51bWJlcjsgLyogMyAqL1xyXG4gICAgYW9TYXR1cmF0aW9uOiBudW1iZXI7IC8qIDEgKi9cclxuICAgIG5lZWRCbHVyOiBib29sZWFuOyAvKiBmYWxzZSAqL1xyXG4gICAgW25hbWU6IHN0cmluZ106IHVua25vd247XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlSEJBTygpOiBIQkFPIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgcmFkaXVzU2NhbGU6IDEsXHJcbiAgICAgICAgYW5nbGVCaWFzRGVncmVlOiAxMCxcclxuICAgICAgICBibHVyU2hhcnBuZXNzOiAzLFxyXG4gICAgICAgIGFvU2F0dXJhdGlvbjogMSxcclxuICAgICAgICBuZWVkQmx1cjogZmFsc2UsXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmlsbFJlcXVpcmVkSEJBTyh2YWx1ZTogSEJBTyk6IHZvaWQge1xyXG4gICAgaWYgKHZhbHVlLmVuYWJsZWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHZhbHVlLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICh2YWx1ZS5yYWRpdXNTY2FsZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsdWUucmFkaXVzU2NhbGUgPSAxO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlLmFuZ2xlQmlhc0RlZ3JlZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsdWUuYW5nbGVCaWFzRGVncmVlID0gMTA7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUuYmx1clNoYXJwbmVzcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsdWUuYmx1clNoYXJwbmVzcyA9IDM7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUuYW9TYXR1cmF0aW9uID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2YWx1ZS5hb1NhdHVyYXRpb24gPSAxO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlLm5lZWRCbHVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2YWx1ZS5uZWVkQmx1ciA9IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJsb29tIHtcclxuICAgIGVuYWJsZWQ6IGJvb2xlYW47IC8qIGZhbHNlICovXHJcbiAgICAvKiByZWZjb3VudCAqLyBtYXRlcmlhbDogTWF0ZXJpYWwgfCBudWxsO1xyXG4gICAgZW5hYmxlQWxwaGFNYXNrOiBib29sZWFuOyAvKiBmYWxzZSAqL1xyXG4gICAgaXRlcmF0aW9uczogbnVtYmVyOyAvKiAzICovXHJcbiAgICB0aHJlc2hvbGQ6IG51bWJlcjsgLyogMC44ICovXHJcbiAgICBpbnRlbnNpdHk6IG51bWJlcjsgLyogMi4zICovXHJcbiAgICBbbmFtZTogc3RyaW5nXTogdW5rbm93bjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VCbG9vbSgpOiBCbG9vbSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgIG1hdGVyaWFsOiBudWxsLFxyXG4gICAgICAgIGVuYWJsZUFscGhhTWFzazogZmFsc2UsXHJcbiAgICAgICAgaXRlcmF0aW9uczogMyxcclxuICAgICAgICB0aHJlc2hvbGQ6IDAuOCxcclxuICAgICAgICBpbnRlbnNpdHk6IDIuMyxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaWxsUmVxdWlyZWRCbG9vbSh2YWx1ZTogQmxvb20pOiB2b2lkIHtcclxuICAgIGlmICh2YWx1ZS5lbmFibGVkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2YWx1ZS5lbmFibGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUubWF0ZXJpYWwgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHZhbHVlLm1hdGVyaWFsID0gbnVsbDtcclxuICAgIH1cclxuICAgIGlmICh2YWx1ZS5lbmFibGVBbHBoYU1hc2sgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHZhbHVlLmVuYWJsZUFscGhhTWFzayA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlLml0ZXJhdGlvbnMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHZhbHVlLml0ZXJhdGlvbnMgPSAzO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlLnRocmVzaG9sZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsdWUudGhyZXNob2xkID0gMC44O1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlLmludGVuc2l0eSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsdWUuaW50ZW5zaXR5ID0gMi4zO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbG9yR3JhZGluZyB7XHJcbiAgICBlbmFibGVkOiBib29sZWFuOyAvKiBmYWxzZSAqL1xyXG4gICAgLyogcmVmY291bnQgKi8gbWF0ZXJpYWw6IE1hdGVyaWFsIHwgbnVsbDtcclxuICAgIGNvbnRyaWJ1dGU6IG51bWJlcjsgLyogMSAqL1xyXG4gICAgLyogcmVmY291bnQgKi8gY29sb3JHcmFkaW5nTWFwOiBUZXh0dXJlMkQgfCBudWxsO1xyXG4gICAgW25hbWU6IHN0cmluZ106IHVua25vd247XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlQ29sb3JHcmFkaW5nKCk6IENvbG9yR3JhZGluZyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgIG1hdGVyaWFsOiBudWxsLFxyXG4gICAgICAgIGNvbnRyaWJ1dGU6IDEsXHJcbiAgICAgICAgY29sb3JHcmFkaW5nTWFwOiBudWxsLFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbGxSZXF1aXJlZENvbG9yR3JhZGluZyh2YWx1ZTogQ29sb3JHcmFkaW5nKTogdm9pZCB7XHJcbiAgICBpZiAodmFsdWUuZW5hYmxlZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsdWUuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlLm1hdGVyaWFsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2YWx1ZS5tYXRlcmlhbCA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUuY29udHJpYnV0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsdWUuY29udHJpYnV0ZSA9IDE7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUuY29sb3JHcmFkaW5nTWFwID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2YWx1ZS5jb2xvckdyYWRpbmdNYXAgPSBudWxsO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZTUiB7XHJcbiAgICBlbmFibGVkOiBib29sZWFuOyAvKiBmYWxzZSAqL1xyXG4gICAgLyogcmVmY291bnQgKi8gbWF0ZXJpYWw6IE1hdGVyaWFsIHwgbnVsbDtcclxuICAgIHNoYXJwbmVzczogbnVtYmVyOyAvKiAwLjggKi9cclxuICAgIFtuYW1lOiBzdHJpbmddOiB1bmtub3duO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWFrZUZTUigpOiBGU1Ige1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZSxcclxuICAgICAgICBtYXRlcmlhbDogbnVsbCxcclxuICAgICAgICBzaGFycG5lc3M6IDAuOCxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaWxsUmVxdWlyZWRGU1IodmFsdWU6IEZTUik6IHZvaWQge1xyXG4gICAgaWYgKHZhbHVlLmVuYWJsZWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHZhbHVlLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICh2YWx1ZS5tYXRlcmlhbCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsdWUubWF0ZXJpYWwgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlLnNoYXJwbmVzcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsdWUuc2hhcnBuZXNzID0gMC44O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZYQUEge1xyXG4gICAgZW5hYmxlZDogYm9vbGVhbjsgLyogZmFsc2UgKi9cclxuICAgIC8qIHJlZmNvdW50ICovIG1hdGVyaWFsOiBNYXRlcmlhbCB8IG51bGw7XHJcbiAgICBbbmFtZTogc3RyaW5nXTogdW5rbm93bjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VGWEFBKCk6IEZYQUEge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZSxcclxuICAgICAgICBtYXRlcmlhbDogbnVsbCxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaWxsUmVxdWlyZWRGWEFBKHZhbHVlOiBGWEFBKTogdm9pZCB7XHJcbiAgICBpZiAodmFsdWUuZW5hYmxlZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsdWUuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlLm1hdGVyaWFsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2YWx1ZS5tYXRlcmlhbCA9IG51bGw7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVG9uZU1hcHBpbmcge1xyXG4gICAgLyogcmVmY291bnQgKi8gbWF0ZXJpYWw6IE1hdGVyaWFsIHwgbnVsbDtcclxuICAgIFtuYW1lOiBzdHJpbmddOiB1bmtub3duO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWFrZVRvbmVNYXBwaW5nKCk6IFRvbmVNYXBwaW5nIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWF0ZXJpYWw6IG51bGwsXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmlsbFJlcXVpcmVkVG9uZU1hcHBpbmcodmFsdWU6IFRvbmVNYXBwaW5nKTogdm9pZCB7XHJcbiAgICBpZiAodmFsdWUubWF0ZXJpYWwgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHZhbHVlLm1hdGVyaWFsID0gbnVsbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQaXBlbGluZVNldHRpbmdzIHtcclxuICAgIHJlYWRvbmx5IG1zYWE6IE1TQUE7XHJcbiAgICBlbmFibGVTaGFkaW5nU2NhbGU6IGJvb2xlYW47IC8qIGZhbHNlICovXHJcbiAgICBzaGFkaW5nU2NhbGU6IG51bWJlcjsgLyogMC41ICovXHJcbiAgICByZWFkb25seSBibG9vbTogQmxvb207XHJcbiAgICByZWFkb25seSB0b25lTWFwcGluZzogVG9uZU1hcHBpbmc7XHJcbiAgICByZWFkb25seSBjb2xvckdyYWRpbmc6IENvbG9yR3JhZGluZztcclxuICAgIHJlYWRvbmx5IGZzcjogRlNSO1xyXG4gICAgcmVhZG9ubHkgZnhhYTogRlhBQTtcclxuICAgIFtuYW1lOiBzdHJpbmddOiB1bmtub3duO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWFrZVBpcGVsaW5lU2V0dGluZ3MoKTogUGlwZWxpbmVTZXR0aW5ncyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1zYWE6IG1ha2VNU0FBKCksXHJcbiAgICAgICAgZW5hYmxlU2hhZGluZ1NjYWxlOiBmYWxzZSxcclxuICAgICAgICBzaGFkaW5nU2NhbGU6IDAuNSxcclxuICAgICAgICBibG9vbTogbWFrZUJsb29tKCksXHJcbiAgICAgICAgdG9uZU1hcHBpbmc6IG1ha2VUb25lTWFwcGluZygpLFxyXG4gICAgICAgIGNvbG9yR3JhZGluZzogbWFrZUNvbG9yR3JhZGluZygpLFxyXG4gICAgICAgIGZzcjogbWFrZUZTUigpLFxyXG4gICAgICAgIGZ4YWE6IG1ha2VGWEFBKCksXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmlsbFJlcXVpcmVkUGlwZWxpbmVTZXR0aW5ncyh2YWx1ZTogUGlwZWxpbmVTZXR0aW5ncyk6IHZvaWQge1xyXG4gICAgaWYgKCF2YWx1ZS5tc2FhKSB7XHJcbiAgICAgICAgKHZhbHVlLm1zYWEgYXMgTVNBQSkgPSBtYWtlTVNBQSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmaWxsUmVxdWlyZWRNU0FBKHZhbHVlLm1zYWEpO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlLmVuYWJsZVNoYWRpbmdTY2FsZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsdWUuZW5hYmxlU2hhZGluZ1NjYWxlID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUuc2hhZGluZ1NjYWxlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2YWx1ZS5zaGFkaW5nU2NhbGUgPSAwLjU7XHJcbiAgICB9XHJcbiAgICBpZiAoIXZhbHVlLmJsb29tKSB7XHJcbiAgICAgICAgKHZhbHVlLmJsb29tIGFzIEJsb29tKSA9IG1ha2VCbG9vbSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmaWxsUmVxdWlyZWRCbG9vbSh2YWx1ZS5ibG9vbSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXZhbHVlLnRvbmVNYXBwaW5nKSB7XHJcbiAgICAgICAgKHZhbHVlLnRvbmVNYXBwaW5nIGFzIFRvbmVNYXBwaW5nKSA9IG1ha2VUb25lTWFwcGluZygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmaWxsUmVxdWlyZWRUb25lTWFwcGluZyh2YWx1ZS50b25lTWFwcGluZyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXZhbHVlLmNvbG9yR3JhZGluZykge1xyXG4gICAgICAgICh2YWx1ZS5jb2xvckdyYWRpbmcgYXMgQ29sb3JHcmFkaW5nKSA9IG1ha2VDb2xvckdyYWRpbmcoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZmlsbFJlcXVpcmVkQ29sb3JHcmFkaW5nKHZhbHVlLmNvbG9yR3JhZGluZyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXZhbHVlLmZzcikge1xyXG4gICAgICAgICh2YWx1ZS5mc3IgYXMgRlNSKSA9IG1ha2VGU1IoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZmlsbFJlcXVpcmVkRlNSKHZhbHVlLmZzcik7XHJcbiAgICB9XHJcbiAgICBpZiAoIXZhbHVlLmZ4YWEpIHtcclxuICAgICAgICAodmFsdWUuZnhhYSBhcyBGWEFBKSA9IG1ha2VGWEFBKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZpbGxSZXF1aXJlZEZYQUEodmFsdWUuZnhhYSk7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuIENvcHlyaWdodCAoYykgMjAyMS0yMDI0IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXHJcbiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllc1xyXG4gb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxyXG4gc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcblxyXG4gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cclxuIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4qL1xyXG5cclxuaW1wb3J0IHtcclxuICAgIGFzc2VydCwgY2NsZWdhY3ksIGNsYW1wLCBnZW9tZXRyeSwgZ2Z4LCBMYXllcnMsIE1hdGVyaWFsLCBwaXBlbGluZSxcclxuICAgIFBpcGVsaW5lRXZlbnRQcm9jZXNzb3IsIFBpcGVsaW5lRXZlbnRUeXBlLCBSZWZsZWN0aW9uUHJvYmVNYW5hZ2VyLCByZW5kZXJlcixcclxuICAgIHJlbmRlcmluZywgc3lzLCBWZWMyLCBWZWMzLCBWZWM0LCB3YXJuLFxyXG59IGZyb20gJ2NjJztcclxuXHJcbmltcG9ydCB7IERFQlVHLCBFRElUT1IgfSBmcm9tICdjYy9lbnYnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIG1ha2VQaXBlbGluZVNldHRpbmdzLFxyXG4gICAgUGlwZWxpbmVTZXR0aW5ncyxcclxufSBmcm9tICcuL2J1aWx0aW4tcGlwZWxpbmUtdHlwZXMnO1xyXG5cclxuY29uc3QgeyBBQUJCLCBTcGhlcmUsIGludGVyc2VjdCB9ID0gZ2VvbWV0cnk7XHJcbmNvbnN0IHsgQ2xlYXJGbGFnQml0LCBDb2xvciwgRm9ybWF0LCBGb3JtYXRGZWF0dXJlQml0LCBMb2FkT3AsIFN0b3JlT3AsIFRleHR1cmVUeXBlLCBWaWV3cG9ydCB9ID0gZ2Z4O1xyXG5jb25zdCB7IHNjZW5lIH0gPSByZW5kZXJlcjtcclxuY29uc3QgeyBDYW1lcmFVc2FnZSwgQ1NNTGV2ZWwsIExpZ2h0VHlwZSB9ID0gc2NlbmU7XHJcblxyXG5mdW5jdGlvbiBmb3J3YXJkTmVlZENsZWFyQ29sb3IoY2FtZXJhOiByZW5kZXJlci5zY2VuZS5DYW1lcmEpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhIShjYW1lcmEuY2xlYXJGbGFnICYgKENsZWFyRmxhZ0JpdC5DT0xPUiB8IChDbGVhckZsYWdCaXQuU1RFTkNJTCA8PCAxKSkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDc21NYWluTGlnaHRWaWV3cG9ydChcclxuICAgIGxpZ2h0OiByZW5kZXJlci5zY2VuZS5EaXJlY3Rpb25hbExpZ2h0LFxyXG4gICAgdzogbnVtYmVyLFxyXG4gICAgaDogbnVtYmVyLFxyXG4gICAgbGV2ZWw6IG51bWJlcixcclxuICAgIHZwOiBnZnguVmlld3BvcnQsXHJcbiAgICBzY3JlZW5TcGFjZVNpZ25ZOiBudW1iZXIsXHJcbik6IHZvaWQge1xyXG4gICAgaWYgKGxpZ2h0LnNoYWRvd0ZpeGVkQXJlYSB8fCBsaWdodC5jc21MZXZlbCA9PT0gQ1NNTGV2ZWwuTEVWRUxfMSkge1xyXG4gICAgICAgIHZwLmxlZnQgPSAwO1xyXG4gICAgICAgIHZwLnRvcCA9IDA7XHJcbiAgICAgICAgdnAud2lkdGggPSBNYXRoLnRydW5jKHcpO1xyXG4gICAgICAgIHZwLmhlaWdodCA9IE1hdGgudHJ1bmMoaCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZwLmxlZnQgPSBNYXRoLnRydW5jKGxldmVsICUgMiAqIDAuNSAqIHcpO1xyXG4gICAgICAgIGlmIChzY3JlZW5TcGFjZVNpZ25ZID4gMCkge1xyXG4gICAgICAgICAgICB2cC50b3AgPSBNYXRoLnRydW5jKCgxIC0gTWF0aC5mbG9vcihsZXZlbCAvIDIpKSAqIDAuNSAqIGgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZwLnRvcCA9IE1hdGgudHJ1bmMoTWF0aC5mbG9vcihsZXZlbCAvIDIpICogMC41ICogaCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZwLndpZHRoID0gTWF0aC50cnVuYygwLjUgKiB3KTtcclxuICAgICAgICB2cC5oZWlnaHQgPSBNYXRoLnRydW5jKDAuNSAqIGgpO1xyXG4gICAgfVxyXG4gICAgdnAubGVmdCA9IE1hdGgubWF4KDAsIHZwLmxlZnQpO1xyXG4gICAgdnAudG9wID0gTWF0aC5tYXgoMCwgdnAudG9wKTtcclxuICAgIHZwLndpZHRoID0gTWF0aC5tYXgoMSwgdnAud2lkdGgpO1xyXG4gICAgdnAuaGVpZ2h0ID0gTWF0aC5tYXgoMSwgdnAuaGVpZ2h0KTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBpcGVsaW5lQ29uZmlncyB7XHJcbiAgICBpc1dlYiA9IGZhbHNlO1xyXG4gICAgaXNXZWJHTDEgPSBmYWxzZTtcclxuICAgIGlzV2ViR1BVID0gZmFsc2U7XHJcbiAgICBpc01vYmlsZSA9IGZhbHNlO1xyXG4gICAgaXNIRFIgPSBmYWxzZTtcclxuICAgIHVzZUZsb2F0T3V0cHV0ID0gZmFsc2U7XHJcbiAgICB0b25lTWFwcGluZ1R5cGUgPSAwOyAvLyAwOiBBQ0VTLCAxOiBOb25lXHJcbiAgICBzaGFkb3dFbmFibGVkID0gZmFsc2U7XHJcbiAgICBzaGFkb3dNYXBGb3JtYXQgPSBGb3JtYXQuUjMyRjtcclxuICAgIHNoYWRvd01hcFNpemUgPSBuZXcgVmVjMigxLCAxKTtcclxuICAgIHVzZVBsYW5hclNoYWRvdyA9IGZhbHNlO1xyXG4gICAgc2NyZWVuU3BhY2VTaWduWSA9IDE7XHJcbiAgICBzdXBwb3J0RGVwdGhTYW1wbGUgPSBmYWxzZTtcclxuICAgIG1vYmlsZU1heFNwb3RMaWdodFNoYWRvd01hcHMgPSAxO1xyXG5cclxuICAgIHBsYXRmb3JtID0gbmV3IFZlYzQoMCwgMCwgMCwgMCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldHVwUGlwZWxpbmVDb25maWdzKFxyXG4gICAgcHBsOiByZW5kZXJpbmcuQmFzaWNQaXBlbGluZSxcclxuICAgIGNvbmZpZ3M6IFBpcGVsaW5lQ29uZmlncyxcclxuKTogdm9pZCB7XHJcbiAgICBjb25zdCBzYW1wbGVGZWF0dXJlID0gRm9ybWF0RmVhdHVyZUJpdC5TQU1QTEVEX1RFWFRVUkUgfCBGb3JtYXRGZWF0dXJlQml0LkxJTkVBUl9GSUxURVI7XHJcbiAgICBjb25zdCBkZXZpY2UgPSBwcGwuZGV2aWNlO1xyXG4gICAgLy8gUGxhdGZvcm1cclxuICAgIGNvbmZpZ3MuaXNXZWIgPSAhc3lzLmlzTmF0aXZlO1xyXG4gICAgY29uZmlncy5pc1dlYkdMMSA9IGRldmljZS5nZnhBUEkgPT09IGdmeC5BUEkuV0VCR0w7XHJcbiAgICBjb25maWdzLmlzV2ViR1BVID0gZGV2aWNlLmdmeEFQSSA9PT0gZ2Z4LkFQSS5XRUJHUFU7XHJcbiAgICBjb25maWdzLmlzTW9iaWxlID0gc3lzLmlzTW9iaWxlO1xyXG5cclxuICAgIC8vIFJlbmRlcmluZ1xyXG4gICAgY29uZmlncy5pc0hEUiA9IHBwbC5waXBlbGluZVNjZW5lRGF0YS5pc0hEUjsgLy8gSGFzIHRvbmUgbWFwcGluZ1xyXG4gICAgY29uZmlncy51c2VGbG9hdE91dHB1dCA9IHBwbC5nZXRNYWNyb0Jvb2woJ0NDX1VTRV9GTE9BVF9PVVRQVVQnKTtcclxuICAgIGNvbmZpZ3MudG9uZU1hcHBpbmdUeXBlID0gcHBsLnBpcGVsaW5lU2NlbmVEYXRhLnBvc3RTZXR0aW5ncy50b25lTWFwcGluZ1R5cGU7XHJcbiAgICAvLyBTaGFkb3dcclxuICAgIGNvbnN0IHNoYWRvd0luZm8gPSBwcGwucGlwZWxpbmVTY2VuZURhdGEuc2hhZG93cztcclxuICAgIGNvbmZpZ3Muc2hhZG93RW5hYmxlZCA9IHNoYWRvd0luZm8uZW5hYmxlZDtcclxuICAgIGNvbmZpZ3Muc2hhZG93TWFwRm9ybWF0ID0gcGlwZWxpbmUuc3VwcG9ydHNSMzJGbG9hdFRleHR1cmUocHBsLmRldmljZSkgPyBGb3JtYXQuUjMyRiA6IEZvcm1hdC5SR0JBODtcclxuICAgIGNvbmZpZ3Muc2hhZG93TWFwU2l6ZS5zZXQoc2hhZG93SW5mby5zaXplKTtcclxuICAgIGNvbmZpZ3MudXNlUGxhbmFyU2hhZG93ID0gc2hhZG93SW5mby5lbmFibGVkICYmIHNoYWRvd0luZm8udHlwZSA9PT0gcmVuZGVyZXIuc2NlbmUuU2hhZG93VHlwZS5QbGFuYXI7XHJcbiAgICAvLyBEZXZpY2VcclxuICAgIGNvbmZpZ3Muc2NyZWVuU3BhY2VTaWduWSA9IHBwbC5kZXZpY2UuY2FwYWJpbGl0aWVzLnNjcmVlblNwYWNlU2lnblk7XHJcbiAgICBjb25maWdzLnN1cHBvcnREZXB0aFNhbXBsZSA9IChwcGwuZGV2aWNlLmdldEZvcm1hdEZlYXR1cmVzKEZvcm1hdC5ERVBUSF9TVEVOQ0lMKSAmIHNhbXBsZUZlYXR1cmUpID09PSBzYW1wbGVGZWF0dXJlO1xyXG4gICAgLy8gQ29uc3RhbnRzXHJcbiAgICBjb25zdCBzY3JlZW5TcGFjZVNpZ25ZID0gZGV2aWNlLmNhcGFiaWxpdGllcy5zY3JlZW5TcGFjZVNpZ25ZO1xyXG4gICAgY29uZmlncy5wbGF0Zm9ybS54ID0gY29uZmlncy5pc01vYmlsZSA/IDEuMCA6IDAuMDtcclxuICAgIGNvbmZpZ3MucGxhdGZvcm0udyA9IChzY3JlZW5TcGFjZVNpZ25ZICogMC41ICsgMC41KSA8PCAxIHwgKGRldmljZS5jYXBhYmlsaXRpZXMuY2xpcFNwYWNlU2lnblkgKiAwLjUgKyAwLjUpO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBpcGVsaW5lU2V0dGluZ3MyIGV4dGVuZHMgUGlwZWxpbmVTZXR0aW5ncyB7XHJcbiAgICBfcGFzc2VzPzogcmVuZGVyaW5nLlBpcGVsaW5lUGFzc0J1aWxkZXJbXTtcclxufVxyXG5cclxuY29uc3QgZGVmYXVsdFNldHRpbmdzID0gbWFrZVBpcGVsaW5lU2V0dGluZ3MoKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBDYW1lcmFDb25maWdzIHtcclxuICAgIHNldHRpbmdzOiBQaXBlbGluZVNldHRpbmdzID0gZGVmYXVsdFNldHRpbmdzO1xyXG4gICAgLy8gV2luZG93XHJcbiAgICBpc01haW5HYW1lV2luZG93ID0gZmFsc2U7XHJcbiAgICByZW5kZXJXaW5kb3dJZCA9IDA7XHJcbiAgICAvLyBDYW1lcmFcclxuICAgIGNvbG9yTmFtZSA9ICcnO1xyXG4gICAgZGVwdGhTdGVuY2lsTmFtZSA9ICcnO1xyXG4gICAgLy8gUGlwZWxpbmVcclxuICAgIGVuYWJsZUZ1bGxQaXBlbGluZSA9IGZhbHNlO1xyXG4gICAgZW5hYmxlUHJvZmlsZXIgPSBmYWxzZTtcclxuICAgIHJlbWFpbmluZ1Bhc3NlcyA9IDA7XHJcbiAgICAvLyBTaGFkaW5nIFNjYWxlXHJcbiAgICBlbmFibGVTaGFkaW5nU2NhbGUgPSBmYWxzZTtcclxuICAgIHNoYWRpbmdTY2FsZSA9IDEuMDtcclxuICAgIG5hdGl2ZVdpZHRoID0gMTtcclxuICAgIG5hdGl2ZUhlaWdodCA9IDE7XHJcbiAgICB3aWR0aCA9IDE7IC8vIFNjYWxlZCB3aWR0aFxyXG4gICAgaGVpZ2h0ID0gMTsgLy8gU2NhbGVkIGhlaWdodFxyXG4gICAgLy8gUmFkaWFuY2VcclxuICAgIGVuYWJsZUhEUiA9IGZhbHNlO1xyXG4gICAgcmFkaWFuY2VGb3JtYXQgPSBnZnguRm9ybWF0LlJHQkE4O1xyXG4gICAgLy8gVG9uZSBNYXBwaW5nXHJcbiAgICBjb3B5QW5kVG9uZW1hcE1hdGVyaWFsOiBNYXRlcmlhbCB8IG51bGwgPSBudWxsO1xyXG4gICAgLy8gRGVwdGhcclxuICAgIC8qKiBAZW4gbXV0YWJsZSAqL1xyXG4gICAgZW5hYmxlU3RvcmVTY2VuZURlcHRoID0gZmFsc2U7XHJcbn1cclxuXHJcbmNvbnN0IHNDbGVhckNvbG9yVHJhbnNwYXJlbnRCbGFjayA9IG5ldyBDb2xvcigwLCAwLCAwLCAwKTtcclxuXHJcbmZ1bmN0aW9uIHNvcnRQaXBlbGluZVBhc3NCdWlsZGVyc0J5Q29uZmlnT3JkZXIocGFzc0J1aWxkZXJzOiByZW5kZXJpbmcuUGlwZWxpbmVQYXNzQnVpbGRlcltdKTogdm9pZCB7XHJcbiAgICBwYXNzQnVpbGRlcnMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgIHJldHVybiBhLmdldENvbmZpZ09yZGVyKCkgLSBiLmdldENvbmZpZ09yZGVyKCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc29ydFBpcGVsaW5lUGFzc0J1aWxkZXJzQnlSZW5kZXJPcmRlcihwYXNzQnVpbGRlcnM6IHJlbmRlcmluZy5QaXBlbGluZVBhc3NCdWlsZGVyW10pOiB2b2lkIHtcclxuICAgIHBhc3NCdWlsZGVycy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGEuZ2V0UmVuZGVyT3JkZXIoKSAtIGIuZ2V0UmVuZGVyT3JkZXIoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRDb3B5VG9TY3JlZW5QYXNzKFxyXG4gICAgcHBsOiByZW5kZXJpbmcuQmFzaWNQaXBlbGluZSxcclxuICAgIHBwbENvbmZpZ3M6IFJlYWRvbmx5PFBpcGVsaW5lQ29uZmlncz4sXHJcbiAgICBjYW1lcmFDb25maWdzOiBDYW1lcmFDb25maWdzLFxyXG4gICAgaW5wdXQ6IHN0cmluZyxcclxuKTogcmVuZGVyaW5nLkJhc2ljUmVuZGVyUGFzc0J1aWxkZXIge1xyXG4gICAgYXNzZXJ0KCEhY2FtZXJhQ29uZmlncy5jb3B5QW5kVG9uZW1hcE1hdGVyaWFsKTtcclxuICAgIGNvbnN0IHBhc3MgPSBwcGwuYWRkUmVuZGVyUGFzcyhcclxuICAgICAgICBjYW1lcmFDb25maWdzLm5hdGl2ZVdpZHRoLFxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3MubmF0aXZlSGVpZ2h0LFxyXG4gICAgICAgICdjYy10b25lLW1hcHBpbmcnKTtcclxuICAgIHBhc3MuYWRkUmVuZGVyVGFyZ2V0KFxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3MuY29sb3JOYW1lLFxyXG4gICAgICAgIExvYWRPcC5DTEVBUiwgU3RvcmVPcC5TVE9SRSxcclxuICAgICAgICBzQ2xlYXJDb2xvclRyYW5zcGFyZW50QmxhY2spO1xyXG4gICAgcGFzcy5hZGRUZXh0dXJlKGlucHV0LCAnaW5wdXRUZXh0dXJlJyk7XHJcbiAgICBwYXNzLnNldFZlYzQoJ2dfcGxhdGZvcm0nLCBwcGxDb25maWdzLnBsYXRmb3JtKTtcclxuICAgIHBhc3MuYWRkUXVldWUocmVuZGVyaW5nLlF1ZXVlSGludC5PUEFRVUUpXHJcbiAgICAgICAgLmFkZEZ1bGxzY3JlZW5RdWFkKGNhbWVyYUNvbmZpZ3MuY29weUFuZFRvbmVtYXBNYXRlcmlhbCwgMSk7XHJcbiAgICByZXR1cm4gcGFzcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBpbmdQb25nUmVuZGVyVGFyZ2V0KHByZXZOYW1lOiBzdHJpbmcsIHByZWZpeDogc3RyaW5nLCBpZDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIGlmIChwcmV2TmFtZS5zdGFydHNXaXRoKHByZWZpeCkpIHtcclxuICAgICAgICByZXR1cm4gYCR7cHJlZml4fSR7MSAtIE51bWJlcihwcmV2TmFtZS5jaGFyQXQocHJlZml4Lmxlbmd0aCkpfV8ke2lkfWA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBgJHtwcmVmaXh9MF8ke2lkfWA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGlwZWxpbmVDb250ZXh0IHtcclxuICAgIGNvbG9yTmFtZTogc3RyaW5nO1xyXG4gICAgZGVwdGhTdGVuY2lsTmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5jbGFzcyBGb3J3YXJkTGlnaHRpbmcge1xyXG4gICAgLy8gQWN0aXZlIGxpZ2h0c1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBsaWdodHM6IHJlbmRlcmVyLnNjZW5lLkxpZ2h0W10gPSBbXTtcclxuICAgIC8vIEFjdGl2ZSBzcG90IGxpZ2h0cyB3aXRoIHNoYWRvd3MgKE11dHVhbGx5IGV4Y2x1c2l2ZSB3aXRoIGBsaWdodHNgKVxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzaGFkb3dFbmFibGVkU3BvdExpZ2h0czogcmVuZGVyZXIuc2NlbmUuU3BvdExpZ2h0W10gPSBbXTtcclxuXHJcbiAgICAvLyBJbnRlcm5hbCBjYWNoZWQgcmVzb3VyY2VzXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zcGhlcmUgPSBTcGhlcmUuY3JlYXRlKDAsIDAsIDAsIDEpO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfYm91bmRpbmdCb3ggPSBuZXcgQUFCQigpO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfcmFuZ2VkRGlyTGlnaHRCb3VuZGluZ0JveCA9IG5ldyBBQUJCKDAuMCwgMC4wLCAwLjAsIDAuNSwgMC41LCAwLjUpO1xyXG5cclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIC8vIEludGVyZmFjZVxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgcHVibGljIGN1bGxMaWdodHMoc2NlbmU6IHJlbmRlcmVyLlJlbmRlclNjZW5lLCBmcnVzdHVtOiBnZW9tZXRyeS5GcnVzdHVtLCBjYW1lcmFQb3M/OiBWZWMzKTogdm9pZCB7XHJcbiAgICAgICAgLy8gVE9ETyh6aG91emhlbmdsb25nKTogTWFrZSBsaWdodCBjdWxsaW5nIG5hdGl2ZVxyXG4gICAgICAgIHRoaXMubGlnaHRzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5zaGFkb3dFbmFibGVkU3BvdExpZ2h0cy5sZW5ndGggPSAwO1xyXG4gICAgICAgIC8vIHNwb3QgbGlnaHRzXHJcbiAgICAgICAgZm9yIChjb25zdCBsaWdodCBvZiBzY2VuZS5zcG90TGlnaHRzKSB7XHJcbiAgICAgICAgICAgIGlmIChsaWdodC5iYWtlZCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgU3BoZXJlLnNldCh0aGlzLl9zcGhlcmUsIGxpZ2h0LnBvc2l0aW9uLngsIGxpZ2h0LnBvc2l0aW9uLnksIGxpZ2h0LnBvc2l0aW9uLnosIGxpZ2h0LnJhbmdlKTtcclxuICAgICAgICAgICAgaWYgKGludGVyc2VjdC5zcGhlcmVGcnVzdHVtKHRoaXMuX3NwaGVyZSwgZnJ1c3R1bSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChsaWdodC5zaGFkb3dFbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFkb3dFbmFibGVkU3BvdExpZ2h0cy5wdXNoKGxpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saWdodHMucHVzaChsaWdodCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc3BoZXJlIGxpZ2h0c1xyXG4gICAgICAgIGZvciAoY29uc3QgbGlnaHQgb2Ygc2NlbmUuc3BoZXJlTGlnaHRzKSB7XHJcbiAgICAgICAgICAgIGlmIChsaWdodC5iYWtlZCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgU3BoZXJlLnNldCh0aGlzLl9zcGhlcmUsIGxpZ2h0LnBvc2l0aW9uLngsIGxpZ2h0LnBvc2l0aW9uLnksIGxpZ2h0LnBvc2l0aW9uLnosIGxpZ2h0LnJhbmdlKTtcclxuICAgICAgICAgICAgaWYgKGludGVyc2VjdC5zcGhlcmVGcnVzdHVtKHRoaXMuX3NwaGVyZSwgZnJ1c3R1bSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlnaHRzLnB1c2gobGlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHBvaW50IGxpZ2h0c1xyXG4gICAgICAgIGZvciAoY29uc3QgbGlnaHQgb2Ygc2NlbmUucG9pbnRMaWdodHMpIHtcclxuICAgICAgICAgICAgaWYgKGxpZ2h0LmJha2VkKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBTcGhlcmUuc2V0KHRoaXMuX3NwaGVyZSwgbGlnaHQucG9zaXRpb24ueCwgbGlnaHQucG9zaXRpb24ueSwgbGlnaHQucG9zaXRpb24ueiwgbGlnaHQucmFuZ2UpO1xyXG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0LnNwaGVyZUZydXN0dW0odGhpcy5fc3BoZXJlLCBmcnVzdHVtKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saWdodHMucHVzaChsaWdodCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcmFuZ2VkIGRpciBsaWdodHNcclxuICAgICAgICBmb3IgKGNvbnN0IGxpZ2h0IG9mIHNjZW5lLnJhbmdlZERpckxpZ2h0cykge1xyXG4gICAgICAgICAgICBBQUJCLnRyYW5zZm9ybSh0aGlzLl9ib3VuZGluZ0JveCwgdGhpcy5fcmFuZ2VkRGlyTGlnaHRCb3VuZGluZ0JveCwgbGlnaHQubm9kZSEuZ2V0V29ybGRNYXRyaXgoKSk7XHJcbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3QuYWFiYkZydXN0dW0odGhpcy5fYm91bmRpbmdCb3gsIGZydXN0dW0pKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpZ2h0cy5wdXNoKGxpZ2h0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNhbWVyYVBvcykge1xyXG4gICAgICAgICAgICB0aGlzLnNoYWRvd0VuYWJsZWRTcG90TGlnaHRzLnNvcnQoXHJcbiAgICAgICAgICAgICAgICAobGhzLCByaHMpID0+IFZlYzMuc3F1YXJlZERpc3RhbmNlKGNhbWVyYVBvcywgbGhzLnBvc2l0aW9uKSAtIFZlYzMuc3F1YXJlZERpc3RhbmNlKGNhbWVyYVBvcywgcmhzLnBvc2l0aW9uKSxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF9hZGRMaWdodFF1ZXVlcyhjYW1lcmE6IHJlbmRlcmVyLnNjZW5lLkNhbWVyYSwgcGFzczogcmVuZGVyaW5nLkJhc2ljUmVuZGVyUGFzc0J1aWxkZXIpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGxpZ2h0IG9mIHRoaXMubGlnaHRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHF1ZXVlID0gcGFzcy5hZGRRdWV1ZShyZW5kZXJpbmcuUXVldWVIaW50LkJMRU5ELCAnZm9yd2FyZC1hZGQnKTtcclxuICAgICAgICAgICAgc3dpdGNoIChsaWdodC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIExpZ2h0VHlwZS5TUEhFUkU6XHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWUubmFtZSA9ICdzcGhlcmUtbGlnaHQnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBMaWdodFR5cGUuU1BPVDpcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZS5uYW1lID0gJ3Nwb3QtbGlnaHQnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBMaWdodFR5cGUuUE9JTlQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWUubmFtZSA9ICdwb2ludC1saWdodCc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIExpZ2h0VHlwZS5SQU5HRURfRElSRUNUSU9OQUw6XHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWUubmFtZSA9ICdyYW5nZWQtZGlyZWN0aW9uYWwtbGlnaHQnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZS5uYW1lID0gJ3Vua25vd24tbGlnaHQnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHF1ZXVlLmFkZFNjZW5lKFxyXG4gICAgICAgICAgICAgICAgY2FtZXJhLFxyXG4gICAgICAgICAgICAgICAgcmVuZGVyaW5nLlNjZW5lRmxhZ3MuQkxFTkQsXHJcbiAgICAgICAgICAgICAgICBsaWdodCxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYWRkU3BvdGxpZ2h0U2hhZG93UGFzc2VzKFxyXG4gICAgICAgIHBwbDogcmVuZGVyaW5nLkJhc2ljUGlwZWxpbmUsXHJcbiAgICAgICAgY2FtZXJhOiByZW5kZXJlci5zY2VuZS5DYW1lcmEsXHJcbiAgICAgICAgbWF4TnVtU2hhZG93TWFwczogbnVtYmVyLFxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgIGZvciAoY29uc3QgbGlnaHQgb2YgdGhpcy5zaGFkb3dFbmFibGVkU3BvdExpZ2h0cykge1xyXG4gICAgICAgICAgICBjb25zdCBzaGFkb3dNYXBTaXplID0gcHBsLnBpcGVsaW5lU2NlbmVEYXRhLnNoYWRvd3Muc2l6ZTtcclxuICAgICAgICAgICAgY29uc3Qgc2hhZG93UGFzcyA9IHBwbC5hZGRSZW5kZXJQYXNzKHNoYWRvd01hcFNpemUueCwgc2hhZG93TWFwU2l6ZS55LCAnZGVmYXVsdCcpO1xyXG4gICAgICAgICAgICBzaGFkb3dQYXNzLm5hbWUgPSBgU3BvdExpZ2h0U2hhZG93UGFzcyR7aX1gO1xyXG4gICAgICAgICAgICBzaGFkb3dQYXNzLmFkZFJlbmRlclRhcmdldChgU3BvdFNoYWRvd01hcCR7aX1gLCBMb2FkT3AuQ0xFQVIsIFN0b3JlT3AuU1RPUkUsIG5ldyBDb2xvcigxLCAxLCAxLCAxKSk7XHJcbiAgICAgICAgICAgIHNoYWRvd1Bhc3MuYWRkRGVwdGhTdGVuY2lsKGBTcG90U2hhZG93RGVwdGgke2l9YCwgTG9hZE9wLkNMRUFSLCBTdG9yZU9wLkRJU0NBUkQpO1xyXG4gICAgICAgICAgICBzaGFkb3dQYXNzLmFkZFF1ZXVlKHJlbmRlcmluZy5RdWV1ZUhpbnQuTk9ORSwgJ3NoYWRvdy1jYXN0ZXInKVxyXG4gICAgICAgICAgICAgICAgLmFkZFNjZW5lKGNhbWVyYSwgcmVuZGVyaW5nLlNjZW5lRmxhZ3MuT1BBUVVFIHwgcmVuZGVyaW5nLlNjZW5lRmxhZ3MuTUFTSyB8IHJlbmRlcmluZy5TY2VuZUZsYWdzLlNIQURPV19DQVNURVIpXHJcbiAgICAgICAgICAgICAgICAudXNlTGlnaHRGcnVzdHVtKGxpZ2h0KTtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBpZiAoaSA+PSBtYXhOdW1TaGFkb3dNYXBzKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBhZGRMaWdodFF1ZXVlcyhwYXNzOiByZW5kZXJpbmcuQmFzaWNSZW5kZXJQYXNzQnVpbGRlcixcclxuICAgICAgICBjYW1lcmE6IHJlbmRlcmVyLnNjZW5lLkNhbWVyYSwgbWF4TnVtU2hhZG93TWFwczogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fYWRkTGlnaHRRdWV1ZXMoY2FtZXJhLCBwYXNzKTtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCBsaWdodCBvZiB0aGlzLnNoYWRvd0VuYWJsZWRTcG90TGlnaHRzKSB7XHJcbiAgICAgICAgICAgIC8vIEFkZCBzcG90LWxpZ2h0IHBhc3NcclxuICAgICAgICAgICAgLy8gU2F2ZSBsYXN0IFJlbmRlclBhc3MgdG8gdGhlIGBwYXNzYCB2YXJpYWJsZVxyXG4gICAgICAgICAgICAvLyBUT0RPKHpob3V6aGVuZ2xvbmcpOiBGaXggcGVyIHF1ZXVlIGFkZFRleHR1cmVcclxuICAgICAgICAgICAgcGFzcy5hZGRUZXh0dXJlKGBTcG90U2hhZG93TWFwJHtpfWAsICdjY19zcG90U2hhZG93TWFwJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHF1ZXVlID0gcGFzcy5hZGRRdWV1ZShyZW5kZXJpbmcuUXVldWVIaW50LkJMRU5ELCAnZm9yd2FyZC1hZGQnKTtcclxuICAgICAgICAgICAgcXVldWUuYWRkU2NlbmUoY2FtZXJhLCByZW5kZXJpbmcuU2NlbmVGbGFncy5CTEVORCwgbGlnaHQpO1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIGlmIChpID49IG1heE51bVNoYWRvd01hcHMpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vdGljZTogRm9yd2FyZExpZ2h0aW5nIGNhbm5vdCBoYW5kbGUgYSBsb3Qgb2YgbGlnaHRzLlxyXG4gICAgLy8gSWYgdGhlcmUgYXJlIHRvbyBtYW55IGxpZ2h0cywgdGhlIHBlcmZvcm1hbmNlIHdpbGwgYmUgdmVyeSBwb29yLlxyXG4gICAgLy8gSWYgbWFueSBsaWdodHMgYXJlIG5lZWRlZCwgcGxlYXNlIGltcGxlbWVudCBhIGZvcndhcmQrIG9yIGRlZmVycmVkIHJlbmRlcmluZyBwaXBlbGluZS5cclxuICAgIHB1YmxpYyBhZGRMaWdodFBhc3NlcyhcclxuICAgICAgICBjb2xvck5hbWU6IHN0cmluZyxcclxuICAgICAgICBkZXB0aFN0ZW5jaWxOYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgZGVwdGhTdGVuY2lsU3RvcmVPcDogZ2Z4LlN0b3JlT3AsXHJcbiAgICAgICAgaWQ6IG51bWJlciwgLy8gd2luZG93IGlkXHJcbiAgICAgICAgd2lkdGg6IG51bWJlcixcclxuICAgICAgICBoZWlnaHQ6IG51bWJlcixcclxuICAgICAgICBjYW1lcmE6IHJlbmRlcmVyLnNjZW5lLkNhbWVyYSxcclxuICAgICAgICB2aWV3cG9ydDogZ2Z4LlZpZXdwb3J0LFxyXG4gICAgICAgIHBwbDogcmVuZGVyaW5nLkJhc2ljUGlwZWxpbmUsXHJcbiAgICAgICAgcGFzczogcmVuZGVyaW5nLkJhc2ljUmVuZGVyUGFzc0J1aWxkZXIsXHJcbiAgICApOiByZW5kZXJpbmcuQmFzaWNSZW5kZXJQYXNzQnVpbGRlciB7XHJcbiAgICAgICAgdGhpcy5fYWRkTGlnaHRRdWV1ZXMoY2FtZXJhLCBwYXNzKTtcclxuXHJcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgICBjb25zdCBzaGFkb3dNYXBTaXplID0gcHBsLnBpcGVsaW5lU2NlbmVEYXRhLnNoYWRvd3Muc2l6ZTtcclxuICAgICAgICBmb3IgKGNvbnN0IGxpZ2h0IG9mIHRoaXMuc2hhZG93RW5hYmxlZFNwb3RMaWdodHMpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2hhZG93UGFzcyA9IHBwbC5hZGRSZW5kZXJQYXNzKHNoYWRvd01hcFNpemUueCwgc2hhZG93TWFwU2l6ZS55LCAnZGVmYXVsdCcpO1xyXG4gICAgICAgICAgICBzaGFkb3dQYXNzLm5hbWUgPSAnU3BvdGxpZ2h0U2hhZG93UGFzcyc7XHJcbiAgICAgICAgICAgIC8vIFJldXNlIGNzbSBzaGFkb3cgbWFwXHJcbiAgICAgICAgICAgIHNoYWRvd1Bhc3MuYWRkUmVuZGVyVGFyZ2V0KGBTaGFkb3dNYXAke2lkfWAsIExvYWRPcC5DTEVBUiwgU3RvcmVPcC5TVE9SRSwgbmV3IENvbG9yKDEsIDEsIDEsIDEpKTtcclxuICAgICAgICAgICAgc2hhZG93UGFzcy5hZGREZXB0aFN0ZW5jaWwoYFNoYWRvd0RlcHRoJHtpZH1gLCBMb2FkT3AuQ0xFQVIsIFN0b3JlT3AuRElTQ0FSRCk7XHJcbiAgICAgICAgICAgIHNoYWRvd1Bhc3MuYWRkUXVldWUocmVuZGVyaW5nLlF1ZXVlSGludC5OT05FLCAnc2hhZG93LWNhc3RlcicpXHJcbiAgICAgICAgICAgICAgICAuYWRkU2NlbmUoY2FtZXJhLCByZW5kZXJpbmcuU2NlbmVGbGFncy5PUEFRVUUgfCByZW5kZXJpbmcuU2NlbmVGbGFncy5NQVNLIHwgcmVuZGVyaW5nLlNjZW5lRmxhZ3MuU0hBRE9XX0NBU1RFUilcclxuICAgICAgICAgICAgICAgIC51c2VMaWdodEZydXN0dW0obGlnaHQpO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIHNwb3QtbGlnaHQgcGFzc1xyXG4gICAgICAgICAgICAvLyBTYXZlIGxhc3QgUmVuZGVyUGFzcyB0byB0aGUgYHBhc3NgIHZhcmlhYmxlXHJcbiAgICAgICAgICAgICsrY291bnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0b3JlT3AgPSBjb3VudCA9PT0gdGhpcy5zaGFkb3dFbmFibGVkU3BvdExpZ2h0cy5sZW5ndGhcclxuICAgICAgICAgICAgICAgID8gZGVwdGhTdGVuY2lsU3RvcmVPcFxyXG4gICAgICAgICAgICAgICAgOiBTdG9yZU9wLlNUT1JFO1xyXG5cclxuICAgICAgICAgICAgcGFzcyA9IHBwbC5hZGRSZW5kZXJQYXNzKHdpZHRoLCBoZWlnaHQsICdkZWZhdWx0Jyk7XHJcbiAgICAgICAgICAgIHBhc3MubmFtZSA9ICdTcG90bGlnaHRXaXRoU2hhZG93TWFwJztcclxuICAgICAgICAgICAgcGFzcy5zZXRWaWV3cG9ydCh2aWV3cG9ydCk7XHJcbiAgICAgICAgICAgIHBhc3MuYWRkUmVuZGVyVGFyZ2V0KGNvbG9yTmFtZSwgTG9hZE9wLkxPQUQpO1xyXG4gICAgICAgICAgICBwYXNzLmFkZERlcHRoU3RlbmNpbChkZXB0aFN0ZW5jaWxOYW1lLCBMb2FkT3AuTE9BRCwgc3RvcmVPcCk7XHJcbiAgICAgICAgICAgIHBhc3MuYWRkVGV4dHVyZShgU2hhZG93TWFwJHtpZH1gLCAnY2Nfc3BvdFNoYWRvd01hcCcpO1xyXG4gICAgICAgICAgICBjb25zdCBxdWV1ZSA9IHBhc3MuYWRkUXVldWUocmVuZGVyaW5nLlF1ZXVlSGludC5CTEVORCwgJ2ZvcndhcmQtYWRkJyk7XHJcbiAgICAgICAgICAgIHF1ZXVlLmFkZFNjZW5lKFxyXG4gICAgICAgICAgICAgICAgY2FtZXJhLFxyXG4gICAgICAgICAgICAgICAgcmVuZGVyaW5nLlNjZW5lRmxhZ3MuQkxFTkQsXHJcbiAgICAgICAgICAgICAgICBsaWdodCxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhc3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzTXVsdGlwbGVMaWdodFBhc3Nlc05lZWRlZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zaGFkb3dFbmFibGVkU3BvdExpZ2h0cy5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZvcndhcmRQYXNzQ29uZmlncyB7XHJcbiAgICBlbmFibGVNYWluTGlnaHRTaGFkb3dNYXA6IGJvb2xlYW47XHJcbiAgICBlbmFibGVNYWluTGlnaHRQbGFuYXJTaGFkb3dNYXA6IGJvb2xlYW47XHJcbiAgICBlbmFibGVQbGFuYXJSZWZsZWN0aW9uUHJvYmU6IGJvb2xlYW47XHJcbiAgICBlbmFibGVNU0FBOiBib29sZWFuO1xyXG4gICAgZW5hYmxlU2luZ2xlRm9yd2FyZFBhc3M6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCdWlsdGluRm9yd2FyZFBhc3NCdWlsZGVyIGltcGxlbWVudHMgcmVuZGVyaW5nLlBpcGVsaW5lUGFzc0J1aWxkZXIge1xyXG4gICAgc3RhdGljIENvbmZpZ09yZGVyID0gMTAwO1xyXG4gICAgc3RhdGljIFJlbmRlck9yZGVyID0gMTAwO1xyXG4gICAgZ2V0Q29uZmlnT3JkZXIoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gQnVpbHRpbkZvcndhcmRQYXNzQnVpbGRlci5Db25maWdPcmRlcjtcclxuICAgIH1cclxuICAgIGdldFJlbmRlck9yZGVyKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIEJ1aWx0aW5Gb3J3YXJkUGFzc0J1aWxkZXIuUmVuZGVyT3JkZXI7XHJcbiAgICB9XHJcbiAgICBjb25maWdDYW1lcmEoXHJcbiAgICAgICAgY2FtZXJhOiBSZWFkb25seTxyZW5kZXJlci5zY2VuZS5DYW1lcmE+LFxyXG4gICAgICAgIHBpcGVsaW5lQ29uZmlnczogUmVhZG9ubHk8UGlwZWxpbmVDb25maWdzPixcclxuICAgICAgICBjYW1lcmFDb25maWdzOiBDYW1lcmFDb25maWdzICYgRm9yd2FyZFBhc3NDb25maWdzKTogdm9pZCB7XHJcbiAgICAgICAgLy8gU2hhZG93XHJcbiAgICAgICAgY2FtZXJhQ29uZmlncy5lbmFibGVNYWluTGlnaHRTaGFkb3dNYXAgPSBwaXBlbGluZUNvbmZpZ3Muc2hhZG93RW5hYmxlZFxyXG4gICAgICAgICAgICAmJiAhcGlwZWxpbmVDb25maWdzLnVzZVBsYW5hclNoYWRvd1xyXG4gICAgICAgICAgICAmJiAhIWNhbWVyYS5zY2VuZVxyXG4gICAgICAgICAgICAmJiAhIWNhbWVyYS5zY2VuZS5tYWluTGlnaHRcclxuICAgICAgICAgICAgJiYgY2FtZXJhLnNjZW5lLm1haW5MaWdodC5zaGFkb3dFbmFibGVkO1xyXG5cclxuICAgICAgICBjYW1lcmFDb25maWdzLmVuYWJsZU1haW5MaWdodFBsYW5hclNoYWRvd01hcCA9IHBpcGVsaW5lQ29uZmlncy5zaGFkb3dFbmFibGVkXHJcbiAgICAgICAgICAgICYmIHBpcGVsaW5lQ29uZmlncy51c2VQbGFuYXJTaGFkb3dcclxuICAgICAgICAgICAgJiYgISFjYW1lcmEuc2NlbmVcclxuICAgICAgICAgICAgJiYgISFjYW1lcmEuc2NlbmUubWFpbkxpZ2h0XHJcbiAgICAgICAgICAgICYmIGNhbWVyYS5zY2VuZS5tYWluTGlnaHQuc2hhZG93RW5hYmxlZDtcclxuXHJcbiAgICAgICAgLy8gUmVmbGVjdGlvbiBQcm9iZVxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3MuZW5hYmxlUGxhbmFyUmVmbGVjdGlvblByb2JlID1cclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5pc01haW5HYW1lV2luZG93IHx8IGNhbWVyYS5jYW1lcmFVc2FnZSA9PT0gQ2FtZXJhVXNhZ2UuU0NFTkVfVklFVztcclxuXHJcbiAgICAgICAgLy8gTVNBQVxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3MuZW5hYmxlTVNBQSA9IGNhbWVyYUNvbmZpZ3Muc2V0dGluZ3MubXNhYS5lbmFibGVkXHJcbiAgICAgICAgICAgICYmICFjYW1lcmFDb25maWdzLmVuYWJsZVN0b3JlU2NlbmVEZXB0aCAvLyBDYW5ub3Qgc3RvcmUgTVMgZGVwdGgsIHJlc29sdmUgZGVwdGggaXMgYWxzbyBub3QgY3Jvc3MtcGxhdGZvcm1cclxuICAgICAgICAgICAgJiYgIXBpcGVsaW5lQ29uZmlncy5pc1dlYiAvLyBUT0RPKHpob3V6aGVuZ2xvbmcpOiByZW1vdmUgdGhpcyBjb25zdHJhaW50XHJcbiAgICAgICAgICAgICYmICFwaXBlbGluZUNvbmZpZ3MuaXNXZWJHTDE7XHJcblxyXG4gICAgICAgIC8vIEZvcndhcmQgcmVuZGVyaW5nIChEZXBlbmQgb24gTVNBQSBhbmQgVEJSKVxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3MuZW5hYmxlU2luZ2xlRm9yd2FyZFBhc3NcclxuICAgICAgICAgICAgPSBwaXBlbGluZUNvbmZpZ3MuaXNNb2JpbGUgfHwgY2FtZXJhQ29uZmlncy5lbmFibGVNU0FBO1xyXG5cclxuICAgICAgICArK2NhbWVyYUNvbmZpZ3MucmVtYWluaW5nUGFzc2VzO1xyXG4gICAgfVxyXG4gICAgd2luZG93UmVzaXplKFxyXG4gICAgICAgIHBwbDogcmVuZGVyaW5nLkJhc2ljUGlwZWxpbmUsXHJcbiAgICAgICAgcHBsQ29uZmlnczogUmVhZG9ubHk8UGlwZWxpbmVDb25maWdzPixcclxuICAgICAgICBjYW1lcmFDb25maWdzOiBSZWFkb25seTxDYW1lcmFDb25maWdzICYgRm9yd2FyZFBhc3NDb25maWdzPixcclxuICAgICAgICB3aW5kb3c6IHJlbmRlcmVyLlJlbmRlcldpbmRvdyxcclxuICAgICAgICBjYW1lcmE6IHJlbmRlcmVyLnNjZW5lLkNhbWVyYSxcclxuICAgICAgICBuYXRpdmVXaWR0aDogbnVtYmVyLFxyXG4gICAgICAgIG5hdGl2ZUhlaWdodDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgUmVzb3VyY2VGbGFncyA9IHJlbmRlcmluZy5SZXNvdXJjZUZsYWdzO1xyXG4gICAgICAgIGNvbnN0IFJlc291cmNlUmVzaWRlbmN5ID0gcmVuZGVyaW5nLlJlc291cmNlUmVzaWRlbmN5O1xyXG4gICAgICAgIGNvbnN0IGlkID0gd2luZG93LnJlbmRlcldpbmRvd0lkO1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gY2FtZXJhQ29uZmlncy5zZXR0aW5ncztcclxuXHJcbiAgICAgICAgY29uc3Qgd2lkdGggPSBjYW1lcmFDb25maWdzLmVuYWJsZVNoYWRpbmdTY2FsZVxyXG4gICAgICAgICAgICA/IE1hdGgubWF4KE1hdGguZmxvb3IobmF0aXZlV2lkdGggKiBjYW1lcmFDb25maWdzLnNoYWRpbmdTY2FsZSksIDEpXHJcbiAgICAgICAgICAgIDogbmF0aXZlV2lkdGg7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gY2FtZXJhQ29uZmlncy5lbmFibGVTaGFkaW5nU2NhbGVcclxuICAgICAgICAgICAgPyBNYXRoLm1heChNYXRoLmZsb29yKG5hdGl2ZUhlaWdodCAqIGNhbWVyYUNvbmZpZ3Muc2hhZGluZ1NjYWxlKSwgMSlcclxuICAgICAgICAgICAgOiBuYXRpdmVIZWlnaHQ7XHJcblxyXG4gICAgICAgIC8vIE1zYWFSYWRpYW5jZVxyXG4gICAgICAgIGlmIChjYW1lcmFDb25maWdzLmVuYWJsZU1TQUEpIHtcclxuICAgICAgICAgICAgLy8gTm90aWNlOiBXZSBuZXZlciBzdG9yZSBtdWx0aXNhbXBsZSByZXN1bHRzLlxyXG4gICAgICAgICAgICAvLyBUaGVzZSBzYW1wbGVzIGFyZSBhbHdheXMgcmVzb2x2ZWQgYW5kIGRpc2NhcmRlZCBhdCB0aGUgZW5kIG9mIHRoZSByZW5kZXIgcGFzcy5cclxuICAgICAgICAgICAgLy8gU28gdGhlIFJlc291cmNlUmVzaWRlbmN5IHNob3VsZCBiZSBNRU1PUllMRVNTLlxyXG4gICAgICAgICAgICBpZiAoY2FtZXJhQ29uZmlncy5lbmFibGVIRFIpIHtcclxuICAgICAgICAgICAgICAgIHBwbC5hZGRUZXh0dXJlKGBNc2FhUmFkaWFuY2Uke2lkfWAsIFRleHR1cmVUeXBlLlRFWDJELCBjYW1lcmFDb25maWdzLnJhZGlhbmNlRm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCAxLCAxLCAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm1zYWEuc2FtcGxlQ291bnQsIFJlc291cmNlRmxhZ3MuQ09MT1JfQVRUQUNITUVOVCwgUmVzb3VyY2VSZXNpZGVuY3kuTUVNT1JZTEVTUyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwcGwuYWRkVGV4dHVyZShgTXNhYVJhZGlhbmNlJHtpZH1gLCBUZXh0dXJlVHlwZS5URVgyRCwgRm9ybWF0LlJHQkE4LCB3aWR0aCwgaGVpZ2h0LCAxLCAxLCAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm1zYWEuc2FtcGxlQ291bnQsIFJlc291cmNlRmxhZ3MuQ09MT1JfQVRUQUNITUVOVCwgUmVzb3VyY2VSZXNpZGVuY3kuTUVNT1JZTEVTUyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHBsLmFkZFRleHR1cmUoYE1zYWFEZXB0aFN0ZW5jaWwke2lkfWAsIFRleHR1cmVUeXBlLlRFWDJELCBGb3JtYXQuREVQVEhfU1RFTkNJTCwgd2lkdGgsIGhlaWdodCwgMSwgMSwgMSxcclxuICAgICAgICAgICAgICAgIHNldHRpbmdzLm1zYWEuc2FtcGxlQ291bnQsIFJlc291cmNlRmxhZ3MuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULCBSZXNvdXJjZVJlc2lkZW5jeS5NRU1PUllMRVNTKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE1haW5saWdodCBTaGFkb3dNYXBcclxuICAgICAgICBwcGwuYWRkUmVuZGVyVGFyZ2V0KFxyXG4gICAgICAgICAgICBgU2hhZG93TWFwJHtpZH1gLFxyXG4gICAgICAgICAgICBwcGxDb25maWdzLnNoYWRvd01hcEZvcm1hdCxcclxuICAgICAgICAgICAgcHBsQ29uZmlncy5zaGFkb3dNYXBTaXplLngsXHJcbiAgICAgICAgICAgIHBwbENvbmZpZ3Muc2hhZG93TWFwU2l6ZS55LFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcHBsLmFkZERlcHRoU3RlbmNpbChcclxuICAgICAgICAgICAgYFNoYWRvd0RlcHRoJHtpZH1gLFxyXG4gICAgICAgICAgICBGb3JtYXQuREVQVEhfU1RFTkNJTCxcclxuICAgICAgICAgICAgcHBsQ29uZmlncy5zaGFkb3dNYXBTaXplLngsXHJcbiAgICAgICAgICAgIHBwbENvbmZpZ3Muc2hhZG93TWFwU2l6ZS55LFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIFNwb3QtbGlnaHQgc2hhZG93IG1hcHNcclxuICAgICAgICBpZiAoY2FtZXJhQ29uZmlncy5lbmFibGVTaW5nbGVGb3J3YXJkUGFzcykge1xyXG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IHBwbENvbmZpZ3MubW9iaWxlTWF4U3BvdExpZ2h0U2hhZG93TWFwcztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgIT09IGNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHBwbC5hZGRSZW5kZXJUYXJnZXQoXHJcbiAgICAgICAgICAgICAgICAgICAgYFNwb3RTaGFkb3dNYXAke2l9YCxcclxuICAgICAgICAgICAgICAgICAgICBwcGxDb25maWdzLnNoYWRvd01hcEZvcm1hdCxcclxuICAgICAgICAgICAgICAgICAgICBwcGxDb25maWdzLnNoYWRvd01hcFNpemUueCxcclxuICAgICAgICAgICAgICAgICAgICBwcGxDb25maWdzLnNoYWRvd01hcFNpemUueSxcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBwcGwuYWRkRGVwdGhTdGVuY2lsKFxyXG4gICAgICAgICAgICAgICAgICAgIGBTcG90U2hhZG93RGVwdGgke2l9YCxcclxuICAgICAgICAgICAgICAgICAgICBGb3JtYXQuREVQVEhfU1RFTkNJTCxcclxuICAgICAgICAgICAgICAgICAgICBwcGxDb25maWdzLnNoYWRvd01hcFNpemUueCxcclxuICAgICAgICAgICAgICAgICAgICBwcGxDb25maWdzLnNoYWRvd01hcFNpemUueSxcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzZXR1cChcclxuICAgICAgICBwcGw6IHJlbmRlcmluZy5CYXNpY1BpcGVsaW5lLFxyXG4gICAgICAgIHBwbENvbmZpZ3M6IFJlYWRvbmx5PFBpcGVsaW5lQ29uZmlncz4sXHJcbiAgICAgICAgY2FtZXJhQ29uZmlnczogQ2FtZXJhQ29uZmlncyAmIEZvcndhcmRQYXNzQ29uZmlncyxcclxuICAgICAgICBjYW1lcmE6IHJlbmRlcmVyLnNjZW5lLkNhbWVyYSxcclxuICAgICAgICBjb250ZXh0OiBQaXBlbGluZUNvbnRleHQpOiByZW5kZXJpbmcuQmFzaWNSZW5kZXJQYXNzQnVpbGRlciB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgY29uc3QgaWQgPSBjYW1lcmEud2luZG93LnJlbmRlcldpbmRvd0lkO1xyXG5cclxuICAgICAgICBjb25zdCBzY2VuZSA9IGNhbWVyYS5zY2VuZSE7XHJcbiAgICAgICAgY29uc3QgbWFpbkxpZ2h0ID0gc2NlbmUubWFpbkxpZ2h0O1xyXG5cclxuICAgICAgICAtLWNhbWVyYUNvbmZpZ3MucmVtYWluaW5nUGFzc2VzO1xyXG4gICAgICAgIGFzc2VydChjYW1lcmFDb25maWdzLnJlbWFpbmluZ1Bhc3NlcyA+PSAwKTtcclxuXHJcbiAgICAgICAgLy8gRm9yd2FyZCBMaWdodGluZyAoTGlnaHQgQ3VsbGluZylcclxuICAgICAgICB0aGlzLmZvcndhcmRMaWdodGluZy5jdWxsTGlnaHRzKHNjZW5lLCBjYW1lcmEuZnJ1c3R1bSk7XHJcblxyXG4gICAgICAgIC8vIE1haW4gRGlyZWN0aW9uYWwgbGlnaHQgQ1NNIFNoYWRvdyBNYXBcclxuICAgICAgICBpZiAoY2FtZXJhQ29uZmlncy5lbmFibGVNYWluTGlnaHRTaGFkb3dNYXApIHtcclxuICAgICAgICAgICAgYXNzZXJ0KCEhbWFpbkxpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy5fYWRkQ2FzY2FkZWRTaGFkb3dNYXBQYXNzKHBwbCwgcHBsQ29uZmlncywgaWQsIG1haW5MaWdodCwgY2FtZXJhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNwb3QgbGlnaHQgc2hhZG93IG1hcHMgKE1vYmlsZSBvciBNU0FBKVxyXG4gICAgICAgIGlmIChjYW1lcmFDb25maWdzLmVuYWJsZVNpbmdsZUZvcndhcmRQYXNzKSB7XHJcbiAgICAgICAgICAgIC8vIEN1cnJlbnRseSwgb25seSBzdXBwb3J0IDEgc3BvdCBsaWdodCB3aXRoIHNoYWRvdyBtYXAgb24gbW9iaWxlIHBsYXRmb3JtLlxyXG4gICAgICAgICAgICAvLyBUT0RPKHpob3V6aGVuZ2xvbmcpOiBSZWxleCB0aGlzIGxpbWl0YXRpb24uXHJcbiAgICAgICAgICAgIHRoaXMuZm9yd2FyZExpZ2h0aW5nLmFkZFNwb3RsaWdodFNoYWRvd1Bhc3NlcyhcclxuICAgICAgICAgICAgICAgIHBwbCwgY2FtZXJhLCBwcGxDb25maWdzLm1vYmlsZU1heFNwb3RMaWdodFNoYWRvd01hcHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdHJ5QWRkUmVmbGVjdGlvblByb2JlUGFzc2VzKHBwbCwgY2FtZXJhQ29uZmlncywgaWQsIG1haW5MaWdodCwgY2FtZXJhLnNjZW5lKTtcclxuXHJcbiAgICAgICAgaWYgKGNhbWVyYUNvbmZpZ3MucmVtYWluaW5nUGFzc2VzID4gMCB8fCBjYW1lcmFDb25maWdzLmVuYWJsZVNoYWRpbmdTY2FsZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmNvbG9yTmFtZSA9IGNhbWVyYUNvbmZpZ3MuZW5hYmxlU2hhZGluZ1NjYWxlXHJcbiAgICAgICAgICAgICAgICA/IGBTY2FsZWRSYWRpYW5jZTBfJHtpZH1gXHJcbiAgICAgICAgICAgICAgICA6IGBSYWRpYW5jZTBfJHtpZH1gO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRlcHRoU3RlbmNpbE5hbWUgPSBjYW1lcmFDb25maWdzLmVuYWJsZVNoYWRpbmdTY2FsZVxyXG4gICAgICAgICAgICAgICAgPyBgU2NhbGVkU2NlbmVEZXB0aF8ke2lkfWBcclxuICAgICAgICAgICAgICAgIDogYFNjZW5lRGVwdGhfJHtpZH1gO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuY29sb3JOYW1lID0gY2FtZXJhQ29uZmlncy5jb2xvck5hbWU7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZGVwdGhTdGVuY2lsTmFtZSA9IGNhbWVyYUNvbmZpZ3MuZGVwdGhTdGVuY2lsTmFtZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBhc3MgPSB0aGlzLl9hZGRGb3J3YXJkUmFkaWFuY2VQYXNzZXMoXHJcbiAgICAgICAgICAgIHBwbCwgcHBsQ29uZmlncywgY2FtZXJhQ29uZmlncywgaWQsIGNhbWVyYSxcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy53aWR0aCwgY2FtZXJhQ29uZmlncy5oZWlnaHQsIG1haW5MaWdodCxcclxuICAgICAgICAgICAgY29udGV4dC5jb2xvck5hbWUsIGNvbnRleHQuZGVwdGhTdGVuY2lsTmFtZSxcclxuICAgICAgICAgICAgIWNhbWVyYUNvbmZpZ3MuZW5hYmxlTVNBQSxcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5lbmFibGVTdG9yZVNjZW5lRGVwdGggPyBTdG9yZU9wLlNUT1JFIDogU3RvcmVPcC5ESVNDQVJEKTtcclxuXHJcbiAgICAgICAgaWYgKCFjYW1lcmFDb25maWdzLmVuYWJsZVN0b3JlU2NlbmVEZXB0aCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmRlcHRoU3RlbmNpbE5hbWUgPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjYW1lcmFDb25maWdzLnJlbWFpbmluZ1Bhc3NlcyA9PT0gMCAmJiBjYW1lcmFDb25maWdzLmVuYWJsZVNoYWRpbmdTY2FsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYWRkQ29weVRvU2NyZWVuUGFzcyhwcGwsIHBwbENvbmZpZ3MsIGNhbWVyYUNvbmZpZ3MsIGNvbnRleHQuY29sb3JOYW1lKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFzcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF9hZGRDYXNjYWRlZFNoYWRvd01hcFBhc3MoXHJcbiAgICAgICAgcHBsOiByZW5kZXJpbmcuQmFzaWNQaXBlbGluZSxcclxuICAgICAgICBwcGxDb25maWdzOiBSZWFkb25seTxQaXBlbGluZUNvbmZpZ3M+LFxyXG4gICAgICAgIGlkOiBudW1iZXIsXHJcbiAgICAgICAgbGlnaHQ6IHJlbmRlcmVyLnNjZW5lLkRpcmVjdGlvbmFsTGlnaHQsXHJcbiAgICAgICAgY2FtZXJhOiByZW5kZXJlci5zY2VuZS5DYW1lcmEsXHJcbiAgICApOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBRdWV1ZUhpbnQgPSByZW5kZXJpbmcuUXVldWVIaW50O1xyXG4gICAgICAgIGNvbnN0IFNjZW5lRmxhZ3MgPSByZW5kZXJpbmcuU2NlbmVGbGFncztcclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgLy8gRHluYW1pYyBzdGF0ZXNcclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgY29uc3Qgc2hhZG93U2l6ZSA9IHBwbC5waXBlbGluZVNjZW5lRGF0YS5zaGFkb3dzLnNpemU7XHJcbiAgICAgICAgY29uc3Qgd2lkdGggPSBzaGFkb3dTaXplLng7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gc2hhZG93U2l6ZS55O1xyXG5cclxuICAgICAgICBjb25zdCB2aWV3cG9ydCA9IHRoaXMuX3ZpZXdwb3J0O1xyXG4gICAgICAgIHZpZXdwb3J0LmxlZnQgPSB2aWV3cG9ydC50b3AgPSAwO1xyXG4gICAgICAgIHZpZXdwb3J0LndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdmlld3BvcnQuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgLy8gQ1NNIFNoYWRvdyBNYXBcclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgY29uc3QgcGFzcyA9IHBwbC5hZGRSZW5kZXJQYXNzKHdpZHRoLCBoZWlnaHQsICdkZWZhdWx0Jyk7XHJcbiAgICAgICAgcGFzcy5uYW1lID0gJ0Nhc2NhZGVkU2hhZG93TWFwJztcclxuICAgICAgICBwYXNzLmFkZFJlbmRlclRhcmdldChgU2hhZG93TWFwJHtpZH1gLCBMb2FkT3AuQ0xFQVIsIFN0b3JlT3AuU1RPUkUsIG5ldyBDb2xvcigxLCAxLCAxLCAxKSk7XHJcbiAgICAgICAgcGFzcy5hZGREZXB0aFN0ZW5jaWwoYFNoYWRvd0RlcHRoJHtpZH1gLCBMb2FkT3AuQ0xFQVIsIFN0b3JlT3AuRElTQ0FSRCk7XHJcbiAgICAgICAgY29uc3QgY3NtTGV2ZWwgPSBwcGwucGlwZWxpbmVTY2VuZURhdGEuY3NtU3VwcG9ydGVkID8gbGlnaHQuY3NtTGV2ZWwgOiAxO1xyXG5cclxuICAgICAgICAvLyBBZGQgc2hhZG93IG1hcCB2aWV3cG9ydHNcclxuICAgICAgICBmb3IgKGxldCBsZXZlbCA9IDA7IGxldmVsICE9PSBjc21MZXZlbDsgKytsZXZlbCkge1xyXG4gICAgICAgICAgICBnZXRDc21NYWluTGlnaHRWaWV3cG9ydChsaWdodCwgd2lkdGgsIGhlaWdodCwgbGV2ZWwsIHRoaXMuX3ZpZXdwb3J0LCBwcGxDb25maWdzLnNjcmVlblNwYWNlU2lnblkpO1xyXG4gICAgICAgICAgICBjb25zdCBxdWV1ZSA9IHBhc3MuYWRkUXVldWUoUXVldWVIaW50Lk5PTkUsICdzaGFkb3ctY2FzdGVyJyk7XHJcbiAgICAgICAgICAgIGlmICghcHBsQ29uZmlncy5pc1dlYkdQVSkgeyAvLyBUZW1wb3Jhcnkgd29ya2Fyb3VuZCBmb3IgV2ViR1BVXHJcbiAgICAgICAgICAgICAgICBxdWV1ZS5zZXRWaWV3cG9ydCh0aGlzLl92aWV3cG9ydCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcXVldWVcclxuICAgICAgICAgICAgICAgIC5hZGRTY2VuZShjYW1lcmEsIFNjZW5lRmxhZ3MuT1BBUVVFIHwgU2NlbmVGbGFncy5NQVNLIHwgU2NlbmVGbGFncy5TSEFET1dfQ0FTVEVSKVxyXG4gICAgICAgICAgICAgICAgLnVzZUxpZ2h0RnJ1c3R1bShsaWdodCwgbGV2ZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgX3RyeUFkZFJlZmxlY3Rpb25Qcm9iZVBhc3NlcyhcclxuICAgICAgICBwcGw6IHJlbmRlcmluZy5CYXNpY1BpcGVsaW5lLFxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3M6IFJlYWRvbmx5PENhbWVyYUNvbmZpZ3MgJiBGb3J3YXJkUGFzc0NvbmZpZ3M+LFxyXG4gICAgICAgIGlkOiBudW1iZXIsXHJcbiAgICAgICAgbWFpbkxpZ2h0OiByZW5kZXJlci5zY2VuZS5EaXJlY3Rpb25hbExpZ2h0IHwgbnVsbCxcclxuICAgICAgICBzY2VuZTogcmVuZGVyZXIuUmVuZGVyU2NlbmUgfCBudWxsLFxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcmVmbGVjdGlvblByb2JlTWFuYWdlciA9IGNjbGVnYWN5LmludGVybmFsLnJlZmxlY3Rpb25Qcm9iZU1hbmFnZXIgYXMgUmVmbGVjdGlvblByb2JlTWFuYWdlciB8IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAoIXJlZmxlY3Rpb25Qcm9iZU1hbmFnZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBSZXNvdXJjZVJlc2lkZW5jeSA9IHJlbmRlcmluZy5SZXNvdXJjZVJlc2lkZW5jeTtcclxuICAgICAgICBjb25zdCBwcm9iZXMgPSByZWZsZWN0aW9uUHJvYmVNYW5hZ2VyLmdldFByb2JlcygpO1xyXG4gICAgICAgIGNvbnN0IG1heFByb2JlQ291bnQgPSA0O1xyXG4gICAgICAgIGxldCBwcm9iZUlEID0gMDtcclxuICAgICAgICBmb3IgKGNvbnN0IHByb2JlIG9mIHByb2Jlcykge1xyXG4gICAgICAgICAgICBpZiAoIXByb2JlLm5lZWRSZW5kZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGFyZWEgPSBwcm9iZS5yZW5kZXJBcmVhKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gTWF0aC5tYXgoTWF0aC5mbG9vcihhcmVhLngpLCAxKTtcclxuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5tYXgoTWF0aC5mbG9vcihhcmVhLnkpLCAxKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwcm9iZS5wcm9iZVR5cGUgPT09IHJlbmRlcmVyLnNjZW5lLlByb2JlVHlwZS5QTEFOQVIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghY2FtZXJhQ29uZmlncy5lbmFibGVQbGFuYXJSZWZsZWN0aW9uUHJvYmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHdpbmRvdzogcmVuZGVyZXIuUmVuZGVyV2luZG93ID0gcHJvYmUucmVhbHRpbWVQbGFuYXJUZXh0dXJlIS53aW5kb3chO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29sb3JOYW1lID0gYFBsYW5hclByb2JlUlQke3Byb2JlSUR9YDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRlcHRoU3RlbmNpbE5hbWUgPSBgUGxhbmFyUHJvYmVEUyR7cHJvYmVJRH1gO1xyXG4gICAgICAgICAgICAgICAgLy8gUHJvYmVSZXNvdXJjZVxyXG4gICAgICAgICAgICAgICAgcHBsLmFkZFJlbmRlcldpbmRvdyhjb2xvck5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5yYWRpYW5jZUZvcm1hdCwgd2lkdGgsIGhlaWdodCwgd2luZG93KTtcclxuICAgICAgICAgICAgICAgIHBwbC5hZGREZXB0aFN0ZW5jaWwoZGVwdGhTdGVuY2lsTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBnZnguRm9ybWF0LkRFUFRIX1NURU5DSUwsIHdpZHRoLCBoZWlnaHQsIFJlc291cmNlUmVzaWRlbmN5Lk1FTU9SWUxFU1MpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJlbmRlcmluZ1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvYmVQYXNzID0gcHBsLmFkZFJlbmRlclBhc3Mod2lkdGgsIGhlaWdodCwgJ2RlZmF1bHQnKTtcclxuICAgICAgICAgICAgICAgIHByb2JlUGFzcy5uYW1lID0gYFBsYW5hclJlZmxlY3Rpb25Qcm9iZSR7cHJvYmVJRH1gO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYnVpbGRSZWZsZWN0aW9uUHJvYmVQYXNzKHByb2JlUGFzcywgY2FtZXJhQ29uZmlncywgaWQsIHByb2JlLmNhbWVyYSxcclxuICAgICAgICAgICAgICAgICAgICBjb2xvck5hbWUsIGRlcHRoU3RlbmNpbE5hbWUsIG1haW5MaWdodCwgc2NlbmUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKEVESVRPUikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZmFjZUlkeCA9IDA7IGZhY2VJZHggPCBwcm9iZS5iYWtlZEN1YmVUZXh0dXJlcy5sZW5ndGg7IGZhY2VJZHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2JlLnVwZGF0ZUNhbWVyYURpcihmYWNlSWR4KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3aW5kb3c6IHJlbmRlcmVyLlJlbmRlcldpbmRvdyA9IHByb2JlLmJha2VkQ3ViZVRleHR1cmVzW2ZhY2VJZHhdLndpbmRvdyE7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sb3JOYW1lID0gYEN1YmVQcm9iZVJUJHtwcm9iZUlEfSR7ZmFjZUlkeH1gO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlcHRoU3RlbmNpbE5hbWUgPSBgQ3ViZVByb2JlRFMke3Byb2JlSUR9JHtmYWNlSWR4fWA7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJvYmVSZXNvdXJjZVxyXG4gICAgICAgICAgICAgICAgICAgIHBwbC5hZGRSZW5kZXJXaW5kb3coY29sb3JOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW1lcmFDb25maWdzLnJhZGlhbmNlRm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCB3aW5kb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBwbC5hZGREZXB0aFN0ZW5jaWwoZGVwdGhTdGVuY2lsTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2Z4LkZvcm1hdC5ERVBUSF9TVEVOQ0lMLCB3aWR0aCwgaGVpZ2h0LCBSZXNvdXJjZVJlc2lkZW5jeS5NRU1PUllMRVNTKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVuZGVyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvYmVQYXNzID0gcHBsLmFkZFJlbmRlclBhc3Mod2lkdGgsIGhlaWdodCwgJ2RlZmF1bHQnKTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9iZVBhc3MubmFtZSA9IGBDdWJlUHJvYmUke3Byb2JlSUR9JHtmYWNlSWR4fWA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYnVpbGRSZWZsZWN0aW9uUHJvYmVQYXNzKHByb2JlUGFzcywgY2FtZXJhQ29uZmlncywgaWQsIHByb2JlLmNhbWVyYSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JOYW1lLCBkZXB0aFN0ZW5jaWxOYW1lLCBtYWluTGlnaHQsIHNjZW5lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHByb2JlLm5lZWRSZW5kZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICArK3Byb2JlSUQ7XHJcbiAgICAgICAgICAgIGlmIChwcm9iZUlEID09PSBtYXhQcm9iZUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgX2J1aWxkUmVmbGVjdGlvblByb2JlUGFzcyhcclxuICAgICAgICBwYXNzOiByZW5kZXJpbmcuQmFzaWNSZW5kZXJQYXNzQnVpbGRlcixcclxuICAgICAgICBjYW1lcmFDb25maWdzOiBSZWFkb25seTxDYW1lcmFDb25maWdzICYgRm9yd2FyZFBhc3NDb25maWdzPixcclxuICAgICAgICBpZDogbnVtYmVyLFxyXG4gICAgICAgIGNhbWVyYTogcmVuZGVyZXIuc2NlbmUuQ2FtZXJhLFxyXG4gICAgICAgIGNvbG9yTmFtZTogc3RyaW5nLFxyXG4gICAgICAgIGRlcHRoU3RlbmNpbE5hbWU6IHN0cmluZyxcclxuICAgICAgICBtYWluTGlnaHQ6IHJlbmRlcmVyLnNjZW5lLkRpcmVjdGlvbmFsTGlnaHQgfCBudWxsLFxyXG4gICAgICAgIHNjZW5lOiByZW5kZXJlci5SZW5kZXJTY2VuZSB8IG51bGwgPSBudWxsLFxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgUXVldWVIaW50ID0gcmVuZGVyaW5nLlF1ZXVlSGludDtcclxuICAgICAgICBjb25zdCBTY2VuZUZsYWdzID0gcmVuZGVyaW5nLlNjZW5lRmxhZ3M7XHJcbiAgICAgICAgLy8gc2V0IHZpZXdwb3J0XHJcbiAgICAgICAgY29uc3QgY29sb3JTdG9yZU9wID0gY2FtZXJhQ29uZmlncy5lbmFibGVNU0FBID8gU3RvcmVPcC5ESVNDQVJEIDogU3RvcmVPcC5TVE9SRTtcclxuXHJcbiAgICAgICAgLy8gYmluZCBvdXRwdXQgcmVuZGVyIHRhcmdldFxyXG4gICAgICAgIGlmIChmb3J3YXJkTmVlZENsZWFyQ29sb3IoY2FtZXJhKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9yZWZsZWN0aW9uUHJvYmVDbGVhckNvbG9yLnggPSBjYW1lcmEuY2xlYXJDb2xvci54O1xyXG4gICAgICAgICAgICB0aGlzLl9yZWZsZWN0aW9uUHJvYmVDbGVhckNvbG9yLnkgPSBjYW1lcmEuY2xlYXJDb2xvci55O1xyXG4gICAgICAgICAgICB0aGlzLl9yZWZsZWN0aW9uUHJvYmVDbGVhckNvbG9yLnogPSBjYW1lcmEuY2xlYXJDb2xvci56O1xyXG4gICAgICAgICAgICBjb25zdCBjbGVhckNvbG9yID0gcmVuZGVyaW5nLnBhY2tSR0JFKHRoaXMuX3JlZmxlY3Rpb25Qcm9iZUNsZWFyQ29sb3IpO1xyXG4gICAgICAgICAgICB0aGlzLl9jbGVhckNvbG9yLnggPSBjbGVhckNvbG9yLng7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsZWFyQ29sb3IueSA9IGNsZWFyQ29sb3IueTtcclxuICAgICAgICAgICAgdGhpcy5fY2xlYXJDb2xvci56ID0gY2xlYXJDb2xvci56O1xyXG4gICAgICAgICAgICB0aGlzLl9jbGVhckNvbG9yLncgPSBjbGVhckNvbG9yLnc7XHJcbiAgICAgICAgICAgIHBhc3MuYWRkUmVuZGVyVGFyZ2V0KGNvbG9yTmFtZSwgTG9hZE9wLkNMRUFSLCBjb2xvclN0b3JlT3AsIHRoaXMuX2NsZWFyQ29sb3IpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBhc3MuYWRkUmVuZGVyVGFyZ2V0KGNvbG9yTmFtZSwgTG9hZE9wLkxPQUQsIGNvbG9yU3RvcmVPcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBiaW5kIGRlcHRoIHN0ZW5jaWwgYnVmZmVyXHJcbiAgICAgICAgaWYgKGNhbWVyYS5jbGVhckZsYWcgJiBDbGVhckZsYWdCaXQuREVQVEhfU1RFTkNJTCkge1xyXG4gICAgICAgICAgICBwYXNzLmFkZERlcHRoU3RlbmNpbChcclxuICAgICAgICAgICAgICAgIGRlcHRoU3RlbmNpbE5hbWUsXHJcbiAgICAgICAgICAgICAgICBMb2FkT3AuQ0xFQVIsXHJcbiAgICAgICAgICAgICAgICBTdG9yZU9wLkRJU0NBUkQsXHJcbiAgICAgICAgICAgICAgICBjYW1lcmEuY2xlYXJEZXB0aCxcclxuICAgICAgICAgICAgICAgIGNhbWVyYS5jbGVhclN0ZW5jaWwsXHJcbiAgICAgICAgICAgICAgICBjYW1lcmEuY2xlYXJGbGFnICYgQ2xlYXJGbGFnQml0LkRFUFRIX1NURU5DSUwsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGFzcy5hZGREZXB0aFN0ZW5jaWwoZGVwdGhTdGVuY2lsTmFtZSwgTG9hZE9wLkxPQUQsIFN0b3JlT3AuRElTQ0FSRCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTZXQgc2hhZG93IG1hcCBpZiBlbmFibGVkXHJcbiAgICAgICAgaWYgKGNhbWVyYUNvbmZpZ3MuZW5hYmxlTWFpbkxpZ2h0U2hhZG93TWFwKSB7XHJcbiAgICAgICAgICAgIHBhc3MuYWRkVGV4dHVyZShgU2hhZG93TWFwJHtpZH1gLCAnY2Nfc2hhZG93TWFwJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUT0RPKHpob3V6aGVuZ2xvbmcpOiBTZXBhcmF0ZSBPUEFRVUUgYW5kIE1BU0sgcXVldWVcclxuXHJcbiAgICAgICAgLy8gYWRkIG9wYXF1ZSBhbmQgbWFzayBxdWV1ZVxyXG4gICAgICAgIHBhc3MuYWRkUXVldWUoUXVldWVIaW50Lk5PTkUsICdyZWZsZWN0LW1hcCcpIC8vIEN1cnJlbnRseSB3ZSBwdXQgT1BBUVVFIGFuZCBNQVNLIGludG8gb25lIHF1ZXVlLCBzbyBRdWV1ZUhpbnQgaXMgTk9ORVxyXG4gICAgICAgICAgICAuYWRkU2NlbmUoY2FtZXJhLFxyXG4gICAgICAgICAgICAgICAgU2NlbmVGbGFncy5PUEFRVUUgfCBTY2VuZUZsYWdzLk1BU0sgfCBTY2VuZUZsYWdzLlJFRkxFQ1RJT05fUFJPQkUsXHJcbiAgICAgICAgICAgICAgICBtYWluTGlnaHQgfHwgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgc2NlbmUgPyBzY2VuZSA6IHVuZGVmaW5lZCk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF9hZGRGb3J3YXJkUmFkaWFuY2VQYXNzZXMoXHJcbiAgICAgICAgcHBsOiByZW5kZXJpbmcuQmFzaWNQaXBlbGluZSxcclxuICAgICAgICBwcGxDb25maWdzOiBSZWFkb25seTxQaXBlbGluZUNvbmZpZ3M+LFxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3M6IFJlYWRvbmx5PENhbWVyYUNvbmZpZ3MgJiBGb3J3YXJkUGFzc0NvbmZpZ3M+LFxyXG4gICAgICAgIGlkOiBudW1iZXIsXHJcbiAgICAgICAgY2FtZXJhOiByZW5kZXJlci5zY2VuZS5DYW1lcmEsXHJcbiAgICAgICAgd2lkdGg6IG51bWJlcixcclxuICAgICAgICBoZWlnaHQ6IG51bWJlcixcclxuICAgICAgICBtYWluTGlnaHQ6IHJlbmRlcmVyLnNjZW5lLkRpcmVjdGlvbmFsTGlnaHQgfCBudWxsLFxyXG4gICAgICAgIGNvbG9yTmFtZTogc3RyaW5nLFxyXG4gICAgICAgIGRlcHRoU3RlbmNpbE5hbWU6IHN0cmluZyxcclxuICAgICAgICBkaXNhYmxlTVNBQTogYm9vbGVhbiA9IGZhbHNlLFxyXG4gICAgICAgIGRlcHRoU3RlbmNpbFN0b3JlT3A6IGdmeC5TdG9yZU9wID0gU3RvcmVPcC5ESVNDQVJELFxyXG4gICAgKTogcmVuZGVyaW5nLkJhc2ljUmVuZGVyUGFzc0J1aWxkZXIge1xyXG4gICAgICAgIGNvbnN0IFF1ZXVlSGludCA9IHJlbmRlcmluZy5RdWV1ZUhpbnQ7XHJcbiAgICAgICAgY29uc3QgU2NlbmVGbGFncyA9IHJlbmRlcmluZy5TY2VuZUZsYWdzO1xyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAvLyBEeW5hbWljIHN0YXRlc1xyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAvLyBQcmVwYXJlIGNhbWVyYSBjbGVhciBjb2xvclxyXG4gICAgICAgIGNvbnN0IGNsZWFyQ29sb3IgPSBjYW1lcmEuY2xlYXJDb2xvcjsgLy8gUmVkdWNlIEMrKy9UUyBpbnRlcm9wXHJcbiAgICAgICAgdGhpcy5fY2xlYXJDb2xvci54ID0gY2xlYXJDb2xvci54O1xyXG4gICAgICAgIHRoaXMuX2NsZWFyQ29sb3IueSA9IGNsZWFyQ29sb3IueTtcclxuICAgICAgICB0aGlzLl9jbGVhckNvbG9yLnogPSBjbGVhckNvbG9yLno7XHJcbiAgICAgICAgdGhpcy5fY2xlYXJDb2xvci53ID0gY2xlYXJDb2xvci53O1xyXG5cclxuICAgICAgICAvLyBQcmVwYXJlIGNhbWVyYSB2aWV3cG9ydFxyXG4gICAgICAgIGNvbnN0IHZpZXdwb3J0ID0gY2FtZXJhLnZpZXdwb3J0OyAvLyBSZWR1Y2UgQysrL1RTIGludGVyb3BcclxuICAgICAgICB0aGlzLl92aWV3cG9ydC5sZWZ0ID0gTWF0aC5yb3VuZCh2aWV3cG9ydC54ICogd2lkdGgpO1xyXG4gICAgICAgIHRoaXMuX3ZpZXdwb3J0LnRvcCA9IE1hdGgucm91bmQodmlld3BvcnQueSAqIGhlaWdodCk7XHJcbiAgICAgICAgLy8gSGVyZSB3ZSBtdXN0IHVzZSBjYW1lcmEudmlld3BvcnQud2lkdGggaW5zdGVhZCBvZiBjYW1lcmEudmlld3BvcnQueiwgd2hpY2hcclxuICAgICAgICAvLyBpcyB1bmRlZmluZWQgb24gbmF0aXZlIHBsYXRmb3JtLiBUaGUgc2FtZSBhcyBjYW1lcmEudmlld3BvcnQuaGVpZ2h0LlxyXG4gICAgICAgIHRoaXMuX3ZpZXdwb3J0LndpZHRoID0gTWF0aC5tYXgoTWF0aC5yb3VuZCh2aWV3cG9ydC53aWR0aCAqIHdpZHRoKSwgMSk7XHJcbiAgICAgICAgdGhpcy5fdmlld3BvcnQuaGVpZ2h0ID0gTWF0aC5tYXgoTWF0aC5yb3VuZCh2aWV3cG9ydC5oZWlnaHQgKiBoZWlnaHQpLCAxKTtcclxuXHJcbiAgICAgICAgLy8gTVNBQVxyXG4gICAgICAgIGNvbnN0IGVuYWJsZU1TQUEgPSAhZGlzYWJsZU1TQUEgJiYgY2FtZXJhQ29uZmlncy5lbmFibGVNU0FBO1xyXG4gICAgICAgIGFzc2VydCghZW5hYmxlTVNBQSB8fCBjYW1lcmFDb25maWdzLmVuYWJsZVNpbmdsZUZvcndhcmRQYXNzKTtcclxuXHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIC8vIEZvcndhcmQgTGlnaHRpbmcgKE1haW4gRGlyZWN0aW9uYWwgTGlnaHQpXHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIGNvbnN0IHBhc3MgPSBjYW1lcmFDb25maWdzLmVuYWJsZVNpbmdsZUZvcndhcmRQYXNzXHJcbiAgICAgICAgICAgID8gdGhpcy5fYWRkRm9yd2FyZFNpbmdsZVJhZGlhbmNlUGFzcyhwcGwsIHBwbENvbmZpZ3MsIGNhbWVyYUNvbmZpZ3MsXHJcbiAgICAgICAgICAgICAgICBpZCwgY2FtZXJhLCBlbmFibGVNU0FBLCB3aWR0aCwgaGVpZ2h0LCBtYWluTGlnaHQsXHJcbiAgICAgICAgICAgICAgICBjb2xvck5hbWUsIGRlcHRoU3RlbmNpbE5hbWUsIGRlcHRoU3RlbmNpbFN0b3JlT3ApXHJcbiAgICAgICAgICAgIDogdGhpcy5fYWRkRm9yd2FyZE11bHRpcGxlUmFkaWFuY2VQYXNzZXMocHBsLCBjYW1lcmFDb25maWdzLFxyXG4gICAgICAgICAgICAgICAgaWQsIGNhbWVyYSwgd2lkdGgsIGhlaWdodCwgbWFpbkxpZ2h0LFxyXG4gICAgICAgICAgICAgICAgY29sb3JOYW1lLCBkZXB0aFN0ZW5jaWxOYW1lLCBkZXB0aFN0ZW5jaWxTdG9yZU9wKTtcclxuXHJcbiAgICAgICAgLy8gUGxhbmFyIFNoYWRvd1xyXG4gICAgICAgIGlmIChjYW1lcmFDb25maWdzLmVuYWJsZU1haW5MaWdodFBsYW5hclNoYWRvd01hcCkge1xyXG4gICAgICAgICAgICB0aGlzLl9hZGRQbGFuYXJTaGFkb3dRdWV1ZShjYW1lcmEsIG1haW5MaWdodCwgcGFzcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgLy8gRm9yd2FyZCBMaWdodGluZyAoQmxlbmQpXHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIC8vIEFkZCB0cmFuc3BhcmVudCBxdWV1ZVxyXG5cclxuICAgICAgICBjb25zdCBzY2VuZUZsYWdzID0gU2NlbmVGbGFncy5CTEVORCB8XHJcbiAgICAgICAgICAgIChjYW1lcmEuZ2VvbWV0cnlSZW5kZXJlclxyXG4gICAgICAgICAgICAgICAgPyBTY2VuZUZsYWdzLkdFT01FVFJZXHJcbiAgICAgICAgICAgICAgICA6IFNjZW5lRmxhZ3MuTk9ORSk7XHJcblxyXG4gICAgICAgIHBhc3NcclxuICAgICAgICAgICAgLmFkZFF1ZXVlKFF1ZXVlSGludC5CTEVORClcclxuICAgICAgICAgICAgLmFkZFNjZW5lKGNhbWVyYSwgc2NlbmVGbGFncywgbWFpbkxpZ2h0IHx8IHVuZGVmaW5lZCk7XHJcblxyXG4gICAgICAgIHJldHVybiBwYXNzO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBfYWRkRm9yd2FyZFNpbmdsZVJhZGlhbmNlUGFzcyhcclxuICAgICAgICBwcGw6IHJlbmRlcmluZy5CYXNpY1BpcGVsaW5lLFxyXG4gICAgICAgIHBwbENvbmZpZ3M6IFJlYWRvbmx5PFBpcGVsaW5lQ29uZmlncz4sXHJcbiAgICAgICAgY2FtZXJhQ29uZmlnczogUmVhZG9ubHk8Q2FtZXJhQ29uZmlncyAmIEZvcndhcmRQYXNzQ29uZmlncz4sXHJcbiAgICAgICAgaWQ6IG51bWJlcixcclxuICAgICAgICBjYW1lcmE6IHJlbmRlcmVyLnNjZW5lLkNhbWVyYSxcclxuICAgICAgICBlbmFibGVNU0FBOiBib29sZWFuLFxyXG4gICAgICAgIHdpZHRoOiBudW1iZXIsXHJcbiAgICAgICAgaGVpZ2h0OiBudW1iZXIsXHJcbiAgICAgICAgbWFpbkxpZ2h0OiByZW5kZXJlci5zY2VuZS5EaXJlY3Rpb25hbExpZ2h0IHwgbnVsbCxcclxuICAgICAgICBjb2xvck5hbWU6IHN0cmluZyxcclxuICAgICAgICBkZXB0aFN0ZW5jaWxOYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgZGVwdGhTdGVuY2lsU3RvcmVPcDogZ2Z4LlN0b3JlT3BcclxuICAgICk6IHJlbmRlcmluZy5CYXNpY1JlbmRlclBhc3NCdWlsZGVyIHtcclxuICAgICAgICBhc3NlcnQoY2FtZXJhQ29uZmlncy5lbmFibGVTaW5nbGVGb3J3YXJkUGFzcyk7XHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIC8vIEZvcndhcmQgTGlnaHRpbmcgKE1haW4gRGlyZWN0aW9uYWwgTGlnaHQpXHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIGxldCBwYXNzOiByZW5kZXJpbmcuQmFzaWNSZW5kZXJQYXNzQnVpbGRlcjtcclxuICAgICAgICBpZiAoZW5hYmxlTVNBQSkge1xyXG4gICAgICAgICAgICBjb25zdCBtc2FhUmFkaWFuY2VOYW1lID0gYE1zYWFSYWRpYW5jZSR7aWR9YDtcclxuICAgICAgICAgICAgY29uc3QgbXNhYURlcHRoU3RlbmNpbE5hbWUgPSBgTXNhYURlcHRoU3RlbmNpbCR7aWR9YDtcclxuICAgICAgICAgICAgY29uc3Qgc2FtcGxlQ291bnQgPSBjYW1lcmFDb25maWdzLnNldHRpbmdzLm1zYWEuc2FtcGxlQ291bnQ7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtc1Bhc3MgPSBwcGwuYWRkTXVsdGlzYW1wbGVSZW5kZXJQYXNzKHdpZHRoLCBoZWlnaHQsIHNhbXBsZUNvdW50LCAwLCAnZGVmYXVsdCcpO1xyXG4gICAgICAgICAgICBtc1Bhc3MubmFtZSA9ICdNc2FhRm9yd2FyZFBhc3MnO1xyXG5cclxuICAgICAgICAgICAgLy8gTVNBQSBhbHdheXMgZGlzY2FyZHMgZGVwdGggc3RlbmNpbFxyXG4gICAgICAgICAgICB0aGlzLl9idWlsZEZvcndhcmRNYWluTGlnaHRQYXNzKG1zUGFzcywgY2FtZXJhQ29uZmlncywgaWQsIGNhbWVyYSxcclxuICAgICAgICAgICAgICAgIG1zYWFSYWRpYW5jZU5hbWUsIG1zYWFEZXB0aFN0ZW5jaWxOYW1lLCBTdG9yZU9wLkRJU0NBUkQsIG1haW5MaWdodCk7XHJcblxyXG4gICAgICAgICAgICBtc1Bhc3MucmVzb2x2ZVJlbmRlclRhcmdldChtc2FhUmFkaWFuY2VOYW1lLCBjb2xvck5hbWUpO1xyXG5cclxuICAgICAgICAgICAgcGFzcyA9IG1zUGFzcztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwYXNzID0gcHBsLmFkZFJlbmRlclBhc3Mod2lkdGgsIGhlaWdodCwgJ2RlZmF1bHQnKTtcclxuICAgICAgICAgICAgcGFzcy5uYW1lID0gJ0ZvcndhcmRQYXNzJztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkRm9yd2FyZE1haW5MaWdodFBhc3MocGFzcywgY2FtZXJhQ29uZmlncywgaWQsIGNhbWVyYSxcclxuICAgICAgICAgICAgICAgIGNvbG9yTmFtZSwgZGVwdGhTdGVuY2lsTmFtZSwgZGVwdGhTdGVuY2lsU3RvcmVPcCwgbWFpbkxpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXNzZXJ0KHBhc3MgIT09IHVuZGVmaW5lZCk7XHJcblxyXG4gICAgICAgIC8vIEZvcndhcmQgTGlnaHRpbmcgKEFkZGl0aXZlIExpZ2h0cylcclxuICAgICAgICB0aGlzLmZvcndhcmRMaWdodGluZy5hZGRMaWdodFF1ZXVlcyhcclxuICAgICAgICAgICAgcGFzcyxcclxuICAgICAgICAgICAgY2FtZXJhLFxyXG4gICAgICAgICAgICBwcGxDb25maWdzLm1vYmlsZU1heFNwb3RMaWdodFNoYWRvd01hcHMsXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHBhc3M7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF9hZGRGb3J3YXJkTXVsdGlwbGVSYWRpYW5jZVBhc3NlcyhcclxuICAgICAgICBwcGw6IHJlbmRlcmluZy5CYXNpY1BpcGVsaW5lLFxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3M6IFJlYWRvbmx5PENhbWVyYUNvbmZpZ3MgJiBGb3J3YXJkUGFzc0NvbmZpZ3M+LFxyXG4gICAgICAgIGlkOiBudW1iZXIsXHJcbiAgICAgICAgY2FtZXJhOiByZW5kZXJlci5zY2VuZS5DYW1lcmEsXHJcbiAgICAgICAgd2lkdGg6IG51bWJlcixcclxuICAgICAgICBoZWlnaHQ6IG51bWJlcixcclxuICAgICAgICBtYWluTGlnaHQ6IHJlbmRlcmVyLnNjZW5lLkRpcmVjdGlvbmFsTGlnaHQgfCBudWxsLFxyXG4gICAgICAgIGNvbG9yTmFtZTogc3RyaW5nLFxyXG4gICAgICAgIGRlcHRoU3RlbmNpbE5hbWU6IHN0cmluZyxcclxuICAgICAgICBkZXB0aFN0ZW5jaWxTdG9yZU9wOiBnZnguU3RvcmVPcFxyXG4gICAgKTogcmVuZGVyaW5nLkJhc2ljUmVuZGVyUGFzc0J1aWxkZXIge1xyXG4gICAgICAgIGFzc2VydCghY2FtZXJhQ29uZmlncy5lbmFibGVTaW5nbGVGb3J3YXJkUGFzcyk7XHJcblxyXG4gICAgICAgIC8vIEZvcndhcmQgTGlnaHRpbmcgKE1haW4gRGlyZWN0aW9uYWwgTGlnaHQpXHJcbiAgICAgICAgbGV0IHBhc3MgPSBwcGwuYWRkUmVuZGVyUGFzcyh3aWR0aCwgaGVpZ2h0LCAnZGVmYXVsdCcpO1xyXG4gICAgICAgIHBhc3MubmFtZSA9ICdGb3J3YXJkUGFzcyc7XHJcblxyXG4gICAgICAgIGNvbnN0IGZpcnN0U3RvcmVPcCA9IHRoaXMuZm9yd2FyZExpZ2h0aW5nLmlzTXVsdGlwbGVMaWdodFBhc3Nlc05lZWRlZCgpXHJcbiAgICAgICAgICAgID8gU3RvcmVPcC5TVE9SRVxyXG4gICAgICAgICAgICA6IGRlcHRoU3RlbmNpbFN0b3JlT3A7XHJcblxyXG4gICAgICAgIHRoaXMuX2J1aWxkRm9yd2FyZE1haW5MaWdodFBhc3MocGFzcywgY2FtZXJhQ29uZmlncyxcclxuICAgICAgICAgICAgaWQsIGNhbWVyYSwgY29sb3JOYW1lLCBkZXB0aFN0ZW5jaWxOYW1lLCBmaXJzdFN0b3JlT3AsIG1haW5MaWdodCk7XHJcblxyXG4gICAgICAgIC8vIEZvcndhcmQgTGlnaHRpbmcgKEFkZGl0aXZlIExpZ2h0cylcclxuICAgICAgICBwYXNzID0gdGhpcy5mb3J3YXJkTGlnaHRpbmdcclxuICAgICAgICAgICAgLmFkZExpZ2h0UGFzc2VzKGNvbG9yTmFtZSwgZGVwdGhTdGVuY2lsTmFtZSwgZGVwdGhTdGVuY2lsU3RvcmVPcCxcclxuICAgICAgICAgICAgICAgIGlkLCB3aWR0aCwgaGVpZ2h0LCBjYW1lcmEsIHRoaXMuX3ZpZXdwb3J0LCBwcGwsIHBhc3MpO1xyXG5cclxuICAgICAgICByZXR1cm4gcGFzcztcclxuICAgIH1cclxuICAgIHByaXZhdGUgX2J1aWxkRm9yd2FyZE1haW5MaWdodFBhc3MoXHJcbiAgICAgICAgcGFzczogcmVuZGVyaW5nLkJhc2ljUmVuZGVyUGFzc0J1aWxkZXIsXHJcbiAgICAgICAgY2FtZXJhQ29uZmlnczogUmVhZG9ubHk8Q2FtZXJhQ29uZmlncyAmIEZvcndhcmRQYXNzQ29uZmlncz4sXHJcbiAgICAgICAgaWQ6IG51bWJlcixcclxuICAgICAgICBjYW1lcmE6IHJlbmRlcmVyLnNjZW5lLkNhbWVyYSxcclxuICAgICAgICBjb2xvck5hbWU6IHN0cmluZyxcclxuICAgICAgICBkZXB0aFN0ZW5jaWxOYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgZGVwdGhTdGVuY2lsU3RvcmVPcDogZ2Z4LlN0b3JlT3AsXHJcbiAgICAgICAgbWFpbkxpZ2h0OiByZW5kZXJlci5zY2VuZS5EaXJlY3Rpb25hbExpZ2h0IHwgbnVsbCxcclxuICAgICAgICBzY2VuZTogcmVuZGVyZXIuUmVuZGVyU2NlbmUgfCBudWxsID0gbnVsbCxcclxuICAgICk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IFF1ZXVlSGludCA9IHJlbmRlcmluZy5RdWV1ZUhpbnQ7XHJcbiAgICAgICAgY29uc3QgU2NlbmVGbGFncyA9IHJlbmRlcmluZy5TY2VuZUZsYWdzO1xyXG4gICAgICAgIC8vIHNldCB2aWV3cG9ydFxyXG4gICAgICAgIHBhc3Muc2V0Vmlld3BvcnQodGhpcy5fdmlld3BvcnQpO1xyXG5cclxuICAgICAgICBjb25zdCBjb2xvclN0b3JlT3AgPSBjYW1lcmFDb25maWdzLmVuYWJsZU1TQUEgPyBTdG9yZU9wLkRJU0NBUkQgOiBTdG9yZU9wLlNUT1JFO1xyXG5cclxuICAgICAgICAvLyBiaW5kIG91dHB1dCByZW5kZXIgdGFyZ2V0XHJcbiAgICAgICAgaWYgKGZvcndhcmROZWVkQ2xlYXJDb2xvcihjYW1lcmEpKSB7XHJcbiAgICAgICAgICAgIHBhc3MuYWRkUmVuZGVyVGFyZ2V0KGNvbG9yTmFtZSwgTG9hZE9wLkNMRUFSLCBjb2xvclN0b3JlT3AsIHRoaXMuX2NsZWFyQ29sb3IpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBhc3MuYWRkUmVuZGVyVGFyZ2V0KGNvbG9yTmFtZSwgTG9hZE9wLkxPQUQsIGNvbG9yU3RvcmVPcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBiaW5kIGRlcHRoIHN0ZW5jaWwgYnVmZmVyXHJcbiAgICAgICAgaWYgKERFQlVHKSB7XHJcbiAgICAgICAgICAgIGlmIChjb2xvck5hbWUgPT09IGNhbWVyYUNvbmZpZ3MuY29sb3JOYW1lICYmXHJcbiAgICAgICAgICAgICAgICBkZXB0aFN0ZW5jaWxOYW1lICE9PSBjYW1lcmFDb25maWdzLmRlcHRoU3RlbmNpbE5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJ0RlZmF1bHQgZnJhbWVidWZmZXIgY2Fubm90IHVzZSBjdXN0b20gZGVwdGggc3RlbmNpbCBidWZmZXInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNhbWVyYS5jbGVhckZsYWcgJiBDbGVhckZsYWdCaXQuREVQVEhfU1RFTkNJTCkge1xyXG4gICAgICAgICAgICBwYXNzLmFkZERlcHRoU3RlbmNpbChcclxuICAgICAgICAgICAgICAgIGRlcHRoU3RlbmNpbE5hbWUsXHJcbiAgICAgICAgICAgICAgICBMb2FkT3AuQ0xFQVIsXHJcbiAgICAgICAgICAgICAgICBkZXB0aFN0ZW5jaWxTdG9yZU9wLFxyXG4gICAgICAgICAgICAgICAgY2FtZXJhLmNsZWFyRGVwdGgsXHJcbiAgICAgICAgICAgICAgICBjYW1lcmEuY2xlYXJTdGVuY2lsLFxyXG4gICAgICAgICAgICAgICAgY2FtZXJhLmNsZWFyRmxhZyAmIENsZWFyRmxhZ0JpdC5ERVBUSF9TVEVOQ0lMLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBhc3MuYWRkRGVwdGhTdGVuY2lsKGRlcHRoU3RlbmNpbE5hbWUsIExvYWRPcC5MT0FELCBkZXB0aFN0ZW5jaWxTdG9yZU9wKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNldCBzaGFkb3cgbWFwIGlmIGVuYWJsZWRcclxuICAgICAgICBpZiAoY2FtZXJhQ29uZmlncy5lbmFibGVNYWluTGlnaHRTaGFkb3dNYXApIHtcclxuICAgICAgICAgICAgcGFzcy5hZGRUZXh0dXJlKGBTaGFkb3dNYXAke2lkfWAsICdjY19zaGFkb3dNYXAnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRPRE8oemhvdXpoZW5nbG9uZyk6IFNlcGFyYXRlIE9QQVFVRSBhbmQgTUFTSyBxdWV1ZVxyXG5cclxuICAgICAgICAvLyBhZGQgb3BhcXVlIGFuZCBtYXNrIHF1ZXVlXHJcbiAgICAgICAgcGFzcy5hZGRRdWV1ZShRdWV1ZUhpbnQuTk9ORSkgLy8gQ3VycmVudGx5IHdlIHB1dCBPUEFRVUUgYW5kIE1BU0sgaW50byBvbmUgcXVldWUsIHNvIFF1ZXVlSGludCBpcyBOT05FXHJcbiAgICAgICAgICAgIC5hZGRTY2VuZShjYW1lcmEsXHJcbiAgICAgICAgICAgICAgICBTY2VuZUZsYWdzLk9QQVFVRSB8IFNjZW5lRmxhZ3MuTUFTSyxcclxuICAgICAgICAgICAgICAgIG1haW5MaWdodCB8fCB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBzY2VuZSA/IHNjZW5lIDogdW5kZWZpbmVkKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgX2FkZFBsYW5hclNoYWRvd1F1ZXVlKFxyXG4gICAgICAgIGNhbWVyYTogcmVuZGVyZXIuc2NlbmUuQ2FtZXJhLFxyXG4gICAgICAgIG1haW5MaWdodDogcmVuZGVyZXIuc2NlbmUuRGlyZWN0aW9uYWxMaWdodCB8IG51bGwsXHJcbiAgICAgICAgcGFzczogcmVuZGVyaW5nLkJhc2ljUmVuZGVyUGFzc0J1aWxkZXIsXHJcbiAgICApIHtcclxuICAgICAgICBjb25zdCBRdWV1ZUhpbnQgPSByZW5kZXJpbmcuUXVldWVIaW50O1xyXG4gICAgICAgIGNvbnN0IFNjZW5lRmxhZ3MgPSByZW5kZXJpbmcuU2NlbmVGbGFncztcclxuICAgICAgICBwYXNzLmFkZFF1ZXVlKFF1ZXVlSGludC5CTEVORCwgJ3BsYW5hci1zaGFkb3cnKVxyXG4gICAgICAgICAgICAuYWRkU2NlbmUoXHJcbiAgICAgICAgICAgICAgICBjYW1lcmEsXHJcbiAgICAgICAgICAgICAgICBTY2VuZUZsYWdzLlNIQURPV19DQVNURVIgfCBTY2VuZUZsYWdzLlBMQU5BUl9TSEFET1cgfCBTY2VuZUZsYWdzLkJMRU5ELFxyXG4gICAgICAgICAgICAgICAgbWFpbkxpZ2h0IHx8IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZm9yd2FyZExpZ2h0aW5nID0gbmV3IEZvcndhcmRMaWdodGluZygpO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfdmlld3BvcnQgPSBuZXcgVmlld3BvcnQoKTtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2NsZWFyQ29sb3IgPSBuZXcgQ29sb3IoMCwgMCwgMCwgMSk7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9yZWZsZWN0aW9uUHJvYmVDbGVhckNvbG9yID0gbmV3IFZlYzMoMCwgMCwgMCk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQmxvb21QYXNzQ29uZmlncyB7XHJcbiAgICBlbmFibGVCbG9vbTogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJ1aWx0aW5CbG9vbVBhc3NCdWlsZGVyIGltcGxlbWVudHMgcmVuZGVyaW5nLlBpcGVsaW5lUGFzc0J1aWxkZXIge1xyXG4gICAgZ2V0Q29uZmlnT3JkZXIoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIGdldFJlbmRlck9yZGVyKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDIwMDtcclxuICAgIH1cclxuICAgIGNvbmZpZ0NhbWVyYShcclxuICAgICAgICBjYW1lcmE6IFJlYWRvbmx5PHJlbmRlcmVyLnNjZW5lLkNhbWVyYT4sXHJcbiAgICAgICAgcGlwZWxpbmVDb25maWdzOiBSZWFkb25seTxQaXBlbGluZUNvbmZpZ3M+LFxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3M6IENhbWVyYUNvbmZpZ3MgJiBCbG9vbVBhc3NDb25maWdzKTogdm9pZCB7XHJcbiAgICAgICAgY2FtZXJhQ29uZmlncy5lbmFibGVCbG9vbVxyXG4gICAgICAgICAgICA9IGNhbWVyYUNvbmZpZ3Muc2V0dGluZ3MuYmxvb20uZW5hYmxlZFxyXG4gICAgICAgICAgICAmJiAhIWNhbWVyYUNvbmZpZ3Muc2V0dGluZ3MuYmxvb20ubWF0ZXJpYWw7XHJcbiAgICAgICAgaWYgKGNhbWVyYUNvbmZpZ3MuZW5hYmxlQmxvb20pIHtcclxuICAgICAgICAgICAgKytjYW1lcmFDb25maWdzLnJlbWFpbmluZ1Bhc3NlcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB3aW5kb3dSZXNpemUoXHJcbiAgICAgICAgcHBsOiByZW5kZXJpbmcuQmFzaWNQaXBlbGluZSxcclxuICAgICAgICBwcGxDb25maWdzOiBSZWFkb25seTxQaXBlbGluZUNvbmZpZ3M+LFxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3M6IENhbWVyYUNvbmZpZ3MgJiBCbG9vbVBhc3NDb25maWdzLFxyXG4gICAgICAgIHdpbmRvdzogcmVuZGVyZXIuUmVuZGVyV2luZG93KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGNhbWVyYUNvbmZpZ3MuZW5hYmxlQmxvb20pIHtcclxuICAgICAgICAgICAgY29uc3QgaWQgPSB3aW5kb3cucmVuZGVyV2luZG93SWQ7XHJcbiAgICAgICAgICAgIGxldCBibG9vbVdpZHRoID0gY2FtZXJhQ29uZmlncy53aWR0aDtcclxuICAgICAgICAgICAgbGV0IGJsb29tSGVpZ2h0ID0gY2FtZXJhQ29uZmlncy5oZWlnaHQ7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpICE9PSBjYW1lcmFDb25maWdzLnNldHRpbmdzLmJsb29tLml0ZXJhdGlvbnMgKyAxOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGJsb29tV2lkdGggPSBNYXRoLm1heChNYXRoLmZsb29yKGJsb29tV2lkdGggLyAyKSwgMSk7XHJcbiAgICAgICAgICAgICAgICBibG9vbUhlaWdodCA9IE1hdGgubWF4KE1hdGguZmxvb3IoYmxvb21IZWlnaHQgLyAyKSwgMSk7XHJcbiAgICAgICAgICAgICAgICBwcGwuYWRkUmVuZGVyVGFyZ2V0KGBCbG9vbVRleCR7aWR9XyR7aX1gLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3MucmFkaWFuY2VGb3JtYXQsIGJsb29tV2lkdGgsIGJsb29tSGVpZ2h0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXR1cChcclxuICAgICAgICBwcGw6IHJlbmRlcmluZy5CYXNpY1BpcGVsaW5lLFxyXG4gICAgICAgIHBwbENvbmZpZ3M6IFJlYWRvbmx5PFBpcGVsaW5lQ29uZmlncz4sXHJcbiAgICAgICAgY2FtZXJhQ29uZmlnczogQ2FtZXJhQ29uZmlncyAmIEJsb29tUGFzc0NvbmZpZ3MsXHJcbiAgICAgICAgY2FtZXJhOiByZW5kZXJlci5zY2VuZS5DYW1lcmEsXHJcbiAgICAgICAgY29udGV4dDogUGlwZWxpbmVDb250ZXh0LFxyXG4gICAgICAgIHByZXZSZW5kZXJQYXNzPzogcmVuZGVyaW5nLkJhc2ljUmVuZGVyUGFzc0J1aWxkZXIpXHJcbiAgICAgICAgOiByZW5kZXJpbmcuQmFzaWNSZW5kZXJQYXNzQnVpbGRlciB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgaWYgKCFjYW1lcmFDb25maWdzLmVuYWJsZUJsb29tKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcmV2UmVuZGVyUGFzcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC0tY2FtZXJhQ29uZmlncy5yZW1haW5pbmdQYXNzZXM7XHJcbiAgICAgICAgYXNzZXJ0KGNhbWVyYUNvbmZpZ3MucmVtYWluaW5nUGFzc2VzID49IDApO1xyXG4gICAgICAgIGNvbnN0IGlkID0gY2FtZXJhLndpbmRvdy5yZW5kZXJXaW5kb3dJZDtcclxuICAgICAgICBhc3NlcnQoISFjYW1lcmFDb25maWdzLnNldHRpbmdzLmJsb29tLm1hdGVyaWFsKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkS2F3YXNlRHVhbEZpbHRlckJsb29tUGFzc2VzKFxyXG4gICAgICAgICAgICBwcGwsIHBwbENvbmZpZ3MsXHJcbiAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3MsXHJcbiAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3Muc2V0dGluZ3MsXHJcbiAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3Muc2V0dGluZ3MuYmxvb20ubWF0ZXJpYWwsXHJcbiAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICBjYW1lcmFDb25maWdzLndpZHRoLFxyXG4gICAgICAgICAgICBjYW1lcmFDb25maWdzLmhlaWdodCxcclxuICAgICAgICAgICAgY29udGV4dC5jb2xvck5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2FkZEthd2FzZUR1YWxGaWx0ZXJCbG9vbVBhc3NlcyhcclxuICAgICAgICBwcGw6IHJlbmRlcmluZy5CYXNpY1BpcGVsaW5lLFxyXG4gICAgICAgIHBwbENvbmZpZ3M6IFJlYWRvbmx5PFBpcGVsaW5lQ29uZmlncz4sXHJcbiAgICAgICAgY2FtZXJhQ29uZmlnczogQ2FtZXJhQ29uZmlncyAmIFJlYWRvbmx5PEJsb29tUGFzc0NvbmZpZ3M+LFxyXG4gICAgICAgIHNldHRpbmdzOiBQaXBlbGluZVNldHRpbmdzLFxyXG4gICAgICAgIGJsb29tTWF0ZXJpYWw6IE1hdGVyaWFsLFxyXG4gICAgICAgIGlkOiBudW1iZXIsXHJcbiAgICAgICAgd2lkdGg6IG51bWJlcixcclxuICAgICAgICBoZWlnaHQ6IG51bWJlcixcclxuICAgICAgICByYWRpYW5jZU5hbWU6IHN0cmluZyxcclxuICAgICk6IHJlbmRlcmluZy5CYXNpY1JlbmRlclBhc3NCdWlsZGVyIHtcclxuICAgICAgICBjb25zdCBRdWV1ZUhpbnQgPSByZW5kZXJpbmcuUXVldWVIaW50O1xyXG4gICAgICAgIC8vIEJhc2VkIG9uIEthd2FzZSBEdWFsIEZpbHRlciBCbHVyLiBTYXZlcyBiYW5kd2lkdGggb24gbW9iaWxlIGRldmljZXMuXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cclxuICAgICAgICAvLyBodHRwczovL2NvbW11bml0eS5hcm0uY29tL2Nmcy1maWxlL19fa2V5L2NvbW11bml0eXNlcnZlci1ibG9ncy1jb21wb25lbnRzLXdlYmxvZ2ZpbGVzLzAwLTAwLTAwLTIwLTY2L3NpZ2dyYXBoMjAxNV8yRDAwX21tZ18yRDAwX21hcml1c18yRDAwX3NsaWRlcy5wZGZcclxuXHJcbiAgICAgICAgLy8gU2l6ZTogW3ByZWZpbHRlcigxLzIpLCBkb3duc2FtcGxlKDEvNCksIGRvd25zYW1wbGUoMS84KSwgZG93bnNhbXBsZSgxLzE2KSwgLi4uXVxyXG4gICAgICAgIGNvbnN0IGl0ZXJhdGlvbnMgPSBzZXR0aW5ncy5ibG9vbS5pdGVyYXRpb25zO1xyXG4gICAgICAgIGNvbnN0IHNpemVDb3VudCA9IGl0ZXJhdGlvbnMgKyAxO1xyXG4gICAgICAgIHRoaXMuX2Jsb29tV2lkdGhzLmxlbmd0aCA9IHNpemVDb3VudDtcclxuICAgICAgICB0aGlzLl9ibG9vbUhlaWdodHMubGVuZ3RoID0gc2l6ZUNvdW50O1xyXG4gICAgICAgIHRoaXMuX2Jsb29tV2lkdGhzWzBdID0gTWF0aC5tYXgoTWF0aC5mbG9vcih3aWR0aCAvIDIpLCAxKTtcclxuICAgICAgICB0aGlzLl9ibG9vbUhlaWdodHNbMF0gPSBNYXRoLm1heChNYXRoLmZsb29yKGhlaWdodCAvIDIpLCAxKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSAhPT0gc2l6ZUNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5fYmxvb21XaWR0aHNbaV0gPSBNYXRoLm1heChNYXRoLmZsb29yKHRoaXMuX2Jsb29tV2lkdGhzW2kgLSAxXSAvIDIpLCAxKTtcclxuICAgICAgICAgICAgdGhpcy5fYmxvb21IZWlnaHRzW2ldID0gTWF0aC5tYXgoTWF0aC5mbG9vcih0aGlzLl9ibG9vbUhlaWdodHNbaSAtIDFdIC8gMiksIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQmxvb20gdGV4dHVyZSBuYW1lc1xyXG4gICAgICAgIHRoaXMuX2Jsb29tVGV4TmFtZXMubGVuZ3RoID0gc2l6ZUNvdW50O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpICE9PSBzaXplQ291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICB0aGlzLl9ibG9vbVRleE5hbWVzW2ldID0gYEJsb29tVGV4JHtpZH1fJHtpfWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTZXR1cCBibG9vbSBwYXJhbWV0ZXJzXHJcbiAgICAgICAgdGhpcy5fYmxvb21QYXJhbXMueCA9IHBwbENvbmZpZ3MudXNlRmxvYXRPdXRwdXQgPyAxIDogMDtcclxuICAgICAgICB0aGlzLl9ibG9vbVBhcmFtcy54ID0gMDsgLy8gdW51c2VkXHJcbiAgICAgICAgdGhpcy5fYmxvb21QYXJhbXMueiA9IHNldHRpbmdzLmJsb29tLnRocmVzaG9sZDtcclxuICAgICAgICB0aGlzLl9ibG9vbVBhcmFtcy53ID0gc2V0dGluZ3MuYmxvb20uZW5hYmxlQWxwaGFNYXNrID8gMSA6IDA7XHJcblxyXG4gICAgICAgIC8vIFByZWZpbHRlciBwYXNzXHJcbiAgICAgICAgY29uc3QgcHJlZmlsdGVyUGFzcyA9IHBwbC5hZGRSZW5kZXJQYXNzKHRoaXMuX2Jsb29tV2lkdGhzWzBdLCB0aGlzLl9ibG9vbUhlaWdodHNbMF0sICdjYy1ibG9vbS1wcmVmaWx0ZXInKTtcclxuICAgICAgICBwcmVmaWx0ZXJQYXNzLmFkZFJlbmRlclRhcmdldChcclxuICAgICAgICAgICAgdGhpcy5fYmxvb21UZXhOYW1lc1swXSxcclxuICAgICAgICAgICAgTG9hZE9wLkNMRUFSLFxyXG4gICAgICAgICAgICBTdG9yZU9wLlNUT1JFLFxyXG4gICAgICAgICAgICB0aGlzLl9jbGVhckNvbG9yVHJhbnNwYXJlbnRCbGFjayxcclxuICAgICAgICApO1xyXG4gICAgICAgIHByZWZpbHRlclBhc3MuYWRkVGV4dHVyZShyYWRpYW5jZU5hbWUsICdpbnB1dFRleHR1cmUnKTtcclxuICAgICAgICBwcmVmaWx0ZXJQYXNzLnNldFZlYzQoJ2dfcGxhdGZvcm0nLCBwcGxDb25maWdzLnBsYXRmb3JtKTtcclxuICAgICAgICBwcmVmaWx0ZXJQYXNzLnNldFZlYzQoJ2Jsb29tUGFyYW1zJywgdGhpcy5fYmxvb21QYXJhbXMpO1xyXG4gICAgICAgIHByZWZpbHRlclBhc3NcclxuICAgICAgICAgICAgLmFkZFF1ZXVlKFF1ZXVlSGludC5PUEFRVUUpXHJcbiAgICAgICAgICAgIC5hZGRGdWxsc2NyZWVuUXVhZChibG9vbU1hdGVyaWFsLCAwKTtcclxuXHJcbiAgICAgICAgLy8gRG93bnNhbXBsZSBwYXNzZXNcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSAhPT0gc2l6ZUNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgZG93blBhc3MgPSBwcGwuYWRkUmVuZGVyUGFzcyh0aGlzLl9ibG9vbVdpZHRoc1tpXSwgdGhpcy5fYmxvb21IZWlnaHRzW2ldLCAnY2MtYmxvb20tZG93bnNhbXBsZScpO1xyXG4gICAgICAgICAgICBkb3duUGFzcy5hZGRSZW5kZXJUYXJnZXQodGhpcy5fYmxvb21UZXhOYW1lc1tpXSwgTG9hZE9wLkNMRUFSLCBTdG9yZU9wLlNUT1JFLCB0aGlzLl9jbGVhckNvbG9yVHJhbnNwYXJlbnRCbGFjayk7XHJcbiAgICAgICAgICAgIGRvd25QYXNzLmFkZFRleHR1cmUodGhpcy5fYmxvb21UZXhOYW1lc1tpIC0gMV0sICdibG9vbVRleHR1cmUnKTtcclxuICAgICAgICAgICAgdGhpcy5fYmxvb21UZXhTaXplLnggPSB0aGlzLl9ibG9vbVdpZHRoc1tpIC0gMV07XHJcbiAgICAgICAgICAgIHRoaXMuX2Jsb29tVGV4U2l6ZS55ID0gdGhpcy5fYmxvb21IZWlnaHRzW2kgLSAxXTtcclxuICAgICAgICAgICAgZG93blBhc3Muc2V0VmVjNCgnZ19wbGF0Zm9ybScsIHBwbENvbmZpZ3MucGxhdGZvcm0pO1xyXG4gICAgICAgICAgICBkb3duUGFzcy5zZXRWZWM0KCdibG9vbVRleFNpemUnLCB0aGlzLl9ibG9vbVRleFNpemUpO1xyXG4gICAgICAgICAgICBkb3duUGFzc1xyXG4gICAgICAgICAgICAgICAgLmFkZFF1ZXVlKFF1ZXVlSGludC5PUEFRVUUpXHJcbiAgICAgICAgICAgICAgICAuYWRkRnVsbHNjcmVlblF1YWQoYmxvb21NYXRlcmlhbCwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBVcHNhbXBsZSBwYXNzZXNcclxuICAgICAgICBmb3IgKGxldCBpID0gaXRlcmF0aW9uczsgaS0tID4gMDspIHtcclxuICAgICAgICAgICAgY29uc3QgdXBQYXNzID0gcHBsLmFkZFJlbmRlclBhc3ModGhpcy5fYmxvb21XaWR0aHNbaV0sIHRoaXMuX2Jsb29tSGVpZ2h0c1tpXSwgJ2NjLWJsb29tLXVwc2FtcGxlJyk7XHJcbiAgICAgICAgICAgIHVwUGFzcy5hZGRSZW5kZXJUYXJnZXQodGhpcy5fYmxvb21UZXhOYW1lc1tpXSwgTG9hZE9wLkNMRUFSLCBTdG9yZU9wLlNUT1JFLCB0aGlzLl9jbGVhckNvbG9yVHJhbnNwYXJlbnRCbGFjayk7XHJcbiAgICAgICAgICAgIHVwUGFzcy5hZGRUZXh0dXJlKHRoaXMuX2Jsb29tVGV4TmFtZXNbaSArIDFdLCAnYmxvb21UZXh0dXJlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2Jsb29tVGV4U2l6ZS54ID0gdGhpcy5fYmxvb21XaWR0aHNbaSArIDFdO1xyXG4gICAgICAgICAgICB0aGlzLl9ibG9vbVRleFNpemUueSA9IHRoaXMuX2Jsb29tSGVpZ2h0c1tpICsgMV07XHJcbiAgICAgICAgICAgIHVwUGFzcy5zZXRWZWM0KCdnX3BsYXRmb3JtJywgcHBsQ29uZmlncy5wbGF0Zm9ybSk7XHJcbiAgICAgICAgICAgIHVwUGFzcy5zZXRWZWM0KCdibG9vbVRleFNpemUnLCB0aGlzLl9ibG9vbVRleFNpemUpO1xyXG4gICAgICAgICAgICB1cFBhc3NcclxuICAgICAgICAgICAgICAgIC5hZGRRdWV1ZShRdWV1ZUhpbnQuT1BBUVVFKVxyXG4gICAgICAgICAgICAgICAgLmFkZEZ1bGxzY3JlZW5RdWFkKGJsb29tTWF0ZXJpYWwsIDIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ29tYmluZSBwYXNzXHJcbiAgICAgICAgY29uc3QgY29tYmluZVBhc3MgPSBwcGwuYWRkUmVuZGVyUGFzcyh3aWR0aCwgaGVpZ2h0LCAnY2MtYmxvb20tY29tYmluZScpO1xyXG4gICAgICAgIGNvbWJpbmVQYXNzLmFkZFJlbmRlclRhcmdldChyYWRpYW5jZU5hbWUsIExvYWRPcC5MT0FELCBTdG9yZU9wLlNUT1JFKTtcclxuICAgICAgICBjb21iaW5lUGFzcy5hZGRUZXh0dXJlKHRoaXMuX2Jsb29tVGV4TmFtZXNbMF0sICdibG9vbVRleHR1cmUnKTtcclxuICAgICAgICBjb21iaW5lUGFzcy5zZXRWZWM0KCdnX3BsYXRmb3JtJywgcHBsQ29uZmlncy5wbGF0Zm9ybSk7XHJcbiAgICAgICAgY29tYmluZVBhc3Muc2V0VmVjNCgnYmxvb21QYXJhbXMnLCB0aGlzLl9ibG9vbVBhcmFtcyk7XHJcbiAgICAgICAgY29tYmluZVBhc3NcclxuICAgICAgICAgICAgLmFkZFF1ZXVlKFF1ZXVlSGludC5CTEVORClcclxuICAgICAgICAgICAgLmFkZEZ1bGxzY3JlZW5RdWFkKGJsb29tTWF0ZXJpYWwsIDMpO1xyXG5cclxuICAgICAgICBpZiAoY2FtZXJhQ29uZmlncy5yZW1haW5pbmdQYXNzZXMgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFkZENvcHlUb1NjcmVlblBhc3MocHBsLCBwcGxDb25maWdzLCBjYW1lcmFDb25maWdzLCByYWRpYW5jZU5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb21iaW5lUGFzcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBCbG9vbVxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2xlYXJDb2xvclRyYW5zcGFyZW50QmxhY2sgPSBuZXcgQ29sb3IoMCwgMCwgMCwgMCk7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ibG9vbVBhcmFtcyA9IG5ldyBWZWM0KDAsIDAsIDAsIDApO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfYmxvb21UZXhTaXplID0gbmV3IFZlYzQoMCwgMCwgMCwgMCk7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ibG9vbVdpZHRoczogQXJyYXk8bnVtYmVyPiA9IFtdO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfYmxvb21IZWlnaHRzOiBBcnJheTxudW1iZXI+ID0gW107XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ibG9vbVRleE5hbWVzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVG9uZU1hcHBpbmdQYXNzQ29uZmlncyB7XHJcbiAgICBlbmFibGVUb25lTWFwcGluZzogYm9vbGVhbjtcclxuICAgIGVuYWJsZUNvbG9yR3JhZGluZzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJ1aWx0aW5Ub25lTWFwcGluZ1Bhc3NCdWlsZGVyIGltcGxlbWVudHMgcmVuZGVyaW5nLlBpcGVsaW5lUGFzc0J1aWxkZXIge1xyXG4gICAgZ2V0Q29uZmlnT3JkZXIoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIGdldFJlbmRlck9yZGVyKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDMwMDtcclxuICAgIH1cclxuICAgIGNvbmZpZ0NhbWVyYShcclxuICAgICAgICBjYW1lcmE6IFJlYWRvbmx5PHJlbmRlcmVyLnNjZW5lLkNhbWVyYT4sXHJcbiAgICAgICAgcHBsQ29uZmlnczogUmVhZG9ubHk8UGlwZWxpbmVDb25maWdzPixcclxuICAgICAgICBjYW1lcmFDb25maWdzOiBDYW1lcmFDb25maWdzICYgVG9uZU1hcHBpbmdQYXNzQ29uZmlncyk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gY2FtZXJhQ29uZmlncy5zZXR0aW5ncztcclxuXHJcbiAgICAgICAgY2FtZXJhQ29uZmlncy5lbmFibGVDb2xvckdyYWRpbmdcclxuICAgICAgICAgICAgPSBzZXR0aW5ncy5jb2xvckdyYWRpbmcuZW5hYmxlZFxyXG4gICAgICAgICAgICAmJiAhIXNldHRpbmdzLmNvbG9yR3JhZGluZy5tYXRlcmlhbFxyXG4gICAgICAgICAgICAmJiAhIXNldHRpbmdzLmNvbG9yR3JhZGluZy5jb2xvckdyYWRpbmdNYXA7XHJcblxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3MuZW5hYmxlVG9uZU1hcHBpbmdcclxuICAgICAgICAgICAgPSBjYW1lcmFDb25maWdzLmVuYWJsZUhEUiAvLyBGcm9tIEhhbGYgdG8gUkdCQThcclxuICAgICAgICAgICAgfHwgY2FtZXJhQ29uZmlncy5lbmFibGVDb2xvckdyYWRpbmc7IC8vIENvbG9yIGdyYWRpbmdcclxuXHJcbiAgICAgICAgaWYgKGNhbWVyYUNvbmZpZ3MuZW5hYmxlVG9uZU1hcHBpbmcpIHtcclxuICAgICAgICAgICAgKytjYW1lcmFDb25maWdzLnJlbWFpbmluZ1Bhc3NlcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB3aW5kb3dSZXNpemUoXHJcbiAgICAgICAgcHBsOiByZW5kZXJpbmcuQmFzaWNQaXBlbGluZSxcclxuICAgICAgICBwcGxDb25maWdzOiBSZWFkb25seTxQaXBlbGluZUNvbmZpZ3M+LFxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3M6IENhbWVyYUNvbmZpZ3MgJiBUb25lTWFwcGluZ1Bhc3NDb25maWdzKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGNhbWVyYUNvbmZpZ3MuZW5hYmxlQ29sb3JHcmFkaW5nKSB7XHJcbiAgICAgICAgICAgIGFzc2VydCghIWNhbWVyYUNvbmZpZ3Muc2V0dGluZ3MuY29sb3JHcmFkaW5nLm1hdGVyaWFsKTtcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5zZXR0aW5ncy5jb2xvckdyYWRpbmcubWF0ZXJpYWwuc2V0UHJvcGVydHkoXHJcbiAgICAgICAgICAgICAgICAnY29sb3JHcmFkaW5nTWFwJyxcclxuICAgICAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3Muc2V0dGluZ3MuY29sb3JHcmFkaW5nLmNvbG9yR3JhZGluZ01hcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2V0dXAoXHJcbiAgICAgICAgcHBsOiByZW5kZXJpbmcuQmFzaWNQaXBlbGluZSxcclxuICAgICAgICBwcGxDb25maWdzOiBSZWFkb25seTxQaXBlbGluZUNvbmZpZ3M+LFxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3M6IENhbWVyYUNvbmZpZ3MgJiBUb25lTWFwcGluZ1Bhc3NDb25maWdzLFxyXG4gICAgICAgIGNhbWVyYTogcmVuZGVyZXIuc2NlbmUuQ2FtZXJhLFxyXG4gICAgICAgIGNvbnRleHQ6IFBpcGVsaW5lQ29udGV4dCxcclxuICAgICAgICBwcmV2UmVuZGVyUGFzcz86IHJlbmRlcmluZy5CYXNpY1JlbmRlclBhc3NCdWlsZGVyKVxyXG4gICAgICAgIDogcmVuZGVyaW5nLkJhc2ljUmVuZGVyUGFzc0J1aWxkZXIgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmICghY2FtZXJhQ29uZmlncy5lbmFibGVUb25lTWFwcGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJldlJlbmRlclBhc3M7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAtLWNhbWVyYUNvbmZpZ3MucmVtYWluaW5nUGFzc2VzO1xyXG4gICAgICAgIGFzc2VydChjYW1lcmFDb25maWdzLnJlbWFpbmluZ1Bhc3NlcyA+PSAwKTtcclxuICAgICAgICBpZiAoY2FtZXJhQ29uZmlncy5yZW1haW5pbmdQYXNzZXMgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENvcHlBbmRUb25lbWFwUGFzcyhwcGwsIHBwbENvbmZpZ3MsIGNhbWVyYUNvbmZpZ3MsXHJcbiAgICAgICAgICAgICAgICBjYW1lcmFDb25maWdzLm5hdGl2ZVdpZHRoLCBjYW1lcmFDb25maWdzLm5hdGl2ZUhlaWdodCxcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29sb3JOYW1lLCBjYW1lcmFDb25maWdzLmNvbG9yTmFtZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaWQgPSBjYW1lcmFDb25maWdzLnJlbmRlcldpbmRvd0lkO1xyXG4gICAgICAgICAgICBjb25zdCBsZHJDb2xvclByZWZpeCA9IGNhbWVyYUNvbmZpZ3MuZW5hYmxlU2hhZGluZ1NjYWxlXHJcbiAgICAgICAgICAgICAgICA/IGBTY2FsZWRMZHJDb2xvcmBcclxuICAgICAgICAgICAgICAgIDogYExkckNvbG9yYDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGxkckNvbG9yTmFtZSA9IGdldFBpbmdQb25nUmVuZGVyVGFyZ2V0KGNvbnRleHQuY29sb3JOYW1lLCBsZHJDb2xvclByZWZpeCwgaWQpO1xyXG4gICAgICAgICAgICBjb25zdCByYWRpYW5jZU5hbWUgPSBjb250ZXh0LmNvbG9yTmFtZTtcclxuICAgICAgICAgICAgY29udGV4dC5jb2xvck5hbWUgPSBsZHJDb2xvck5hbWU7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ29weUFuZFRvbmVtYXBQYXNzKHBwbCwgcHBsQ29uZmlncywgY2FtZXJhQ29uZmlncyxcclxuICAgICAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3Mud2lkdGgsIGNhbWVyYUNvbmZpZ3MuaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgcmFkaWFuY2VOYW1lLCBsZHJDb2xvck5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgX2FkZENvcHlBbmRUb25lbWFwUGFzcyhcclxuICAgICAgICBwcGw6IHJlbmRlcmluZy5CYXNpY1BpcGVsaW5lLFxyXG4gICAgICAgIHBwbENvbmZpZ3M6IFJlYWRvbmx5PFBpcGVsaW5lQ29uZmlncz4sXHJcbiAgICAgICAgY2FtZXJhQ29uZmlnczogQ2FtZXJhQ29uZmlncyAmIFRvbmVNYXBwaW5nUGFzc0NvbmZpZ3MsXHJcbiAgICAgICAgd2lkdGg6IG51bWJlcixcclxuICAgICAgICBoZWlnaHQ6IG51bWJlcixcclxuICAgICAgICByYWRpYW5jZU5hbWU6IHN0cmluZyxcclxuICAgICAgICBjb2xvck5hbWU6IHN0cmluZyxcclxuICAgICk6IHJlbmRlcmluZy5CYXNpY1JlbmRlclBhc3NCdWlsZGVyIHtcclxuICAgICAgICBsZXQgcGFzczogcmVuZGVyaW5nLkJhc2ljUmVuZGVyUGFzc0J1aWxkZXI7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBjYW1lcmFDb25maWdzLnNldHRpbmdzO1xyXG4gICAgICAgIGlmIChjYW1lcmFDb25maWdzLmVuYWJsZUNvbG9yR3JhZGluZykge1xyXG4gICAgICAgICAgICBhc3NlcnQoISFzZXR0aW5ncy5jb2xvckdyYWRpbmcubWF0ZXJpYWwpO1xyXG4gICAgICAgICAgICBhc3NlcnQoISFzZXR0aW5ncy5jb2xvckdyYWRpbmcuY29sb3JHcmFkaW5nTWFwKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGx1dFRleCA9IHNldHRpbmdzLmNvbG9yR3JhZGluZy5jb2xvckdyYWRpbmdNYXA7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbG9yR3JhZGluZ1RleFNpemUueCA9IGx1dFRleC53aWR0aDtcclxuICAgICAgICAgICAgdGhpcy5fY29sb3JHcmFkaW5nVGV4U2l6ZS55ID0gbHV0VGV4LmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGlzU3F1YXJlTWFwID0gbHV0VGV4LndpZHRoID09PSBsdXRUZXguaGVpZ2h0O1xyXG4gICAgICAgICAgICBpZiAoaXNTcXVhcmVNYXApIHtcclxuICAgICAgICAgICAgICAgIHBhc3MgPSBwcGwuYWRkUmVuZGVyUGFzcyh3aWR0aCwgaGVpZ2h0LCAnY2MtY29sb3ItZ3JhZGluZy04eDgnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhc3MgPSBwcGwuYWRkUmVuZGVyUGFzcyh3aWR0aCwgaGVpZ2h0LCAnY2MtY29sb3ItZ3JhZGluZy1ueDEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwYXNzLmFkZFJlbmRlclRhcmdldChjb2xvck5hbWUsIExvYWRPcC5DTEVBUiwgU3RvcmVPcC5TVE9SRSwgc0NsZWFyQ29sb3JUcmFuc3BhcmVudEJsYWNrKTtcclxuICAgICAgICAgICAgcGFzcy5hZGRUZXh0dXJlKHJhZGlhbmNlTmFtZSwgJ3NjZW5lQ29sb3JNYXAnKTtcclxuICAgICAgICAgICAgcGFzcy5zZXRWZWM0KCdnX3BsYXRmb3JtJywgcHBsQ29uZmlncy5wbGF0Zm9ybSk7XHJcbiAgICAgICAgICAgIHBhc3Muc2V0VmVjMignbHV0VGV4dHVyZVNpemUnLCB0aGlzLl9jb2xvckdyYWRpbmdUZXhTaXplKTtcclxuICAgICAgICAgICAgcGFzcy5zZXRGbG9hdCgnY29udHJpYnV0ZScsIHNldHRpbmdzLmNvbG9yR3JhZGluZy5jb250cmlidXRlKTtcclxuICAgICAgICAgICAgcGFzcy5hZGRRdWV1ZShyZW5kZXJpbmcuUXVldWVIaW50Lk9QQVFVRSlcclxuICAgICAgICAgICAgICAgIC5hZGRGdWxsc2NyZWVuUXVhZChzZXR0aW5ncy5jb2xvckdyYWRpbmcubWF0ZXJpYWwsIGlzU3F1YXJlTWFwID8gMSA6IDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBhc3MgPSBwcGwuYWRkUmVuZGVyUGFzcyh3aWR0aCwgaGVpZ2h0LCAnY2MtdG9uZS1tYXBwaW5nJyk7XHJcbiAgICAgICAgICAgIHBhc3MuYWRkUmVuZGVyVGFyZ2V0KGNvbG9yTmFtZSwgTG9hZE9wLkNMRUFSLCBTdG9yZU9wLlNUT1JFLCBzQ2xlYXJDb2xvclRyYW5zcGFyZW50QmxhY2spO1xyXG4gICAgICAgICAgICBwYXNzLmFkZFRleHR1cmUocmFkaWFuY2VOYW1lLCAnaW5wdXRUZXh0dXJlJyk7XHJcbiAgICAgICAgICAgIHBhc3Muc2V0VmVjNCgnZ19wbGF0Zm9ybScsIHBwbENvbmZpZ3MucGxhdGZvcm0pO1xyXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MudG9uZU1hcHBpbmcubWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICAgIHBhc3MuYWRkUXVldWUocmVuZGVyaW5nLlF1ZXVlSGludC5PUEFRVUUpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZEZ1bGxzY3JlZW5RdWFkKHNldHRpbmdzLnRvbmVNYXBwaW5nLm1hdGVyaWFsLCAwKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFzc2VydCghIWNhbWVyYUNvbmZpZ3MuY29weUFuZFRvbmVtYXBNYXRlcmlhbCk7XHJcbiAgICAgICAgICAgICAgICBwYXNzLmFkZFF1ZXVlKHJlbmRlcmluZy5RdWV1ZUhpbnQuT1BBUVVFKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRGdWxsc2NyZWVuUXVhZChjYW1lcmFDb25maWdzLmNvcHlBbmRUb25lbWFwTWF0ZXJpYWwsIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXNzO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY29sb3JHcmFkaW5nVGV4U2l6ZSA9IG5ldyBWZWMyKDAsIDApO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZYQUFQYXNzQ29uZmlncyB7XHJcbiAgICBlbmFibGVGWEFBOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQnVpbHRpbkZYQUFQYXNzQnVpbGRlciBpbXBsZW1lbnRzIHJlbmRlcmluZy5QaXBlbGluZVBhc3NCdWlsZGVyIHtcclxuICAgIGdldENvbmZpZ09yZGVyKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBnZXRSZW5kZXJPcmRlcigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiA0MDA7XHJcbiAgICB9XHJcbiAgICBjb25maWdDYW1lcmEoXHJcbiAgICAgICAgY2FtZXJhOiBSZWFkb25seTxyZW5kZXJlci5zY2VuZS5DYW1lcmE+LFxyXG4gICAgICAgIHBwbENvbmZpZ3M6IFJlYWRvbmx5PFBpcGVsaW5lQ29uZmlncz4sXHJcbiAgICAgICAgY2FtZXJhQ29uZmlnczogQ2FtZXJhQ29uZmlncyAmIEZYQUFQYXNzQ29uZmlncyk6IHZvaWQge1xyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3MuZW5hYmxlRlhBQVxyXG4gICAgICAgICAgICA9IGNhbWVyYUNvbmZpZ3Muc2V0dGluZ3MuZnhhYS5lbmFibGVkXHJcbiAgICAgICAgICAgICYmICEhY2FtZXJhQ29uZmlncy5zZXR0aW5ncy5meGFhLm1hdGVyaWFsO1xyXG4gICAgICAgIGlmIChjYW1lcmFDb25maWdzLmVuYWJsZUZYQUEpIHtcclxuICAgICAgICAgICAgKytjYW1lcmFDb25maWdzLnJlbWFpbmluZ1Bhc3NlcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzZXR1cChcclxuICAgICAgICBwcGw6IHJlbmRlcmluZy5CYXNpY1BpcGVsaW5lLFxyXG4gICAgICAgIHBwbENvbmZpZ3M6IFJlYWRvbmx5PFBpcGVsaW5lQ29uZmlncz4sXHJcbiAgICAgICAgY2FtZXJhQ29uZmlnczogQ2FtZXJhQ29uZmlncyAmIEZYQUFQYXNzQ29uZmlncyxcclxuICAgICAgICBjYW1lcmE6IHJlbmRlcmVyLnNjZW5lLkNhbWVyYSxcclxuICAgICAgICBjb250ZXh0OiBQaXBlbGluZUNvbnRleHQsXHJcbiAgICAgICAgcHJldlJlbmRlclBhc3M/OiByZW5kZXJpbmcuQmFzaWNSZW5kZXJQYXNzQnVpbGRlcilcclxuICAgICAgICA6IHJlbmRlcmluZy5CYXNpY1JlbmRlclBhc3NCdWlsZGVyIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAoIWNhbWVyYUNvbmZpZ3MuZW5hYmxlRlhBQSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJldlJlbmRlclBhc3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC0tY2FtZXJhQ29uZmlncy5yZW1haW5pbmdQYXNzZXM7XHJcbiAgICAgICAgYXNzZXJ0KGNhbWVyYUNvbmZpZ3MucmVtYWluaW5nUGFzc2VzID49IDApO1xyXG5cclxuICAgICAgICBjb25zdCBpZCA9IGNhbWVyYUNvbmZpZ3MucmVuZGVyV2luZG93SWQ7XHJcbiAgICAgICAgY29uc3QgbGRyQ29sb3JQcmVmaXggPSBjYW1lcmFDb25maWdzLmVuYWJsZVNoYWRpbmdTY2FsZVxyXG4gICAgICAgICAgICA/IGBTY2FsZWRMZHJDb2xvcmBcclxuICAgICAgICAgICAgOiBgTGRyQ29sb3JgO1xyXG4gICAgICAgIGNvbnN0IGxkckNvbG9yTmFtZSA9IGdldFBpbmdQb25nUmVuZGVyVGFyZ2V0KGNvbnRleHQuY29sb3JOYW1lLCBsZHJDb2xvclByZWZpeCwgaWQpO1xyXG5cclxuICAgICAgICBhc3NlcnQoISFjYW1lcmFDb25maWdzLnNldHRpbmdzLmZ4YWEubWF0ZXJpYWwpO1xyXG4gICAgICAgIGlmIChjYW1lcmFDb25maWdzLnJlbWFpbmluZ1Bhc3NlcyA9PT0gMCkge1xyXG4gICAgICAgICAgICBpZiAoY2FtZXJhQ29uZmlncy5lbmFibGVTaGFkaW5nU2NhbGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZEZ4YWFQYXNzKHBwbCwgcHBsQ29uZmlncyxcclxuICAgICAgICAgICAgICAgICAgICBjYW1lcmFDb25maWdzLnNldHRpbmdzLmZ4YWEubWF0ZXJpYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhQ29uZmlncy53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBjYW1lcmFDb25maWdzLmhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmNvbG9yTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBsZHJDb2xvck5hbWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkZENvcHlUb1NjcmVlblBhc3MocHBsLCBwcGxDb25maWdzLCBjYW1lcmFDb25maWdzLCBsZHJDb2xvck5hbWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KGNhbWVyYUNvbmZpZ3Mud2lkdGggPT09IGNhbWVyYUNvbmZpZ3MubmF0aXZlV2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KGNhbWVyYUNvbmZpZ3MuaGVpZ2h0ID09PSBjYW1lcmFDb25maWdzLm5hdGl2ZUhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYWRkRnhhYVBhc3MocHBsLCBwcGxDb25maWdzLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3Muc2V0dGluZ3MuZnhhYS5tYXRlcmlhbCxcclxuICAgICAgICAgICAgICAgICAgICBjYW1lcmFDb25maWdzLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3MuaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY29sb3JOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3MuY29sb3JOYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlucHV0Q29sb3JOYW1lID0gY29udGV4dC5jb2xvck5hbWU7XHJcbiAgICAgICAgICAgIGNvbnRleHQuY29sb3JOYW1lID0gbGRyQ29sb3JOYW1lO1xyXG4gICAgICAgICAgICBjb25zdCBsYXN0UGFzcyA9IHRoaXMuX2FkZEZ4YWFQYXNzKHBwbCwgcHBsQ29uZmlncyxcclxuICAgICAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3Muc2V0dGluZ3MuZnhhYS5tYXRlcmlhbCxcclxuICAgICAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3Mud2lkdGgsXHJcbiAgICAgICAgICAgICAgICBjYW1lcmFDb25maWdzLmhlaWdodCxcclxuICAgICAgICAgICAgICAgIGlucHV0Q29sb3JOYW1lLFxyXG4gICAgICAgICAgICAgICAgbGRyQ29sb3JOYW1lKTtcclxuICAgICAgICAgICAgcmV0dXJuIGxhc3RQYXNzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgX2FkZEZ4YWFQYXNzKFxyXG4gICAgICAgIHBwbDogcmVuZGVyaW5nLkJhc2ljUGlwZWxpbmUsXHJcbiAgICAgICAgcHBsQ29uZmlnczogUmVhZG9ubHk8UGlwZWxpbmVDb25maWdzPixcclxuICAgICAgICBmeGFhTWF0ZXJpYWw6IE1hdGVyaWFsLFxyXG4gICAgICAgIHdpZHRoOiBudW1iZXIsXHJcbiAgICAgICAgaGVpZ2h0OiBudW1iZXIsXHJcbiAgICAgICAgbGRyQ29sb3JOYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgY29sb3JOYW1lOiBzdHJpbmcsXHJcbiAgICApOiByZW5kZXJpbmcuQmFzaWNSZW5kZXJQYXNzQnVpbGRlciB7XHJcbiAgICAgICAgdGhpcy5fZnhhYVBhcmFtcy54ID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5fZnhhYVBhcmFtcy55ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuX2Z4YWFQYXJhbXMueiA9IDEgLyB3aWR0aDtcclxuICAgICAgICB0aGlzLl9meGFhUGFyYW1zLncgPSAxIC8gaGVpZ2h0O1xyXG5cclxuICAgICAgICBjb25zdCBwYXNzID0gcHBsLmFkZFJlbmRlclBhc3Mod2lkdGgsIGhlaWdodCwgJ2NjLWZ4YWEnKTtcclxuICAgICAgICBwYXNzLmFkZFJlbmRlclRhcmdldChjb2xvck5hbWUsIExvYWRPcC5DTEVBUiwgU3RvcmVPcC5TVE9SRSwgc0NsZWFyQ29sb3JUcmFuc3BhcmVudEJsYWNrKTtcclxuICAgICAgICBwYXNzLmFkZFRleHR1cmUobGRyQ29sb3JOYW1lLCAnc2NlbmVDb2xvck1hcCcpO1xyXG4gICAgICAgIHBhc3Muc2V0VmVjNCgnZ19wbGF0Zm9ybScsIHBwbENvbmZpZ3MucGxhdGZvcm0pO1xyXG4gICAgICAgIHBhc3Muc2V0VmVjNCgndGV4U2l6ZScsIHRoaXMuX2Z4YWFQYXJhbXMpO1xyXG4gICAgICAgIHBhc3MuYWRkUXVldWUocmVuZGVyaW5nLlF1ZXVlSGludC5PUEFRVUUpXHJcbiAgICAgICAgICAgIC5hZGRGdWxsc2NyZWVuUXVhZChmeGFhTWF0ZXJpYWwsIDApO1xyXG4gICAgICAgIHJldHVybiBwYXNzO1xyXG4gICAgfVxyXG4gICAgLy8gRlhBQVxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZnhhYVBhcmFtcyA9IG5ldyBWZWM0KDAsIDAsIDAsIDApO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZTUlBhc3NDb25maWdzIHtcclxuICAgIGVuYWJsZUZTUjogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJ1aWx0aW5Gc3JQYXNzQnVpbGRlciBpbXBsZW1lbnRzIHJlbmRlcmluZy5QaXBlbGluZVBhc3NCdWlsZGVyIHtcclxuICAgIGdldENvbmZpZ09yZGVyKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBnZXRSZW5kZXJPcmRlcigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiA1MDA7XHJcbiAgICB9XHJcbiAgICBjb25maWdDYW1lcmEoXHJcbiAgICAgICAgY2FtZXJhOiBSZWFkb25seTxyZW5kZXJlci5zY2VuZS5DYW1lcmE+LFxyXG4gICAgICAgIHBwbENvbmZpZ3M6IFJlYWRvbmx5PFBpcGVsaW5lQ29uZmlncz4sXHJcbiAgICAgICAgY2FtZXJhQ29uZmlnczogQ2FtZXJhQ29uZmlncyAmIEZTUlBhc3NDb25maWdzKTogdm9pZCB7XHJcbiAgICAgICAgLy8gRlNSIChEZXBlbmQgb24gU2hhZGluZyBzY2FsZSlcclxuICAgICAgICBjYW1lcmFDb25maWdzLmVuYWJsZUZTUiA9IGNhbWVyYUNvbmZpZ3Muc2V0dGluZ3MuZnNyLmVuYWJsZWRcclxuICAgICAgICAgICAgJiYgISFjYW1lcmFDb25maWdzLnNldHRpbmdzLmZzci5tYXRlcmlhbFxyXG4gICAgICAgICAgICAmJiBjYW1lcmFDb25maWdzLmVuYWJsZVNoYWRpbmdTY2FsZVxyXG4gICAgICAgICAgICAmJiBjYW1lcmFDb25maWdzLnNoYWRpbmdTY2FsZSA8IDEuMDtcclxuXHJcbiAgICAgICAgaWYgKGNhbWVyYUNvbmZpZ3MuZW5hYmxlRlNSKSB7XHJcbiAgICAgICAgICAgICsrY2FtZXJhQ29uZmlncy5yZW1haW5pbmdQYXNzZXM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2V0dXAoXHJcbiAgICAgICAgcHBsOiByZW5kZXJpbmcuQmFzaWNQaXBlbGluZSxcclxuICAgICAgICBwcGxDb25maWdzOiBSZWFkb25seTxQaXBlbGluZUNvbmZpZ3M+LFxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3M6IENhbWVyYUNvbmZpZ3MgJiBGU1JQYXNzQ29uZmlncyxcclxuICAgICAgICBjYW1lcmE6IHJlbmRlcmVyLnNjZW5lLkNhbWVyYSxcclxuICAgICAgICBjb250ZXh0OiBQaXBlbGluZUNvbnRleHQsXHJcbiAgICAgICAgcHJldlJlbmRlclBhc3M/OiByZW5kZXJpbmcuQmFzaWNSZW5kZXJQYXNzQnVpbGRlcilcclxuICAgICAgICA6IHJlbmRlcmluZy5CYXNpY1JlbmRlclBhc3NCdWlsZGVyIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAoIWNhbWVyYUNvbmZpZ3MuZW5hYmxlRlNSKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcmV2UmVuZGVyUGFzcztcclxuICAgICAgICB9XHJcbiAgICAgICAgLS1jYW1lcmFDb25maWdzLnJlbWFpbmluZ1Bhc3NlcztcclxuXHJcbiAgICAgICAgY29uc3QgaW5wdXRDb2xvck5hbWUgPSBjb250ZXh0LmNvbG9yTmFtZTtcclxuICAgICAgICBjb25zdCBvdXRwdXRDb2xvck5hbWVcclxuICAgICAgICAgICAgPSBjYW1lcmFDb25maWdzLnJlbWFpbmluZ1Bhc3NlcyA9PT0gMFxyXG4gICAgICAgICAgICAgICAgPyBjYW1lcmFDb25maWdzLmNvbG9yTmFtZVxyXG4gICAgICAgICAgICAgICAgOiBnZXRQaW5nUG9uZ1JlbmRlclRhcmdldChjb250ZXh0LmNvbG9yTmFtZSwgJ1VpQ29sb3InLCBjYW1lcmFDb25maWdzLnJlbmRlcldpbmRvd0lkKTtcclxuICAgICAgICBjb250ZXh0LmNvbG9yTmFtZSA9IG91dHB1dENvbG9yTmFtZTtcclxuXHJcbiAgICAgICAgYXNzZXJ0KCEhY2FtZXJhQ29uZmlncy5zZXR0aW5ncy5mc3IubWF0ZXJpYWwpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRGc3JQYXNzKHBwbCwgcHBsQ29uZmlncywgY2FtZXJhQ29uZmlncyxcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5zZXR0aW5ncyxcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5zZXR0aW5ncy5mc3IubWF0ZXJpYWwsXHJcbiAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3MucmVuZGVyV2luZG93SWQsXHJcbiAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3Mud2lkdGgsXHJcbiAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3MuaGVpZ2h0LFxyXG4gICAgICAgICAgICBpbnB1dENvbG9yTmFtZSxcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5uYXRpdmVXaWR0aCxcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5uYXRpdmVIZWlnaHQsXHJcbiAgICAgICAgICAgIG91dHB1dENvbG9yTmFtZSk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF9hZGRGc3JQYXNzKFxyXG4gICAgICAgIHBwbDogcmVuZGVyaW5nLkJhc2ljUGlwZWxpbmUsXHJcbiAgICAgICAgcHBsQ29uZmlnczogUmVhZG9ubHk8UGlwZWxpbmVDb25maWdzPixcclxuICAgICAgICBjYW1lcmFDb25maWdzOiBDYW1lcmFDb25maWdzICYgRlNSUGFzc0NvbmZpZ3MsXHJcbiAgICAgICAgc2V0dGluZ3M6IFBpcGVsaW5lU2V0dGluZ3MsXHJcbiAgICAgICAgZnNyTWF0ZXJpYWw6IE1hdGVyaWFsLFxyXG4gICAgICAgIGlkOiBudW1iZXIsXHJcbiAgICAgICAgd2lkdGg6IG51bWJlcixcclxuICAgICAgICBoZWlnaHQ6IG51bWJlcixcclxuICAgICAgICBpbnB1dENvbG9yTmFtZTogc3RyaW5nLFxyXG4gICAgICAgIG5hdGl2ZVdpZHRoOiBudW1iZXIsXHJcbiAgICAgICAgbmF0aXZlSGVpZ2h0OiBudW1iZXIsXHJcbiAgICAgICAgb3V0cHV0Q29sb3JOYW1lOiBzdHJpbmcsXHJcbiAgICApOiByZW5kZXJpbmcuQmFzaWNSZW5kZXJQYXNzQnVpbGRlciB7XHJcbiAgICAgICAgdGhpcy5fZnNyVGV4U2l6ZS54ID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5fZnNyVGV4U2l6ZS55ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuX2ZzclRleFNpemUueiA9IG5hdGl2ZVdpZHRoO1xyXG4gICAgICAgIHRoaXMuX2ZzclRleFNpemUudyA9IG5hdGl2ZUhlaWdodDtcclxuICAgICAgICB0aGlzLl9mc3JQYXJhbXMueCA9IGNsYW1wKDEuMCAtIHNldHRpbmdzLmZzci5zaGFycG5lc3MsIDAuMDIsIDAuOTgpO1xyXG5cclxuICAgICAgICBjb25zdCB1aUNvbG9yUHJlZml4ID0gJ1VpQ29sb3InO1xyXG5cclxuICAgICAgICBjb25zdCBmc3JDb2xvck5hbWUgPSBnZXRQaW5nUG9uZ1JlbmRlclRhcmdldChvdXRwdXRDb2xvck5hbWUsIHVpQ29sb3JQcmVmaXgsIGlkKTtcclxuXHJcbiAgICAgICAgY29uc3QgZWFzdVBhc3MgPSBwcGwuYWRkUmVuZGVyUGFzcyhuYXRpdmVXaWR0aCwgbmF0aXZlSGVpZ2h0LCAnY2MtZnNyLWVhc3UnKTtcclxuICAgICAgICBlYXN1UGFzcy5hZGRSZW5kZXJUYXJnZXQoZnNyQ29sb3JOYW1lLCBMb2FkT3AuQ0xFQVIsIFN0b3JlT3AuU1RPUkUsIHNDbGVhckNvbG9yVHJhbnNwYXJlbnRCbGFjayk7XHJcbiAgICAgICAgZWFzdVBhc3MuYWRkVGV4dHVyZShpbnB1dENvbG9yTmFtZSwgJ291dHB1dFJlc3VsdE1hcCcpO1xyXG4gICAgICAgIGVhc3VQYXNzLnNldFZlYzQoJ2dfcGxhdGZvcm0nLCBwcGxDb25maWdzLnBsYXRmb3JtKTtcclxuICAgICAgICBlYXN1UGFzcy5zZXRWZWM0KCdmc3JUZXhTaXplJywgdGhpcy5fZnNyVGV4U2l6ZSk7XHJcbiAgICAgICAgZWFzdVBhc3NcclxuICAgICAgICAgICAgLmFkZFF1ZXVlKHJlbmRlcmluZy5RdWV1ZUhpbnQuT1BBUVVFKVxyXG4gICAgICAgICAgICAuYWRkRnVsbHNjcmVlblF1YWQoZnNyTWF0ZXJpYWwsIDApO1xyXG5cclxuICAgICAgICBjb25zdCByY2FzUGFzcyA9IHBwbC5hZGRSZW5kZXJQYXNzKG5hdGl2ZVdpZHRoLCBuYXRpdmVIZWlnaHQsICdjYy1mc3ItcmNhcycpO1xyXG4gICAgICAgIHJjYXNQYXNzLmFkZFJlbmRlclRhcmdldChvdXRwdXRDb2xvck5hbWUsIExvYWRPcC5DTEVBUiwgU3RvcmVPcC5TVE9SRSwgc0NsZWFyQ29sb3JUcmFuc3BhcmVudEJsYWNrKTtcclxuICAgICAgICByY2FzUGFzcy5hZGRUZXh0dXJlKGZzckNvbG9yTmFtZSwgJ291dHB1dFJlc3VsdE1hcCcpO1xyXG4gICAgICAgIHJjYXNQYXNzLnNldFZlYzQoJ2dfcGxhdGZvcm0nLCBwcGxDb25maWdzLnBsYXRmb3JtKTtcclxuICAgICAgICByY2FzUGFzcy5zZXRWZWM0KCdmc3JUZXhTaXplJywgdGhpcy5fZnNyVGV4U2l6ZSk7XHJcbiAgICAgICAgcmNhc1Bhc3Muc2V0VmVjNCgnZnNyUGFyYW1zJywgdGhpcy5fZnNyUGFyYW1zKTtcclxuICAgICAgICByY2FzUGFzc1xyXG4gICAgICAgICAgICAuYWRkUXVldWUocmVuZGVyaW5nLlF1ZXVlSGludC5PUEFRVUUpXHJcbiAgICAgICAgICAgIC5hZGRGdWxsc2NyZWVuUXVhZChmc3JNYXRlcmlhbCwgMSk7XHJcblxyXG4gICAgICAgIHJldHVybiByY2FzUGFzcztcclxuICAgIH1cclxuICAgIC8vIEZTUlxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZnNyUGFyYW1zID0gbmV3IFZlYzQoMCwgMCwgMCwgMCk7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9mc3JUZXhTaXplID0gbmV3IFZlYzQoMCwgMCwgMCwgMCk7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCdWlsdGluVWlQYXNzQnVpbGRlciBpbXBsZW1lbnRzIHJlbmRlcmluZy5QaXBlbGluZVBhc3NCdWlsZGVyIHtcclxuICAgIGdldENvbmZpZ09yZGVyKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBnZXRSZW5kZXJPcmRlcigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAxMDAwO1xyXG4gICAgfVxyXG4gICAgc2V0dXAoXHJcbiAgICAgICAgcHBsOiByZW5kZXJpbmcuQmFzaWNQaXBlbGluZSxcclxuICAgICAgICBwcGxDb25maWdzOiBSZWFkb25seTxQaXBlbGluZUNvbmZpZ3M+LFxyXG4gICAgICAgIGNhbWVyYUNvbmZpZ3M6IENhbWVyYUNvbmZpZ3MgJiBGU1JQYXNzQ29uZmlncyxcclxuICAgICAgICBjYW1lcmE6IHJlbmRlcmVyLnNjZW5lLkNhbWVyYSxcclxuICAgICAgICBjb250ZXh0OiBQaXBlbGluZUNvbnRleHQsXHJcbiAgICAgICAgcHJldlJlbmRlclBhc3M/OiByZW5kZXJpbmcuQmFzaWNSZW5kZXJQYXNzQnVpbGRlcilcclxuICAgICAgICA6IHJlbmRlcmluZy5CYXNpY1JlbmRlclBhc3NCdWlsZGVyIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBhc3NlcnQoISFwcmV2UmVuZGVyUGFzcyk7XHJcblxyXG4gICAgICAgIGxldCBmbGFncyA9IHJlbmRlcmluZy5TY2VuZUZsYWdzLlVJO1xyXG4gICAgICAgIGlmIChjYW1lcmFDb25maWdzLmVuYWJsZVByb2ZpbGVyKSB7XHJcbiAgICAgICAgICAgIGZsYWdzIHw9IHJlbmRlcmluZy5TY2VuZUZsYWdzLlBST0ZJTEVSO1xyXG4gICAgICAgICAgICBwcmV2UmVuZGVyUGFzcy5zaG93U3RhdGlzdGljcyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByZXZSZW5kZXJQYXNzXHJcbiAgICAgICAgICAgIC5hZGRRdWV1ZShyZW5kZXJpbmcuUXVldWVIaW50LkJMRU5ELCAnZGVmYXVsdCcsICdkZWZhdWx0JylcclxuICAgICAgICAgICAgLmFkZFNjZW5lKGNhbWVyYSwgZmxhZ3MpO1xyXG5cclxuICAgICAgICByZXR1cm4gcHJldlJlbmRlclBhc3M7XHJcbiAgICB9XHJcbn1cclxuXHJcbmlmIChyZW5kZXJpbmcpIHtcclxuXHJcbiAgICBjb25zdCB7IFF1ZXVlSGludCwgU2NlbmVGbGFncyB9ID0gcmVuZGVyaW5nO1xyXG5cclxuICAgIGNsYXNzIEJ1aWx0aW5QaXBlbGluZUJ1aWxkZXIgaW1wbGVtZW50cyByZW5kZXJpbmcuUGlwZWxpbmVCdWlsZGVyIHtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9waXBlbGluZUV2ZW50OiBQaXBlbGluZUV2ZW50UHJvY2Vzc29yID0gY2NsZWdhY3kuZGlyZWN0b3Iucm9vdC5waXBlbGluZUV2ZW50IGFzIFBpcGVsaW5lRXZlbnRQcm9jZXNzb3I7XHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfZm9yd2FyZFBhc3MgPSBuZXcgQnVpbHRpbkZvcndhcmRQYXNzQnVpbGRlcigpO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2Jsb29tUGFzcyA9IG5ldyBCdWlsdGluQmxvb21QYXNzQnVpbGRlcigpO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX3RvbmVNYXBwaW5nUGFzcyA9IG5ldyBCdWlsdGluVG9uZU1hcHBpbmdQYXNzQnVpbGRlcigpO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2Z4YWFQYXNzID0gbmV3IEJ1aWx0aW5GWEFBUGFzc0J1aWxkZXIoKTtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9mc3JQYXNzID0gbmV3IEJ1aWx0aW5Gc3JQYXNzQnVpbGRlcigpO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX3VpUGFzcyA9IG5ldyBCdWlsdGluVWlQYXNzQnVpbGRlcigpO1xyXG4gICAgICAgIC8vIEludGVybmFsIGNhY2hlZCByZXNvdXJjZXNcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9jbGVhckNvbG9yID0gbmV3IENvbG9yKDAsIDAsIDAsIDEpO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX3ZpZXdwb3J0ID0gbmV3IFZpZXdwb3J0KCk7XHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfY29uZmlncyA9IG5ldyBQaXBlbGluZUNvbmZpZ3MoKTtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9jYW1lcmFDb25maWdzID0gbmV3IENhbWVyYUNvbmZpZ3MoKTtcclxuICAgICAgICAvLyBNYXRlcmlhbHNcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9jb3B5QW5kVG9uZW1hcE1hdGVyaWFsID0gbmV3IE1hdGVyaWFsKCk7XHJcblxyXG4gICAgICAgIC8vIEludGVybmFsIFN0YXRlc1xyXG4gICAgICAgIHByaXZhdGUgX2luaXRpYWxpemVkID0gZmFsc2U7IC8vIFRPRE8oemhvdXpoZW5nbG9uZyk6IE1ha2UgZGVmYXVsdCBlZmZlY3QgYXNzZXQgbG9hZGluZyBlYXJsaWVyIGFuZCByZW1vdmUgdGhpcyBmbGFnXHJcbiAgICAgICAgcHJpdmF0ZSBfcGFzc0J1aWxkZXJzOiByZW5kZXJpbmcuUGlwZWxpbmVQYXNzQnVpbGRlcltdID0gW107XHJcblxyXG4gICAgICAgIHByaXZhdGUgX3NldHVwUGlwZWxpbmVQcmV2aWV3KFxyXG4gICAgICAgICAgICBjYW1lcmE6IHJlbmRlcmVyLnNjZW5lLkNhbWVyYSxcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlnczogQ2FtZXJhQ29uZmlncykge1xyXG4gICAgICAgICAgICBjb25zdCBpc0VkaXRvclZpZXc6IGJvb2xlYW5cclxuICAgICAgICAgICAgICAgID0gY2FtZXJhLmNhbWVyYVVzYWdlID09PSBDYW1lcmFVc2FnZS5TQ0VORV9WSUVXXHJcbiAgICAgICAgICAgICAgICB8fCBjYW1lcmEuY2FtZXJhVXNhZ2UgPT09IENhbWVyYVVzYWdlLlBSRVZJRVc7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNFZGl0b3JWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlZGl0b3JTZXR0aW5ncyA9IHJlbmRlcmluZy5nZXRFZGl0b3JQaXBlbGluZVNldHRpbmdzKCkgYXMgUGlwZWxpbmVTZXR0aW5ncyB8IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWRpdG9yU2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYW1lcmFDb25maWdzLnNldHRpbmdzID0gZWRpdG9yU2V0dGluZ3M7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3Muc2V0dGluZ3MgPSBkZWZhdWx0U2V0dGluZ3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FtZXJhLnBpcGVsaW5lU2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYW1lcmFDb25maWdzLnNldHRpbmdzID0gY2FtZXJhLnBpcGVsaW5lU2V0dGluZ3MgYXMgUGlwZWxpbmVTZXR0aW5ncztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5zZXR0aW5ncyA9IGRlZmF1bHRTZXR0aW5ncztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfcHJlcGFyZVBpcGVsaW5lUGFzc2VzKGNhbWVyYUNvbmZpZ3M6IENhbWVyYUNvbmZpZ3MpOiB2b2lkIHtcclxuICAgICAgICAgICAgY29uc3QgcGFzc0J1aWxkZXJzID0gdGhpcy5fcGFzc0J1aWxkZXJzO1xyXG4gICAgICAgICAgICBwYXNzQnVpbGRlcnMubGVuZ3RoID0gMDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNldHRpbmdzID0gY2FtZXJhQ29uZmlncy5zZXR0aW5ncyBhcyBQaXBlbGluZVNldHRpbmdzMjtcclxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLl9wYXNzZXMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFzcyBvZiBzZXR0aW5ncy5fcGFzc2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFzc0J1aWxkZXJzLnB1c2gocGFzcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQocGFzc0J1aWxkZXJzLmxlbmd0aCA9PT0gc2V0dGluZ3MuX3Bhc3Nlcy5sZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwYXNzQnVpbGRlcnMucHVzaCh0aGlzLl9mb3J3YXJkUGFzcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuYmxvb20uZW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgcGFzc0J1aWxkZXJzLnB1c2godGhpcy5fYmxvb21QYXNzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcGFzc0J1aWxkZXJzLnB1c2godGhpcy5fdG9uZU1hcHBpbmdQYXNzKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5meGFhLmVuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgIHBhc3NCdWlsZGVycy5wdXNoKHRoaXMuX2Z4YWFQYXNzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLmZzci5lbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICBwYXNzQnVpbGRlcnMucHVzaCh0aGlzLl9mc3JQYXNzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwYXNzQnVpbGRlcnMucHVzaCh0aGlzLl91aVBhc3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfc2V0dXBCdWlsdGluQ2FtZXJhQ29uZmlncyhcclxuICAgICAgICAgICAgY2FtZXJhOiByZW5kZXJlci5zY2VuZS5DYW1lcmEsXHJcbiAgICAgICAgICAgIHBpcGVsaW5lQ29uZmlnczogUGlwZWxpbmVDb25maWdzLFxyXG4gICAgICAgICAgICBjYW1lcmFDb25maWdzOiBDYW1lcmFDb25maWdzXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHdpbmRvdyA9IGNhbWVyYS53aW5kb3c7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzTWFpbkdhbWVXaW5kb3c6IGJvb2xlYW4gPSBjYW1lcmEuY2FtZXJhVXNhZ2UgPT09IENhbWVyYVVzYWdlLkdBTUUgJiYgISF3aW5kb3cuc3dhcGNoYWluO1xyXG5cclxuICAgICAgICAgICAgLy8gV2luZG93XHJcbiAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3MuaXNNYWluR2FtZVdpbmRvdyA9IGlzTWFpbkdhbWVXaW5kb3c7XHJcbiAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3MucmVuZGVyV2luZG93SWQgPSB3aW5kb3cucmVuZGVyV2luZG93SWQ7XHJcblxyXG4gICAgICAgICAgICAvLyBDYW1lcmFcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5jb2xvck5hbWUgPSB3aW5kb3cuY29sb3JOYW1lO1xyXG4gICAgICAgICAgICBjYW1lcmFDb25maWdzLmRlcHRoU3RlbmNpbE5hbWUgPSB3aW5kb3cuZGVwdGhTdGVuY2lsTmFtZTtcclxuXHJcbiAgICAgICAgICAgIC8vIFBpcGVsaW5lXHJcbiAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3MuZW5hYmxlRnVsbFBpcGVsaW5lID0gKGNhbWVyYS52aXNpYmlsaXR5ICYgKExheWVycy5FbnVtLkRFRkFVTFQpKSAhPT0gMDtcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5lbmFibGVQcm9maWxlciA9IERFQlVHICYmIGlzTWFpbkdhbWVXaW5kb3c7XHJcbiAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3MucmVtYWluaW5nUGFzc2VzID0gMDtcclxuXHJcbiAgICAgICAgICAgIC8vIFNoYWRpbmcgc2NhbGVcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5zaGFkaW5nU2NhbGUgPSBjYW1lcmFDb25maWdzLnNldHRpbmdzLnNoYWRpbmdTY2FsZTtcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5lbmFibGVTaGFkaW5nU2NhbGUgPSBjYW1lcmFDb25maWdzLnNldHRpbmdzLmVuYWJsZVNoYWRpbmdTY2FsZVxyXG4gICAgICAgICAgICAgICAgJiYgY2FtZXJhQ29uZmlncy5zaGFkaW5nU2NhbGUgIT09IDEuMDtcclxuXHJcbiAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3MubmF0aXZlV2lkdGggPSBNYXRoLm1heChNYXRoLmZsb29yKHdpbmRvdy53aWR0aCksIDEpO1xyXG4gICAgICAgICAgICBjYW1lcmFDb25maWdzLm5hdGl2ZUhlaWdodCA9IE1hdGgubWF4KE1hdGguZmxvb3Iod2luZG93LmhlaWdodCksIDEpO1xyXG5cclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy53aWR0aCA9IGNhbWVyYUNvbmZpZ3MuZW5hYmxlU2hhZGluZ1NjYWxlXHJcbiAgICAgICAgICAgICAgICA/IE1hdGgubWF4KE1hdGguZmxvb3IoY2FtZXJhQ29uZmlncy5uYXRpdmVXaWR0aCAqIGNhbWVyYUNvbmZpZ3Muc2hhZGluZ1NjYWxlKSwgMSlcclxuICAgICAgICAgICAgICAgIDogY2FtZXJhQ29uZmlncy5uYXRpdmVXaWR0aDtcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5oZWlnaHQgPSBjYW1lcmFDb25maWdzLmVuYWJsZVNoYWRpbmdTY2FsZVxyXG4gICAgICAgICAgICAgICAgPyBNYXRoLm1heChNYXRoLmZsb29yKGNhbWVyYUNvbmZpZ3MubmF0aXZlSGVpZ2h0ICogY2FtZXJhQ29uZmlncy5zaGFkaW5nU2NhbGUpLCAxKVxyXG4gICAgICAgICAgICAgICAgOiBjYW1lcmFDb25maWdzLm5hdGl2ZUhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIC8vIFJhZGlhbmNlXHJcbiAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3MuZW5hYmxlSERSID0gY2FtZXJhQ29uZmlncy5lbmFibGVGdWxsUGlwZWxpbmVcclxuICAgICAgICAgICAgICAgICYmIHBpcGVsaW5lQ29uZmlncy51c2VGbG9hdE91dHB1dDtcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5yYWRpYW5jZUZvcm1hdCA9IGNhbWVyYUNvbmZpZ3MuZW5hYmxlSERSXHJcbiAgICAgICAgICAgICAgICA/IGdmeC5Gb3JtYXQuUkdCQTE2RiA6IGdmeC5Gb3JtYXQuUkdCQTg7XHJcblxyXG4gICAgICAgICAgICAvLyBUb25lIE1hcHBpbmdcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlncy5jb3B5QW5kVG9uZW1hcE1hdGVyaWFsID0gdGhpcy5fY29weUFuZFRvbmVtYXBNYXRlcmlhbDtcclxuXHJcbiAgICAgICAgICAgIC8vIERlcHRoXHJcbiAgICAgICAgICAgIGNhbWVyYUNvbmZpZ3MuZW5hYmxlU3RvcmVTY2VuZURlcHRoID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIF9zZXR1cENhbWVyYUNvbmZpZ3MoXHJcbiAgICAgICAgICAgIGNhbWVyYTogcmVuZGVyZXIuc2NlbmUuQ2FtZXJhLFxyXG4gICAgICAgICAgICBwaXBlbGluZUNvbmZpZ3M6IFBpcGVsaW5lQ29uZmlncyxcclxuICAgICAgICAgICAgY2FtZXJhQ29uZmlnczogQ2FtZXJhQ29uZmlnc1xyXG4gICAgICAgICk6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXR1cFBpcGVsaW5lUHJldmlldyhjYW1lcmEsIGNhbWVyYUNvbmZpZ3MpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fcHJlcGFyZVBpcGVsaW5lUGFzc2VzKGNhbWVyYUNvbmZpZ3MpO1xyXG5cclxuICAgICAgICAgICAgc29ydFBpcGVsaW5lUGFzc0J1aWxkZXJzQnlDb25maWdPcmRlcih0aGlzLl9wYXNzQnVpbGRlcnMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fc2V0dXBCdWlsdGluQ2FtZXJhQ29uZmlncyhjYW1lcmEsIHBpcGVsaW5lQ29uZmlncywgY2FtZXJhQ29uZmlncyk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGJ1aWxkZXIgb2YgdGhpcy5fcGFzc0J1aWxkZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYnVpbGRlci5jb25maWdDYW1lcmEpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWlsZGVyLmNvbmZpZ0NhbWVyYShjYW1lcmEsIHBpcGVsaW5lQ29uZmlncywgY2FtZXJhQ29uZmlncyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAvLyBJbnRlcmZhY2VcclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgd2luZG93UmVzaXplKFxyXG4gICAgICAgICAgICBwcGw6IHJlbmRlcmluZy5CYXNpY1BpcGVsaW5lLFxyXG4gICAgICAgICAgICB3aW5kb3c6IHJlbmRlcmVyLlJlbmRlcldpbmRvdyxcclxuICAgICAgICAgICAgY2FtZXJhOiByZW5kZXJlci5zY2VuZS5DYW1lcmEsXHJcbiAgICAgICAgICAgIG5hdGl2ZVdpZHRoOiBudW1iZXIsXHJcbiAgICAgICAgICAgIG5hdGl2ZUhlaWdodDogbnVtYmVyLFxyXG4gICAgICAgICk6IHZvaWQge1xyXG4gICAgICAgICAgICBzZXR1cFBpcGVsaW5lQ29uZmlncyhwcGwsIHRoaXMuX2NvbmZpZ3MpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fc2V0dXBDYW1lcmFDb25maWdzKGNhbWVyYSwgdGhpcy5fY29uZmlncywgdGhpcy5fY2FtZXJhQ29uZmlncyk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZW5kZXIgV2luZG93IChVSSlcclxuICAgICAgICAgICAgY29uc3QgaWQgPSB3aW5kb3cucmVuZGVyV2luZG93SWQ7XHJcblxyXG4gICAgICAgICAgICBwcGwuYWRkUmVuZGVyV2luZG93KHRoaXMuX2NhbWVyYUNvbmZpZ3MuY29sb3JOYW1lLFxyXG4gICAgICAgICAgICAgICAgRm9ybWF0LlJHQkE4LCBuYXRpdmVXaWR0aCwgbmF0aXZlSGVpZ2h0LCB3aW5kb3csXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYW1lcmFDb25maWdzLmRlcHRoU3RlbmNpbE5hbWUpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLl9jYW1lcmFDb25maWdzLndpZHRoO1xyXG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLl9jYW1lcmFDb25maWdzLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYW1lcmFDb25maWdzLmVuYWJsZVNoYWRpbmdTY2FsZSkge1xyXG4gICAgICAgICAgICAgICAgcHBsLmFkZERlcHRoU3RlbmNpbChgU2NhbGVkU2NlbmVEZXB0aF8ke2lkfWAsIEZvcm1hdC5ERVBUSF9TVEVOQ0lMLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIHBwbC5hZGRSZW5kZXJUYXJnZXQoYFNjYWxlZFJhZGlhbmNlMF8ke2lkfWAsIHRoaXMuX2NhbWVyYUNvbmZpZ3MucmFkaWFuY2VGb3JtYXQsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgcHBsLmFkZFJlbmRlclRhcmdldChgU2NhbGVkUmFkaWFuY2UxXyR7aWR9YCwgdGhpcy5fY2FtZXJhQ29uZmlncy5yYWRpYW5jZUZvcm1hdCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBwcGwuYWRkUmVuZGVyVGFyZ2V0KGBTY2FsZWRMZHJDb2xvcjBfJHtpZH1gLCBGb3JtYXQuUkdCQTgsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgcHBsLmFkZFJlbmRlclRhcmdldChgU2NhbGVkTGRyQ29sb3IxXyR7aWR9YCwgRm9ybWF0LlJHQkE4LCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBwbC5hZGREZXB0aFN0ZW5jaWwoYFNjZW5lRGVwdGhfJHtpZH1gLCBGb3JtYXQuREVQVEhfU1RFTkNJTCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBwcGwuYWRkUmVuZGVyVGFyZ2V0KGBSYWRpYW5jZTBfJHtpZH1gLCB0aGlzLl9jYW1lcmFDb25maWdzLnJhZGlhbmNlRm9ybWF0LCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIHBwbC5hZGRSZW5kZXJUYXJnZXQoYFJhZGlhbmNlMV8ke2lkfWAsIHRoaXMuX2NhbWVyYUNvbmZpZ3MucmFkaWFuY2VGb3JtYXQsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgcHBsLmFkZFJlbmRlclRhcmdldChgTGRyQ29sb3IwXyR7aWR9YCwgRm9ybWF0LlJHQkE4LCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIHBwbC5hZGRSZW5kZXJUYXJnZXQoYExkckNvbG9yMV8ke2lkfWAsIEZvcm1hdC5SR0JBOCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHBsLmFkZFJlbmRlclRhcmdldChgVWlDb2xvcjBfJHtpZH1gLCBGb3JtYXQuUkdCQTgsIG5hdGl2ZVdpZHRoLCBuYXRpdmVIZWlnaHQpO1xyXG4gICAgICAgICAgICBwcGwuYWRkUmVuZGVyVGFyZ2V0KGBVaUNvbG9yMV8ke2lkfWAsIEZvcm1hdC5SR0JBOCwgbmF0aXZlV2lkdGgsIG5hdGl2ZUhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGJ1aWxkZXIgb2YgdGhpcy5fcGFzc0J1aWxkZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYnVpbGRlci53aW5kb3dSZXNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWlsZGVyLndpbmRvd1Jlc2l6ZShwcGwsIHRoaXMuX2NvbmZpZ3MsIHRoaXMuX2NhbWVyYUNvbmZpZ3MsIHdpbmRvdywgY2FtZXJhLCBuYXRpdmVXaWR0aCwgbmF0aXZlSGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzZXR1cChjYW1lcmFzOiByZW5kZXJlci5zY2VuZS5DYW1lcmFbXSwgcHBsOiByZW5kZXJpbmcuQmFzaWNQaXBlbGluZSk6IHZvaWQge1xyXG4gICAgICAgICAgICAvLyBUT0RPKHpob3V6aGVuZ2xvbmcpOiBNYWtlIGRlZmF1bHQgZWZmZWN0IGFzc2V0IGxvYWRpbmcgZWFybGllciBhbmQgcmVtb3ZlIF9pbml0TWF0ZXJpYWxzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbml0TWF0ZXJpYWxzKHBwbCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBSZW5kZXIgY2FtZXJhc1xyXG4gICAgICAgICAgICAvLyBsb2coYD09PT09PT09PT09PT09PT09PT09IE9uZSBGcmFtZSA9PT09PT09PT09PT09PT09PT09PWApO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNhbWVyYSBvZiBjYW1lcmFzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTa2lwIGludmFsaWQgY2FtZXJhXHJcbiAgICAgICAgICAgICAgICBpZiAoIWNhbWVyYS5zY2VuZSB8fCAhY2FtZXJhLndpbmRvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gU2V0dXAgY2FtZXJhIGNvbmZpZ3NcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldHVwQ2FtZXJhQ29uZmlncyhjYW1lcmEsIHRoaXMuX2NvbmZpZ3MsIHRoaXMuX2NhbWVyYUNvbmZpZ3MpO1xyXG4gICAgICAgICAgICAgICAgLy8gbG9nKGBTZXR1cCBjYW1lcmE6ICR7Y2FtZXJhLm5vZGUhLm5hbWV9LCB3aW5kb3c6ICR7Y2FtZXJhLndpbmRvdy5yZW5kZXJXaW5kb3dJZH0sIGlzRnVsbDogJHt0aGlzLl9jYW1lcmFDb25maWdzLmVuYWJsZUZ1bGxQaXBlbGluZX0sIGBcclxuICAgICAgICAgICAgICAgIC8vICAgICArIGBzaXplOiAke2NhbWVyYS53aW5kb3cud2lkdGh9eCR7Y2FtZXJhLndpbmRvdy5oZWlnaHR9YCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGlwZWxpbmVFdmVudC5lbWl0KFBpcGVsaW5lRXZlbnRUeXBlLlJFTkRFUl9DQU1FUkFfQkVHSU4sIGNhbWVyYSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQnVpbGQgcGlwZWxpbmVcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jYW1lcmFDb25maWdzLmVuYWJsZUZ1bGxQaXBlbGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2J1aWxkRm9yd2FyZFBpcGVsaW5lKHBwbCwgY2FtZXJhLCBjYW1lcmEuc2NlbmUsIHRoaXMuX3Bhc3NCdWlsZGVycyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2J1aWxkU2ltcGxlUGlwZWxpbmUocHBsLCBjYW1lcmEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3BpcGVsaW5lRXZlbnQuZW1pdChQaXBlbGluZUV2ZW50VHlwZS5SRU5ERVJfQ0FNRVJBX0VORCwgY2FtZXJhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgLy8gUGlwZWxpbmVzXHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIHByaXZhdGUgX2J1aWxkU2ltcGxlUGlwZWxpbmUoXHJcbiAgICAgICAgICAgIHBwbDogcmVuZGVyaW5nLkJhc2ljUGlwZWxpbmUsXHJcbiAgICAgICAgICAgIGNhbWVyYTogcmVuZGVyZXIuc2NlbmUuQ2FtZXJhLFxyXG4gICAgICAgICk6IHZvaWQge1xyXG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IE1hdGgubWF4KE1hdGguZmxvb3IoY2FtZXJhLndpbmRvdy53aWR0aCksIDEpO1xyXG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBNYXRoLm1heChNYXRoLmZsb29yKGNhbWVyYS53aW5kb3cuaGVpZ2h0KSwgMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yTmFtZSA9IHRoaXMuX2NhbWVyYUNvbmZpZ3MuY29sb3JOYW1lO1xyXG4gICAgICAgICAgICBjb25zdCBkZXB0aFN0ZW5jaWxOYW1lID0gdGhpcy5fY2FtZXJhQ29uZmlncy5kZXB0aFN0ZW5jaWxOYW1lO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgdmlld3BvcnQgPSBjYW1lcmEudmlld3BvcnQ7ICAvLyBSZWR1Y2UgQysrL1RTIGludGVyb3BcclxuICAgICAgICAgICAgdGhpcy5fdmlld3BvcnQubGVmdCA9IE1hdGgucm91bmQodmlld3BvcnQueCAqIHdpZHRoKTtcclxuICAgICAgICAgICAgdGhpcy5fdmlld3BvcnQudG9wID0gTWF0aC5yb3VuZCh2aWV3cG9ydC55ICogaGVpZ2h0KTtcclxuICAgICAgICAgICAgLy8gSGVyZSB3ZSBtdXN0IHVzZSBjYW1lcmEudmlld3BvcnQud2lkdGggaW5zdGVhZCBvZiBjYW1lcmEudmlld3BvcnQueiwgd2hpY2hcclxuICAgICAgICAgICAgLy8gaXMgdW5kZWZpbmVkIG9uIG5hdGl2ZSBwbGF0Zm9ybS4gVGhlIHNhbWUgYXMgY2FtZXJhLnZpZXdwb3J0LmhlaWdodC5cclxuICAgICAgICAgICAgdGhpcy5fdmlld3BvcnQud2lkdGggPSBNYXRoLm1heChNYXRoLnJvdW5kKHZpZXdwb3J0LndpZHRoICogd2lkdGgpLCAxKTtcclxuICAgICAgICAgICAgdGhpcy5fdmlld3BvcnQuaGVpZ2h0ID0gTWF0aC5tYXgoTWF0aC5yb3VuZCh2aWV3cG9ydC5oZWlnaHQgKiBoZWlnaHQpLCAxKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNsZWFyQ29sb3IgPSBjYW1lcmEuY2xlYXJDb2xvcjsgIC8vIFJlZHVjZSBDKysvVFMgaW50ZXJvcFxyXG4gICAgICAgICAgICB0aGlzLl9jbGVhckNvbG9yLnggPSBjbGVhckNvbG9yLng7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsZWFyQ29sb3IueSA9IGNsZWFyQ29sb3IueTtcclxuICAgICAgICAgICAgdGhpcy5fY2xlYXJDb2xvci56ID0gY2xlYXJDb2xvci56O1xyXG4gICAgICAgICAgICB0aGlzLl9jbGVhckNvbG9yLncgPSBjbGVhckNvbG9yLnc7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwYXNzID0gcHBsLmFkZFJlbmRlclBhc3Mod2lkdGgsIGhlaWdodCwgJ2RlZmF1bHQnKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGJpbmQgb3V0cHV0IHJlbmRlciB0YXJnZXRcclxuICAgICAgICAgICAgaWYgKGZvcndhcmROZWVkQ2xlYXJDb2xvcihjYW1lcmEpKSB7XHJcbiAgICAgICAgICAgICAgICBwYXNzLmFkZFJlbmRlclRhcmdldChjb2xvck5hbWUsIExvYWRPcC5DTEVBUiwgU3RvcmVPcC5TVE9SRSwgdGhpcy5fY2xlYXJDb2xvcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwYXNzLmFkZFJlbmRlclRhcmdldChjb2xvck5hbWUsIExvYWRPcC5MT0FELCBTdG9yZU9wLlNUT1JFKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gYmluZCBkZXB0aCBzdGVuY2lsIGJ1ZmZlclxyXG4gICAgICAgICAgICBpZiAoY2FtZXJhLmNsZWFyRmxhZyAmIENsZWFyRmxhZ0JpdC5ERVBUSF9TVEVOQ0lMKSB7XHJcbiAgICAgICAgICAgICAgICBwYXNzLmFkZERlcHRoU3RlbmNpbChcclxuICAgICAgICAgICAgICAgICAgICBkZXB0aFN0ZW5jaWxOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIExvYWRPcC5DTEVBUixcclxuICAgICAgICAgICAgICAgICAgICBTdG9yZU9wLkRJU0NBUkQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhLmNsZWFyRGVwdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhLmNsZWFyU3RlbmNpbCxcclxuICAgICAgICAgICAgICAgICAgICBjYW1lcmEuY2xlYXJGbGFnICYgQ2xlYXJGbGFnQml0LkRFUFRIX1NURU5DSUwsXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGFzcy5hZGREZXB0aFN0ZW5jaWwoZGVwdGhTdGVuY2lsTmFtZSwgTG9hZE9wLkxPQUQsIFN0b3JlT3AuRElTQ0FSRCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHBhc3Muc2V0Vmlld3BvcnQodGhpcy5fdmlld3BvcnQpO1xyXG5cclxuICAgICAgICAgICAgLy8gVGhlIG9wYXF1ZSBxdWV1ZSBpcyB1c2VkIGZvciBSZWZsZWN0aW9uIHByb2JlIHByZXZpZXdcclxuICAgICAgICAgICAgcGFzcy5hZGRRdWV1ZShRdWV1ZUhpbnQuT1BBUVVFKVxyXG4gICAgICAgICAgICAgICAgLmFkZFNjZW5lKGNhbWVyYSwgU2NlbmVGbGFncy5PUEFRVUUpO1xyXG5cclxuICAgICAgICAgICAgLy8gVGhlIGJsZW5kIHF1ZXVlIGlzIHVzZWQgZm9yIFVJIGFuZCBHaXptb3NcclxuICAgICAgICAgICAgbGV0IGZsYWdzID0gU2NlbmVGbGFncy5CTEVORCB8IFNjZW5lRmxhZ3MuVUk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYW1lcmFDb25maWdzLmVuYWJsZVByb2ZpbGVyKSB7XHJcbiAgICAgICAgICAgICAgICBmbGFncyB8PSBTY2VuZUZsYWdzLlBST0ZJTEVSO1xyXG4gICAgICAgICAgICAgICAgcGFzcy5zaG93U3RhdGlzdGljcyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGFzcy5hZGRRdWV1ZShRdWV1ZUhpbnQuQkxFTkQpXHJcbiAgICAgICAgICAgICAgICAuYWRkU2NlbmUoY2FtZXJhLCBmbGFncyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIF9idWlsZEZvcndhcmRQaXBlbGluZShcclxuICAgICAgICAgICAgcHBsOiByZW5kZXJpbmcuQmFzaWNQaXBlbGluZSxcclxuICAgICAgICAgICAgY2FtZXJhOiByZW5kZXJlci5zY2VuZS5DYW1lcmEsXHJcbiAgICAgICAgICAgIHNjZW5lOiByZW5kZXJlci5SZW5kZXJTY2VuZSxcclxuICAgICAgICAgICAgcGFzc0J1aWxkZXJzOiByZW5kZXJpbmcuUGlwZWxpbmVQYXNzQnVpbGRlcltdLFxyXG4gICAgICAgICk6IHZvaWQge1xyXG4gICAgICAgICAgICBzb3J0UGlwZWxpbmVQYXNzQnVpbGRlcnNCeVJlbmRlck9yZGVyKHBhc3NCdWlsZGVycyk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0OiBQaXBlbGluZUNvbnRleHQgPSB7XHJcbiAgICAgICAgICAgICAgICBjb2xvck5hbWU6ICcnLFxyXG4gICAgICAgICAgICAgICAgZGVwdGhTdGVuY2lsTmFtZTogJycsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBsZXQgbGFzdFBhc3M6IHJlbmRlcmluZy5CYXNpY1JlbmRlclBhc3NCdWlsZGVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBidWlsZGVyIG9mIHBhc3NCdWlsZGVycykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ1aWxkZXIuc2V0dXApIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0UGFzcyA9IGJ1aWxkZXIuc2V0dXAocHBsLCB0aGlzLl9jb25maWdzLCB0aGlzLl9jYW1lcmFDb25maWdzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW1lcmEsIGNvbnRleHQsIGxhc3RQYXNzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuX2NhbWVyYUNvbmZpZ3MucmVtYWluaW5nUGFzc2VzID09PSAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgX2luaXRNYXRlcmlhbHMocHBsOiByZW5kZXJpbmcuQmFzaWNQaXBlbGluZSk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldHVwUGlwZWxpbmVDb25maWdzKHBwbCwgdGhpcy5fY29uZmlncyk7XHJcblxyXG4gICAgICAgICAgICAvLyBXaGVuIGFkZCBuZXcgZWZmZWN0IGFzc2V0LCBwbGVhc2UgYWRkIGl0cyB1dWlkIHRvIHRoZSBkZXBlbmRlbnRBc3NldHMgaW4gY2MuY29uZmlnLmpzb24uXHJcbiAgICAgICAgICAgIHRoaXMuX2NvcHlBbmRUb25lbWFwTWF0ZXJpYWwuX3V1aWQgPSBgYnVpbHRpbi1waXBlbGluZS10b25lLW1hcHBpbmctbWF0ZXJpYWxgO1xyXG4gICAgICAgICAgICB0aGlzLl9jb3B5QW5kVG9uZW1hcE1hdGVyaWFsLmluaXRpYWxpemUoeyBlZmZlY3ROYW1lOiAncGlwZWxpbmUvcG9zdC1wcm9jZXNzL3RvbmUtbWFwcGluZycgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fY29weUFuZFRvbmVtYXBNYXRlcmlhbC5lZmZlY3RBc3NldCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5pdGlhbGl6ZWQgPyAwIDogMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyaW5nLnNldEN1c3RvbVBpcGVsaW5lKCdCdWlsdGluJywgbmV3IEJ1aWx0aW5QaXBlbGluZUJ1aWxkZXIoKSk7XHJcblxyXG59IC8vIGlmIChyZW5kZXJpbmcpXHJcbiIsImV4cG9ydCBjb25zdCBIVE1MNSA9IHRydWU7XG5leHBvcnQgY29uc3QgTkFUSVZFID0gZmFsc2U7XG5leHBvcnQgY29uc3QgQU5EUk9JRCA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IElPUyA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IE1BQyA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IFdJTkRPV1MgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBMSU5VWCA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IE9IT1MgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBPUEVOX0hBUk1PTlkgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBXRUNIQVQgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBXRUNIQVRfTUlOSV9QUk9HUkFNID0gZmFsc2U7XG5leHBvcnQgY29uc3QgQkFJRFUgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBYSUFPTUkgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBBTElQQVkgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBUQU9CQU8gPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBUQU9CQU9fTUlOSUdBTUUgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBCWVRFREFOQ0UgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBPUFBPID0gZmFsc2U7XG5leHBvcnQgY29uc3QgVklWTyA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IEhVQVdFSSA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IENPQ09TUExBWSA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IFFUVCA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IExJTktTVVJFID0gZmFsc2U7XG5leHBvcnQgY29uc3QgTUlHVSA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IEVESVRPUiA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IEVESVRPUl9OT1RfSU5fUFJFVklFVyA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IFBSRVZJRVcgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBCVUlMRCA9IHRydWU7XG5leHBvcnQgY29uc3QgVEVTVCA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IERFQlVHID0gZmFsc2U7XG5leHBvcnQgY29uc3QgREVWID0gZmFsc2U7XG5leHBvcnQgY29uc3QgTUlOSUdBTUUgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBSVU5USU1FX0JBU0VEID0gZmFsc2U7XG5leHBvcnQgY29uc3QgU1VQUE9SVF9KSVQgPSB0cnVlO1xuZXhwb3J0IGNvbnN0IEpTQiA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IE5FVF9NT0RFID0gMDsiLCJleHBvcnQgeyBfQXN5bmNHZW5lcmF0b3IgYXMgQXN5bmNHZW5lcmF0b3IsIF9PdmVybG9hZFlpZWxkIGFzIE92ZXJsb2FkWWllbGQsIF9hcHBseURlY3MgYXMgYXBwbHlEZWNzLCBfYXBwbHlEZWNzMjIwMyBhcyBhcHBseURlY3MyMjAzLCBfYXBwbHlEZWNzMjIwM1IgYXMgYXBwbHlEZWNzMjIwM1IsIF9hcHBseURlY3MyMzAxIGFzIGFwcGx5RGVjczIzMDEsIF9hcHBseURlY3MyMzA1IGFzIGFwcGx5RGVjczIzMDUsIF9hc3luY0dlbmVyYXRvckRlbGVnYXRlIGFzIGFzeW5jR2VuZXJhdG9yRGVsZWdhdGUsIF9hc3luY0l0ZXJhdG9yIGFzIGFzeW5jSXRlcmF0b3IsIF9hd2FpdEFzeW5jR2VuZXJhdG9yIGFzIGF3YWl0QXN5bmNHZW5lcmF0b3IsIF9jaGVja0luUkhTIGFzIGNoZWNrSW5SSFMsIF9kZWZpbmVBY2Nlc3NvciBhcyBkZWZpbmVBY2Nlc3NvciwgX2Rpc3Bvc2UgYXMgZGlzcG9zZSwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0IGFzIGl0ZXJhYmxlVG9BcnJheUxpbWl0LCBfaXRlcmFibGVUb0FycmF5TGltaXRMb29zZSBhcyBpdGVyYWJsZVRvQXJyYXlMaW1pdExvb3NlLCBfanN4IGFzIGpzeCwgX29iamVjdFNwcmVhZDIgYXMgb2JqZWN0U3ByZWFkMiwgX3JlZ2VuZXJhdG9yUnVudGltZSBhcyByZWdlbmVyYXRvclJ1bnRpbWUsIF90eXBlb2YgYXMgdHlwZW9mLCBfdXNpbmcgYXMgdXNpbmcsIF93cmFwUmVnRXhwIGFzIHdyYXBSZWdFeHAsIF9Bd2FpdFZhbHVlIGFzIEF3YWl0VmFsdWUsIF93cmFwQXN5bmNHZW5lcmF0b3IgYXMgd3JhcEFzeW5jR2VuZXJhdG9yLCBfYXN5bmNUb0dlbmVyYXRvciBhcyBhc3luY1RvR2VuZXJhdG9yLCBfY2xhc3NDYWxsQ2hlY2sgYXMgY2xhc3NDYWxsQ2hlY2ssIF9jcmVhdGVDbGFzcyBhcyBjcmVhdGVDbGFzcywgX2RlZmluZUVudW1lcmFibGVQcm9wZXJ0aWVzIGFzIGRlZmluZUVudW1lcmFibGVQcm9wZXJ0aWVzLCBfZGVmYXVsdHMgYXMgZGVmYXVsdHMsIF9kZWZpbmVQcm9wZXJ0eSBhcyBkZWZpbmVQcm9wZXJ0eSwgX2V4dGVuZHMgYXMgZXh0ZW5kcywgX29iamVjdFNwcmVhZCBhcyBvYmplY3RTcHJlYWQsIF9pbmhlcml0cyBhcyBpbmhlcml0cywgX2luaGVyaXRzTG9vc2UgYXMgaW5oZXJpdHNMb29zZSwgX2dldFByb3RvdHlwZU9mIGFzIGdldFByb3RvdHlwZU9mLCBfc2V0UHJvdG90eXBlT2YgYXMgc2V0UHJvdG90eXBlT2YsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgYXMgaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0LCBfY29uc3RydWN0IGFzIGNvbnN0cnVjdCwgX2lzTmF0aXZlRnVuY3Rpb24gYXMgaXNOYXRpdmVGdW5jdGlvbiwgX3dyYXBOYXRpdmVTdXBlciBhcyB3cmFwTmF0aXZlU3VwZXIsIF9pbnN0YW5jZW9mIGFzIGluc3RhbmNlb2YsIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgYXMgaW50ZXJvcFJlcXVpcmVEZWZhdWx0LCBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCBhcyBpbnRlcm9wUmVxdWlyZVdpbGRjYXJkLCBfbmV3QXJyb3dDaGVjayBhcyBuZXdBcnJvd0NoZWNrLCBfb2JqZWN0RGVzdHJ1Y3R1cmluZ0VtcHR5IGFzIG9iamVjdERlc3RydWN0dXJpbmdFbXB0eSwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgYXMgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGFzIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGFzIGFzc2VydFRoaXNJbml0aWFsaXplZCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gYXMgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiwgX2NyZWF0ZVN1cGVyIGFzIGNyZWF0ZVN1cGVyLCBfc3VwZXJQcm9wQmFzZSBhcyBzdXBlclByb3BCYXNlLCBfZ2V0IGFzIGdldCwgX3NldCBhcyBzZXQsIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwgYXMgdGFnZ2VkVGVtcGxhdGVMaXRlcmFsLCBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UgYXMgdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UsIF9yZWFkT25seUVycm9yIGFzIHJlYWRPbmx5RXJyb3IsIF93cml0ZU9ubHlFcnJvciBhcyB3cml0ZU9ubHlFcnJvciwgX2NsYXNzTmFtZVREWkVycm9yIGFzIGNsYXNzTmFtZVREWkVycm9yLCBfdGVtcG9yYWxVbmRlZmluZWQgYXMgdGVtcG9yYWxVbmRlZmluZWQsIF90ZHogYXMgdGR6LCBfdGVtcG9yYWxSZWYgYXMgdGVtcG9yYWxSZWYsIF9zbGljZWRUb0FycmF5IGFzIHNsaWNlZFRvQXJyYXksIF9zbGljZWRUb0FycmF5TG9vc2UgYXMgc2xpY2VkVG9BcnJheUxvb3NlLCBfdG9BcnJheSBhcyB0b0FycmF5LCBfdG9Db25zdW1hYmxlQXJyYXkgYXMgdG9Db25zdW1hYmxlQXJyYXksIF9hcnJheVdpdGhvdXRIb2xlcyBhcyBhcnJheVdpdGhvdXRIb2xlcywgX2FycmF5V2l0aEhvbGVzIGFzIGFycmF5V2l0aEhvbGVzLCBfbWF5YmVBcnJheUxpa2UgYXMgbWF5YmVBcnJheUxpa2UsIF9pdGVyYWJsZVRvQXJyYXkgYXMgaXRlcmFibGVUb0FycmF5LCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgYXMgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXksIF9hcnJheUxpa2VUb0FycmF5IGFzIGFycmF5TGlrZVRvQXJyYXksIF9ub25JdGVyYWJsZVNwcmVhZCBhcyBub25JdGVyYWJsZVNwcmVhZCwgX25vbkl0ZXJhYmxlUmVzdCBhcyBub25JdGVyYWJsZVJlc3QsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGFzIGNyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UgYXMgY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlLCBfc2tpcEZpcnN0R2VuZXJhdG9yTmV4dCBhcyBza2lwRmlyc3RHZW5lcmF0b3JOZXh0LCBfdG9QcmltaXRpdmUgYXMgdG9QcmltaXRpdmUsIF90b1Byb3BlcnR5S2V5IGFzIHRvUHJvcGVydHlLZXksIF9pbml0aWFsaXplcldhcm5pbmdIZWxwZXIgYXMgaW5pdGlhbGl6ZXJXYXJuaW5nSGVscGVyLCBfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSBhcyBpbml0aWFsaXplckRlZmluZVByb3BlcnR5LCBfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yIGFzIGFwcGx5RGVjb3JhdGVkRGVzY3JpcHRvciwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkgYXMgY2xhc3NQcml2YXRlRmllbGRMb29zZUtleSwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlIGFzIGNsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlLCBfY2xhc3NQcml2YXRlRmllbGRHZXQgYXMgY2xhc3NQcml2YXRlRmllbGRHZXQsIF9jbGFzc1ByaXZhdGVGaWVsZFNldCBhcyBjbGFzc1ByaXZhdGVGaWVsZFNldCwgX2NsYXNzUHJpdmF0ZUZpZWxkRGVzdHJ1Y3R1cmVTZXQgYXMgY2xhc3NQcml2YXRlRmllbGREZXN0cnVjdHVyZVNldCwgX2NsYXNzRXh0cmFjdEZpZWxkRGVzY3JpcHRvciBhcyBjbGFzc0V4dHJhY3RGaWVsZERlc2NyaXB0b3IsIF9jbGFzc1N0YXRpY1ByaXZhdGVGaWVsZFNwZWNHZXQgYXMgY2xhc3NTdGF0aWNQcml2YXRlRmllbGRTcGVjR2V0LCBfY2xhc3NTdGF0aWNQcml2YXRlRmllbGRTcGVjU2V0IGFzIGNsYXNzU3RhdGljUHJpdmF0ZUZpZWxkU3BlY1NldCwgX2NsYXNzU3RhdGljUHJpdmF0ZU1ldGhvZEdldCBhcyBjbGFzc1N0YXRpY1ByaXZhdGVNZXRob2RHZXQsIF9jbGFzc1N0YXRpY1ByaXZhdGVNZXRob2RTZXQgYXMgY2xhc3NTdGF0aWNQcml2YXRlTWV0aG9kU2V0LCBfY2xhc3NBcHBseURlc2NyaXB0b3JHZXQgYXMgY2xhc3NBcHBseURlc2NyaXB0b3JHZXQsIF9jbGFzc0FwcGx5RGVzY3JpcHRvclNldCBhcyBjbGFzc0FwcGx5RGVzY3JpcHRvclNldCwgX2NsYXNzQXBwbHlEZXNjcmlwdG9yRGVzdHJ1Y3R1cmVTZXQgYXMgY2xhc3NBcHBseURlc2NyaXB0b3JEZXN0cnVjdHVyZVNldCwgX2NsYXNzU3RhdGljUHJpdmF0ZUZpZWxkRGVzdHJ1Y3R1cmVTZXQgYXMgY2xhc3NTdGF0aWNQcml2YXRlRmllbGREZXN0cnVjdHVyZVNldCwgX2NsYXNzQ2hlY2tQcml2YXRlU3RhdGljQWNjZXNzIGFzIGNsYXNzQ2hlY2tQcml2YXRlU3RhdGljQWNjZXNzLCBfY2xhc3NDaGVja1ByaXZhdGVTdGF0aWNGaWVsZERlc2NyaXB0b3IgYXMgY2xhc3NDaGVja1ByaXZhdGVTdGF0aWNGaWVsZERlc2NyaXB0b3IsIF9kZWNvcmF0ZSBhcyBkZWNvcmF0ZSwgX2NsYXNzUHJpdmF0ZU1ldGhvZEdldCBhcyBjbGFzc1ByaXZhdGVNZXRob2RHZXQsIF9jaGVja1ByaXZhdGVSZWRlY2xhcmF0aW9uIGFzIGNoZWNrUHJpdmF0ZVJlZGVjbGFyYXRpb24sIF9jbGFzc1ByaXZhdGVGaWVsZEluaXRTcGVjIGFzIGNsYXNzUHJpdmF0ZUZpZWxkSW5pdFNwZWMsIF9jbGFzc1ByaXZhdGVNZXRob2RJbml0U3BlYyBhcyBjbGFzc1ByaXZhdGVNZXRob2RJbml0U3BlYywgX2NsYXNzUHJpdmF0ZU1ldGhvZFNldCBhcyBjbGFzc1ByaXZhdGVNZXRob2RTZXQsIF9pZGVudGl0eSBhcyBpZGVudGl0eSB9O1xuZnVuY3Rpb24gX0FzeW5jR2VuZXJhdG9yKGUpIHtcbiAgdmFyIHIsIHQ7XG4gIGZ1bmN0aW9uIHJlc3VtZShyLCB0KSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBuID0gZVtyXSh0KSxcbiAgICAgICAgbyA9IG4udmFsdWUsXG4gICAgICAgIHUgPSBvIGluc3RhbmNlb2YgX092ZXJsb2FkWWllbGQ7XG4gICAgICBQcm9taXNlLnJlc29sdmUodSA/IG8udiA6IG8pLnRoZW4oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgaWYgKHUpIHtcbiAgICAgICAgICB2YXIgaSA9IFwicmV0dXJuXCIgPT09IHIgPyBcInJldHVyblwiIDogXCJuZXh0XCI7XG4gICAgICAgICAgaWYgKCFvLmsgfHwgdC5kb25lKSByZXR1cm4gcmVzdW1lKGksIHQpO1xuICAgICAgICAgIHQgPSBlW2ldKHQpLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHNldHRsZShuLmRvbmUgPyBcInJldHVyblwiIDogXCJub3JtYWxcIiwgdCk7XG4gICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXN1bWUoXCJ0aHJvd1wiLCBlKTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHNldHRsZShcInRocm93XCIsIGUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzZXR0bGUoZSwgbikge1xuICAgIHN3aXRjaCAoZSkge1xuICAgICAgY2FzZSBcInJldHVyblwiOlxuICAgICAgICByLnJlc29sdmUoe1xuICAgICAgICAgIHZhbHVlOiBuLFxuICAgICAgICAgIGRvbmU6ICEwXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJ0aHJvd1wiOlxuICAgICAgICByLnJlamVjdChuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByLnJlc29sdmUoe1xuICAgICAgICAgIHZhbHVlOiBuLFxuICAgICAgICAgIGRvbmU6ICExXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAociA9IHIubmV4dCkgPyByZXN1bWUoci5rZXksIHIuYXJnKSA6IHQgPSBudWxsO1xuICB9XG4gIHRoaXMuX2ludm9rZSA9IGZ1bmN0aW9uIChlLCBuKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChvLCB1KSB7XG4gICAgICB2YXIgaSA9IHtcbiAgICAgICAga2V5OiBlLFxuICAgICAgICBhcmc6IG4sXG4gICAgICAgIHJlc29sdmU6IG8sXG4gICAgICAgIHJlamVjdDogdSxcbiAgICAgICAgbmV4dDogbnVsbFxuICAgICAgfTtcbiAgICAgIHQgPyB0ID0gdC5uZXh0ID0gaSA6IChyID0gdCA9IGksIHJlc3VtZShlLCBuKSk7XG4gICAgfSk7XG4gIH0sIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZS5yZXR1cm4gJiYgKHRoaXMucmV0dXJuID0gdm9pZCAwKTtcbn1cbl9Bc3luY0dlbmVyYXRvci5wcm90b3R5cGVbXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIl0gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufSwgX0FzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKGUpIHtcbiAgcmV0dXJuIHRoaXMuX2ludm9rZShcIm5leHRcIiwgZSk7XG59LCBfQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlLnRocm93ID0gZnVuY3Rpb24gKGUpIHtcbiAgcmV0dXJuIHRoaXMuX2ludm9rZShcInRocm93XCIsIGUpO1xufSwgX0FzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5yZXR1cm4gPSBmdW5jdGlvbiAoZSkge1xuICByZXR1cm4gdGhpcy5faW52b2tlKFwicmV0dXJuXCIsIGUpO1xufTtcbmZ1bmN0aW9uIF9PdmVybG9hZFlpZWxkKHQsIGUpIHtcbiAgdGhpcy52ID0gdCwgdGhpcy5rID0gZTtcbn1cbmZ1bmN0aW9uIG9sZF9jcmVhdGVNZXRhZGF0YU1ldGhvZHNGb3JQcm9wZXJ0eShlLCB0LCBhLCByKSB7XG4gIHJldHVybiB7XG4gICAgZ2V0TWV0YWRhdGE6IGZ1bmN0aW9uIChvKSB7XG4gICAgICBvbGRfYXNzZXJ0Tm90RmluaXNoZWQociwgXCJnZXRNZXRhZGF0YVwiKSwgb2xkX2Fzc2VydE1ldGFkYXRhS2V5KG8pO1xuICAgICAgdmFyIGkgPSBlW29dO1xuICAgICAgaWYgKHZvaWQgMCAhPT0gaSkgaWYgKDEgPT09IHQpIHtcbiAgICAgICAgdmFyIG4gPSBpLnB1YmxpYztcbiAgICAgICAgaWYgKHZvaWQgMCAhPT0gbikgcmV0dXJuIG5bYV07XG4gICAgICB9IGVsc2UgaWYgKDIgPT09IHQpIHtcbiAgICAgICAgdmFyIGwgPSBpLnByaXZhdGU7XG4gICAgICAgIGlmICh2b2lkIDAgIT09IGwpIHJldHVybiBsLmdldChhKTtcbiAgICAgIH0gZWxzZSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoaSwgXCJjb25zdHJ1Y3RvclwiKSkgcmV0dXJuIGkuY29uc3RydWN0b3I7XG4gICAgfSxcbiAgICBzZXRNZXRhZGF0YTogZnVuY3Rpb24gKG8sIGkpIHtcbiAgICAgIG9sZF9hc3NlcnROb3RGaW5pc2hlZChyLCBcInNldE1ldGFkYXRhXCIpLCBvbGRfYXNzZXJ0TWV0YWRhdGFLZXkobyk7XG4gICAgICB2YXIgbiA9IGVbb107XG4gICAgICBpZiAodm9pZCAwID09PSBuICYmIChuID0gZVtvXSA9IHt9KSwgMSA9PT0gdCkge1xuICAgICAgICB2YXIgbCA9IG4ucHVibGljO1xuICAgICAgICB2b2lkIDAgPT09IGwgJiYgKGwgPSBuLnB1YmxpYyA9IHt9KSwgbFthXSA9IGk7XG4gICAgICB9IGVsc2UgaWYgKDIgPT09IHQpIHtcbiAgICAgICAgdmFyIHMgPSBuLnByaXY7XG4gICAgICAgIHZvaWQgMCA9PT0gcyAmJiAocyA9IG4ucHJpdmF0ZSA9IG5ldyBNYXAoKSksIHMuc2V0KGEsIGkpO1xuICAgICAgfSBlbHNlIG4uY29uc3RydWN0b3IgPSBpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIG9sZF9jb252ZXJ0TWV0YWRhdGFNYXBUb0ZpbmFsKGUsIHQpIHtcbiAgdmFyIGEgPSBlW1N5bWJvbC5tZXRhZGF0YSB8fCBTeW1ib2wuZm9yKFwiU3ltYm9sLm1ldGFkYXRhXCIpXSxcbiAgICByID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KTtcbiAgaWYgKDAgIT09IHIubGVuZ3RoKSB7XG4gICAgZm9yICh2YXIgbyA9IDA7IG8gPCByLmxlbmd0aDsgbysrKSB7XG4gICAgICB2YXIgaSA9IHJbb10sXG4gICAgICAgIG4gPSB0W2ldLFxuICAgICAgICBsID0gYSA/IGFbaV0gOiBudWxsLFxuICAgICAgICBzID0gbi5wdWJsaWMsXG4gICAgICAgIGMgPSBsID8gbC5wdWJsaWMgOiBudWxsO1xuICAgICAgcyAmJiBjICYmIE9iamVjdC5zZXRQcm90b3R5cGVPZihzLCBjKTtcbiAgICAgIHZhciBkID0gbi5wcml2YXRlO1xuICAgICAgaWYgKGQpIHtcbiAgICAgICAgdmFyIHUgPSBBcnJheS5mcm9tKGQudmFsdWVzKCkpLFxuICAgICAgICAgIGYgPSBsID8gbC5wcml2YXRlIDogbnVsbDtcbiAgICAgICAgZiAmJiAodSA9IHUuY29uY2F0KGYpKSwgbi5wcml2YXRlID0gdTtcbiAgICAgIH1cbiAgICAgIGwgJiYgT2JqZWN0LnNldFByb3RvdHlwZU9mKG4sIGwpO1xuICAgIH1cbiAgICBhICYmIE9iamVjdC5zZXRQcm90b3R5cGVPZih0LCBhKSwgZVtTeW1ib2wubWV0YWRhdGEgfHwgU3ltYm9sLmZvcihcIlN5bWJvbC5tZXRhZGF0YVwiKV0gPSB0O1xuICB9XG59XG5mdW5jdGlvbiBvbGRfY3JlYXRlQWRkSW5pdGlhbGl6ZXJNZXRob2QoZSwgdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICBvbGRfYXNzZXJ0Tm90RmluaXNoZWQodCwgXCJhZGRJbml0aWFsaXplclwiKSwgb2xkX2Fzc2VydENhbGxhYmxlKGEsIFwiQW4gaW5pdGlhbGl6ZXJcIiksIGUucHVzaChhKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIG9sZF9tZW1iZXJEZWMoZSwgdCwgYSwgciwgbywgaSwgbiwgbCwgcykge1xuICB2YXIgYztcbiAgc3dpdGNoIChpKSB7XG4gICAgY2FzZSAxOlxuICAgICAgYyA9IFwiYWNjZXNzb3JcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIGMgPSBcIm1ldGhvZFwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgYyA9IFwiZ2V0dGVyXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBjID0gXCJzZXR0ZXJcIjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBjID0gXCJmaWVsZFwiO1xuICB9XG4gIHZhciBkLFxuICAgIHUsXG4gICAgZiA9IHtcbiAgICAgIGtpbmQ6IGMsXG4gICAgICBuYW1lOiBsID8gXCIjXCIgKyB0IDogdCxcbiAgICAgIGlzU3RhdGljOiBuLFxuICAgICAgaXNQcml2YXRlOiBsXG4gICAgfSxcbiAgICBwID0ge1xuICAgICAgdjogITFcbiAgICB9O1xuICBpZiAoMCAhPT0gaSAmJiAoZi5hZGRJbml0aWFsaXplciA9IG9sZF9jcmVhdGVBZGRJbml0aWFsaXplck1ldGhvZChvLCBwKSksIGwpIHtcbiAgICBkID0gMiwgdSA9IFN5bWJvbCh0KTtcbiAgICB2YXIgdiA9IHt9O1xuICAgIDAgPT09IGkgPyAodi5nZXQgPSBhLmdldCwgdi5zZXQgPSBhLnNldCkgOiAyID09PSBpID8gdi5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYS52YWx1ZTtcbiAgICB9IDogKDEgIT09IGkgJiYgMyAhPT0gaSB8fCAodi5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYS5nZXQuY2FsbCh0aGlzKTtcbiAgICB9KSwgMSAhPT0gaSAmJiA0ICE9PSBpIHx8ICh2LnNldCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBhLnNldC5jYWxsKHRoaXMsIGUpO1xuICAgIH0pKSwgZi5hY2Nlc3MgPSB2O1xuICB9IGVsc2UgZCA9IDEsIHUgPSB0O1xuICB0cnkge1xuICAgIHJldHVybiBlKHMsIE9iamVjdC5hc3NpZ24oZiwgb2xkX2NyZWF0ZU1ldGFkYXRhTWV0aG9kc0ZvclByb3BlcnR5KHIsIGQsIHUsIHApKSk7XG4gIH0gZmluYWxseSB7XG4gICAgcC52ID0gITA7XG4gIH1cbn1cbmZ1bmN0aW9uIG9sZF9hc3NlcnROb3RGaW5pc2hlZChlLCB0KSB7XG4gIGlmIChlLnYpIHRocm93IG5ldyBFcnJvcihcImF0dGVtcHRlZCB0byBjYWxsIFwiICsgdCArIFwiIGFmdGVyIGRlY29yYXRpb24gd2FzIGZpbmlzaGVkXCIpO1xufVxuZnVuY3Rpb24gb2xkX2Fzc2VydE1ldGFkYXRhS2V5KGUpIHtcbiAgaWYgKFwic3ltYm9sXCIgIT0gdHlwZW9mIGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJNZXRhZGF0YSBrZXlzIG11c3QgYmUgc3ltYm9scywgcmVjZWl2ZWQ6IFwiICsgZSk7XG59XG5mdW5jdGlvbiBvbGRfYXNzZXJ0Q2FsbGFibGUoZSwgdCkge1xuICBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKHQgKyBcIiBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG59XG5mdW5jdGlvbiBvbGRfYXNzZXJ0VmFsaWRSZXR1cm5WYWx1ZShlLCB0KSB7XG4gIHZhciBhID0gdHlwZW9mIHQ7XG4gIGlmICgxID09PSBlKSB7XG4gICAgaWYgKFwib2JqZWN0XCIgIT09IGEgfHwgbnVsbCA9PT0gdCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcImFjY2Vzc29yIGRlY29yYXRvcnMgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHdpdGggZ2V0LCBzZXQsIG9yIGluaXQgcHJvcGVydGllcyBvciB2b2lkIDBcIik7XG4gICAgdm9pZCAwICE9PSB0LmdldCAmJiBvbGRfYXNzZXJ0Q2FsbGFibGUodC5nZXQsIFwiYWNjZXNzb3IuZ2V0XCIpLCB2b2lkIDAgIT09IHQuc2V0ICYmIG9sZF9hc3NlcnRDYWxsYWJsZSh0LnNldCwgXCJhY2Nlc3Nvci5zZXRcIiksIHZvaWQgMCAhPT0gdC5pbml0ICYmIG9sZF9hc3NlcnRDYWxsYWJsZSh0LmluaXQsIFwiYWNjZXNzb3IuaW5pdFwiKSwgdm9pZCAwICE9PSB0LmluaXRpYWxpemVyICYmIG9sZF9hc3NlcnRDYWxsYWJsZSh0LmluaXRpYWxpemVyLCBcImFjY2Vzc29yLmluaXRpYWxpemVyXCIpO1xuICB9IGVsc2UgaWYgKFwiZnVuY3Rpb25cIiAhPT0gYSkge1xuICAgIHZhciByO1xuICAgIHRocm93IHIgPSAwID09PSBlID8gXCJmaWVsZFwiIDogMTAgPT09IGUgPyBcImNsYXNzXCIgOiBcIm1ldGhvZFwiLCBuZXcgVHlwZUVycm9yKHIgKyBcIiBkZWNvcmF0b3JzIG11c3QgcmV0dXJuIGEgZnVuY3Rpb24gb3Igdm9pZCAwXCIpO1xuICB9XG59XG5mdW5jdGlvbiBvbGRfZ2V0SW5pdChlKSB7XG4gIHZhciB0O1xuICByZXR1cm4gbnVsbCA9PSAodCA9IGUuaW5pdCkgJiYgKHQgPSBlLmluaXRpYWxpemVyKSAmJiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBjb25zb2xlICYmIGNvbnNvbGUud2FybihcIi5pbml0aWFsaXplciBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbml0IGFzIG9mIE1hcmNoIDIwMjJcIiksIHQ7XG59XG5mdW5jdGlvbiBvbGRfYXBwbHlNZW1iZXJEZWMoZSwgdCwgYSwgciwgbywgaSwgbiwgbCwgcykge1xuICB2YXIgYyxcbiAgICBkLFxuICAgIHUsXG4gICAgZixcbiAgICBwLFxuICAgIHYsXG4gICAgaCA9IGFbMF07XG4gIGlmIChuID8gYyA9IDAgPT09IG8gfHwgMSA9PT0gbyA/IHtcbiAgICBnZXQ6IGFbM10sXG4gICAgc2V0OiBhWzRdXG4gIH0gOiAzID09PSBvID8ge1xuICAgIGdldDogYVszXVxuICB9IDogNCA9PT0gbyA/IHtcbiAgICBzZXQ6IGFbM11cbiAgfSA6IHtcbiAgICB2YWx1ZTogYVszXVxuICB9IDogMCAhPT0gbyAmJiAoYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpLCAxID09PSBvID8gdSA9IHtcbiAgICBnZXQ6IGMuZ2V0LFxuICAgIHNldDogYy5zZXRcbiAgfSA6IDIgPT09IG8gPyB1ID0gYy52YWx1ZSA6IDMgPT09IG8gPyB1ID0gYy5nZXQgOiA0ID09PSBvICYmICh1ID0gYy5zZXQpLCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGgpIHZvaWQgMCAhPT0gKGYgPSBvbGRfbWVtYmVyRGVjKGgsIHIsIGMsIGwsIHMsIG8sIGksIG4sIHUpKSAmJiAob2xkX2Fzc2VydFZhbGlkUmV0dXJuVmFsdWUobywgZiksIDAgPT09IG8gPyBkID0gZiA6IDEgPT09IG8gPyAoZCA9IG9sZF9nZXRJbml0KGYpLCBwID0gZi5nZXQgfHwgdS5nZXQsIHYgPSBmLnNldCB8fCB1LnNldCwgdSA9IHtcbiAgICBnZXQ6IHAsXG4gICAgc2V0OiB2XG4gIH0pIDogdSA9IGYpO2Vsc2UgZm9yICh2YXIgeSA9IGgubGVuZ3RoIC0gMTsgeSA+PSAwOyB5LS0pIHtcbiAgICB2YXIgYjtcbiAgICBpZiAodm9pZCAwICE9PSAoZiA9IG9sZF9tZW1iZXJEZWMoaFt5XSwgciwgYywgbCwgcywgbywgaSwgbiwgdSkpKSBvbGRfYXNzZXJ0VmFsaWRSZXR1cm5WYWx1ZShvLCBmKSwgMCA9PT0gbyA/IGIgPSBmIDogMSA9PT0gbyA/IChiID0gb2xkX2dldEluaXQoZiksIHAgPSBmLmdldCB8fCB1LmdldCwgdiA9IGYuc2V0IHx8IHUuc2V0LCB1ID0ge1xuICAgICAgZ2V0OiBwLFxuICAgICAgc2V0OiB2XG4gICAgfSkgOiB1ID0gZiwgdm9pZCAwICE9PSBiICYmICh2b2lkIDAgPT09IGQgPyBkID0gYiA6IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZCA/IGQgPSBbZCwgYl0gOiBkLnB1c2goYikpO1xuICB9XG4gIGlmICgwID09PSBvIHx8IDEgPT09IG8pIHtcbiAgICBpZiAodm9pZCAwID09PSBkKSBkID0gZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgIHJldHVybiB0O1xuICAgIH07ZWxzZSBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBkKSB7XG4gICAgICB2YXIgZyA9IGQ7XG4gICAgICBkID0gZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgZm9yICh2YXIgYSA9IHQsIHIgPSAwOyByIDwgZy5sZW5ndGg7IHIrKykgYSA9IGdbcl0uY2FsbChlLCBhKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbSA9IGQ7XG4gICAgICBkID0gZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIG0uY2FsbChlLCB0KTtcbiAgICAgIH07XG4gICAgfVxuICAgIGUucHVzaChkKTtcbiAgfVxuICAwICE9PSBvICYmICgxID09PSBvID8gKGMuZ2V0ID0gdS5nZXQsIGMuc2V0ID0gdS5zZXQpIDogMiA9PT0gbyA/IGMudmFsdWUgPSB1IDogMyA9PT0gbyA/IGMuZ2V0ID0gdSA6IDQgPT09IG8gJiYgKGMuc2V0ID0gdSksIG4gPyAxID09PSBvID8gKGUucHVzaChmdW5jdGlvbiAoZSwgdCkge1xuICAgIHJldHVybiB1LmdldC5jYWxsKGUsIHQpO1xuICB9KSwgZS5wdXNoKGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgcmV0dXJuIHUuc2V0LmNhbGwoZSwgdCk7XG4gIH0pKSA6IDIgPT09IG8gPyBlLnB1c2godSkgOiBlLnB1c2goZnVuY3Rpb24gKGUsIHQpIHtcbiAgICByZXR1cm4gdS5jYWxsKGUsIHQpO1xuICB9KSA6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCByLCBjKSk7XG59XG5mdW5jdGlvbiBvbGRfYXBwbHlNZW1iZXJEZWNzKGUsIHQsIGEsIHIsIG8pIHtcbiAgZm9yICh2YXIgaSwgbiwgbCA9IG5ldyBNYXAoKSwgcyA9IG5ldyBNYXAoKSwgYyA9IDA7IGMgPCBvLmxlbmd0aDsgYysrKSB7XG4gICAgdmFyIGQgPSBvW2NdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGQpKSB7XG4gICAgICB2YXIgdSxcbiAgICAgICAgZixcbiAgICAgICAgcCxcbiAgICAgICAgdiA9IGRbMV0sXG4gICAgICAgIGggPSBkWzJdLFxuICAgICAgICB5ID0gZC5sZW5ndGggPiAzLFxuICAgICAgICBiID0gdiA+PSA1O1xuICAgICAgaWYgKGIgPyAodSA9IHQsIGYgPSByLCAwICE9PSAodiAtPSA1KSAmJiAocCA9IG4gPSBuIHx8IFtdKSkgOiAodSA9IHQucHJvdG90eXBlLCBmID0gYSwgMCAhPT0gdiAmJiAocCA9IGkgPSBpIHx8IFtdKSksIDAgIT09IHYgJiYgIXkpIHtcbiAgICAgICAgdmFyIGcgPSBiID8gcyA6IGwsXG4gICAgICAgICAgbSA9IGcuZ2V0KGgpIHx8IDA7XG4gICAgICAgIGlmICghMCA9PT0gbSB8fCAzID09PSBtICYmIDQgIT09IHYgfHwgNCA9PT0gbSAmJiAzICE9PSB2KSB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gZGVjb3JhdGUgYSBwdWJsaWMgbWV0aG9kL2FjY2Vzc29yIHRoYXQgaGFzIHRoZSBzYW1lIG5hbWUgYXMgYSBwcmV2aW91c2x5IGRlY29yYXRlZCBwdWJsaWMgbWV0aG9kL2FjY2Vzc29yLiBUaGlzIGlzIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGJ5IHRoZSBkZWNvcmF0b3JzIHBsdWdpbi4gUHJvcGVydHkgbmFtZSB3YXM6IFwiICsgaCk7XG4gICAgICAgICFtICYmIHYgPiAyID8gZy5zZXQoaCwgdikgOiBnLnNldChoLCAhMCk7XG4gICAgICB9XG4gICAgICBvbGRfYXBwbHlNZW1iZXJEZWMoZSwgdSwgZCwgaCwgdiwgYiwgeSwgZiwgcCk7XG4gICAgfVxuICB9XG4gIG9sZF9wdXNoSW5pdGlhbGl6ZXJzKGUsIGkpLCBvbGRfcHVzaEluaXRpYWxpemVycyhlLCBuKTtcbn1cbmZ1bmN0aW9uIG9sZF9wdXNoSW5pdGlhbGl6ZXJzKGUsIHQpIHtcbiAgdCAmJiBlLnB1c2goZnVuY3Rpb24gKGUpIHtcbiAgICBmb3IgKHZhciBhID0gMDsgYSA8IHQubGVuZ3RoOyBhKyspIHRbYV0uY2FsbChlKTtcbiAgICByZXR1cm4gZTtcbiAgfSk7XG59XG5mdW5jdGlvbiBvbGRfYXBwbHlDbGFzc0RlY3MoZSwgdCwgYSwgcikge1xuICBpZiAoci5sZW5ndGggPiAwKSB7XG4gICAgZm9yICh2YXIgbyA9IFtdLCBpID0gdCwgbiA9IHQubmFtZSwgbCA9IHIubGVuZ3RoIC0gMTsgbCA+PSAwOyBsLS0pIHtcbiAgICAgIHZhciBzID0ge1xuICAgICAgICB2OiAhMVxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBjID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBraW5kOiBcImNsYXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBuLFxuICAgICAgICAgICAgYWRkSW5pdGlhbGl6ZXI6IG9sZF9jcmVhdGVBZGRJbml0aWFsaXplck1ldGhvZChvLCBzKVxuICAgICAgICAgIH0sIG9sZF9jcmVhdGVNZXRhZGF0YU1ldGhvZHNGb3JQcm9wZXJ0eShhLCAwLCBuLCBzKSksXG4gICAgICAgICAgZCA9IHJbbF0oaSwgYyk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBzLnYgPSAhMDtcbiAgICAgIH1cbiAgICAgIHZvaWQgMCAhPT0gZCAmJiAob2xkX2Fzc2VydFZhbGlkUmV0dXJuVmFsdWUoMTAsIGQpLCBpID0gZCk7XG4gICAgfVxuICAgIGUucHVzaChpLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBlID0gMDsgZSA8IG8ubGVuZ3RoOyBlKyspIG9bZV0uY2FsbChpKTtcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gX2FwcGx5RGVjcyhlLCB0LCBhKSB7XG4gIHZhciByID0gW10sXG4gICAgbyA9IHt9LFxuICAgIGkgPSB7fTtcbiAgcmV0dXJuIG9sZF9hcHBseU1lbWJlckRlY3MociwgZSwgaSwgbywgdCksIG9sZF9jb252ZXJ0TWV0YWRhdGFNYXBUb0ZpbmFsKGUucHJvdG90eXBlLCBpKSwgb2xkX2FwcGx5Q2xhc3NEZWNzKHIsIGUsIG8sIGEpLCBvbGRfY29udmVydE1ldGFkYXRhTWFwVG9GaW5hbChlLCBvKSwgcjtcbn1cbmZ1bmN0aW9uIGFwcGx5RGVjczIyMDNGYWN0b3J5KCkge1xuICBmdW5jdGlvbiBjcmVhdGVBZGRJbml0aWFsaXplck1ldGhvZChlLCB0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyKSB7XG4gICAgICAhZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgaWYgKGUudikgdGhyb3cgbmV3IEVycm9yKFwiYXR0ZW1wdGVkIHRvIGNhbGwgXCIgKyB0ICsgXCIgYWZ0ZXIgZGVjb3JhdGlvbiB3YXMgZmluaXNoZWRcIik7XG4gICAgICB9KHQsIFwiYWRkSW5pdGlhbGl6ZXJcIiksIGFzc2VydENhbGxhYmxlKHIsIFwiQW4gaW5pdGlhbGl6ZXJcIiksIGUucHVzaChyKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIG1lbWJlckRlYyhlLCB0LCByLCBhLCBuLCBpLCBzLCBvKSB7XG4gICAgdmFyIGM7XG4gICAgc3dpdGNoIChuKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGMgPSBcImFjY2Vzc29yXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBjID0gXCJtZXRob2RcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGMgPSBcImdldHRlclwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgYyA9IFwic2V0dGVyXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYyA9IFwiZmllbGRcIjtcbiAgICB9XG4gICAgdmFyIGwsXG4gICAgICB1LFxuICAgICAgZiA9IHtcbiAgICAgICAga2luZDogYyxcbiAgICAgICAgbmFtZTogcyA/IFwiI1wiICsgdCA6IHQsXG4gICAgICAgIHN0YXRpYzogaSxcbiAgICAgICAgcHJpdmF0ZTogc1xuICAgICAgfSxcbiAgICAgIHAgPSB7XG4gICAgICAgIHY6ICExXG4gICAgICB9O1xuICAgIDAgIT09IG4gJiYgKGYuYWRkSW5pdGlhbGl6ZXIgPSBjcmVhdGVBZGRJbml0aWFsaXplck1ldGhvZChhLCBwKSksIDAgPT09IG4gPyBzID8gKGwgPSByLmdldCwgdSA9IHIuc2V0KSA6IChsID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXNbdF07XG4gICAgfSwgdSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB0aGlzW3RdID0gZTtcbiAgICB9KSA6IDIgPT09IG4gPyBsID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHIudmFsdWU7XG4gICAgfSA6ICgxICE9PSBuICYmIDMgIT09IG4gfHwgKGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gci5nZXQuY2FsbCh0aGlzKTtcbiAgICB9KSwgMSAhPT0gbiAmJiA0ICE9PSBuIHx8ICh1ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHIuc2V0LmNhbGwodGhpcywgZSk7XG4gICAgfSkpLCBmLmFjY2VzcyA9IGwgJiYgdSA/IHtcbiAgICAgIGdldDogbCxcbiAgICAgIHNldDogdVxuICAgIH0gOiBsID8ge1xuICAgICAgZ2V0OiBsXG4gICAgfSA6IHtcbiAgICAgIHNldDogdVxuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBlKG8sIGYpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBwLnYgPSAhMDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYXNzZXJ0Q2FsbGFibGUoZSwgdCkge1xuICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpIHRocm93IG5ldyBUeXBlRXJyb3IodCArIFwiIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgfVxuICBmdW5jdGlvbiBhc3NlcnRWYWxpZFJldHVyblZhbHVlKGUsIHQpIHtcbiAgICB2YXIgciA9IHR5cGVvZiB0O1xuICAgIGlmICgxID09PSBlKSB7XG4gICAgICBpZiAoXCJvYmplY3RcIiAhPT0gciB8fCBudWxsID09PSB0KSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYWNjZXNzb3IgZGVjb3JhdG9ycyBtdXN0IHJldHVybiBhbiBvYmplY3Qgd2l0aCBnZXQsIHNldCwgb3IgaW5pdCBwcm9wZXJ0aWVzIG9yIHZvaWQgMFwiKTtcbiAgICAgIHZvaWQgMCAhPT0gdC5nZXQgJiYgYXNzZXJ0Q2FsbGFibGUodC5nZXQsIFwiYWNjZXNzb3IuZ2V0XCIpLCB2b2lkIDAgIT09IHQuc2V0ICYmIGFzc2VydENhbGxhYmxlKHQuc2V0LCBcImFjY2Vzc29yLnNldFwiKSwgdm9pZCAwICE9PSB0LmluaXQgJiYgYXNzZXJ0Q2FsbGFibGUodC5pbml0LCBcImFjY2Vzc29yLmluaXRcIik7XG4gICAgfSBlbHNlIGlmIChcImZ1bmN0aW9uXCIgIT09IHIpIHtcbiAgICAgIHZhciBhO1xuICAgICAgdGhyb3cgYSA9IDAgPT09IGUgPyBcImZpZWxkXCIgOiAxMCA9PT0gZSA/IFwiY2xhc3NcIiA6IFwibWV0aG9kXCIsIG5ldyBUeXBlRXJyb3IoYSArIFwiIGRlY29yYXRvcnMgbXVzdCByZXR1cm4gYSBmdW5jdGlvbiBvciB2b2lkIDBcIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGFwcGx5TWVtYmVyRGVjKGUsIHQsIHIsIGEsIG4sIGksIHMsIG8pIHtcbiAgICB2YXIgYyxcbiAgICAgIGwsXG4gICAgICB1LFxuICAgICAgZixcbiAgICAgIHAsXG4gICAgICBkLFxuICAgICAgaCA9IHJbMF07XG4gICAgaWYgKHMgPyBjID0gMCA9PT0gbiB8fCAxID09PSBuID8ge1xuICAgICAgZ2V0OiByWzNdLFxuICAgICAgc2V0OiByWzRdXG4gICAgfSA6IDMgPT09IG4gPyB7XG4gICAgICBnZXQ6IHJbM11cbiAgICB9IDogNCA9PT0gbiA/IHtcbiAgICAgIHNldDogclszXVxuICAgIH0gOiB7XG4gICAgICB2YWx1ZTogclszXVxuICAgIH0gOiAwICE9PSBuICYmIChjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCBhKSksIDEgPT09IG4gPyB1ID0ge1xuICAgICAgZ2V0OiBjLmdldCxcbiAgICAgIHNldDogYy5zZXRcbiAgICB9IDogMiA9PT0gbiA/IHUgPSBjLnZhbHVlIDogMyA9PT0gbiA/IHUgPSBjLmdldCA6IDQgPT09IG4gJiYgKHUgPSBjLnNldCksIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaCkgdm9pZCAwICE9PSAoZiA9IG1lbWJlckRlYyhoLCBhLCBjLCBvLCBuLCBpLCBzLCB1KSkgJiYgKGFzc2VydFZhbGlkUmV0dXJuVmFsdWUobiwgZiksIDAgPT09IG4gPyBsID0gZiA6IDEgPT09IG4gPyAobCA9IGYuaW5pdCwgcCA9IGYuZ2V0IHx8IHUuZ2V0LCBkID0gZi5zZXQgfHwgdS5zZXQsIHUgPSB7XG4gICAgICBnZXQ6IHAsXG4gICAgICBzZXQ6IGRcbiAgICB9KSA6IHUgPSBmKTtlbHNlIGZvciAodmFyIHYgPSBoLmxlbmd0aCAtIDE7IHYgPj0gMDsgdi0tKSB7XG4gICAgICB2YXIgZztcbiAgICAgIGlmICh2b2lkIDAgIT09IChmID0gbWVtYmVyRGVjKGhbdl0sIGEsIGMsIG8sIG4sIGksIHMsIHUpKSkgYXNzZXJ0VmFsaWRSZXR1cm5WYWx1ZShuLCBmKSwgMCA9PT0gbiA/IGcgPSBmIDogMSA9PT0gbiA/IChnID0gZi5pbml0LCBwID0gZi5nZXQgfHwgdS5nZXQsIGQgPSBmLnNldCB8fCB1LnNldCwgdSA9IHtcbiAgICAgICAgZ2V0OiBwLFxuICAgICAgICBzZXQ6IGRcbiAgICAgIH0pIDogdSA9IGYsIHZvaWQgMCAhPT0gZyAmJiAodm9pZCAwID09PSBsID8gbCA9IGcgOiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGwgPyBsID0gW2wsIGddIDogbC5wdXNoKGcpKTtcbiAgICB9XG4gICAgaWYgKDAgPT09IG4gfHwgMSA9PT0gbikge1xuICAgICAgaWYgKHZvaWQgMCA9PT0gbCkgbCA9IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgIHJldHVybiB0O1xuICAgICAgfTtlbHNlIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGwpIHtcbiAgICAgICAgdmFyIHkgPSBsO1xuICAgICAgICBsID0gZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICBmb3IgKHZhciByID0gdCwgYSA9IDA7IGEgPCB5Lmxlbmd0aDsgYSsrKSByID0geVthXS5jYWxsKGUsIHIpO1xuICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG0gPSBsO1xuICAgICAgICBsID0gZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICByZXR1cm4gbS5jYWxsKGUsIHQpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZS5wdXNoKGwpO1xuICAgIH1cbiAgICAwICE9PSBuICYmICgxID09PSBuID8gKGMuZ2V0ID0gdS5nZXQsIGMuc2V0ID0gdS5zZXQpIDogMiA9PT0gbiA/IGMudmFsdWUgPSB1IDogMyA9PT0gbiA/IGMuZ2V0ID0gdSA6IDQgPT09IG4gJiYgKGMuc2V0ID0gdSksIHMgPyAxID09PSBuID8gKGUucHVzaChmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgcmV0dXJuIHUuZ2V0LmNhbGwoZSwgdCk7XG4gICAgfSksIGUucHVzaChmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgcmV0dXJuIHUuc2V0LmNhbGwoZSwgdCk7XG4gICAgfSkpIDogMiA9PT0gbiA/IGUucHVzaCh1KSA6IGUucHVzaChmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgcmV0dXJuIHUuY2FsbChlLCB0KTtcbiAgICB9KSA6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBhLCBjKSk7XG4gIH1cbiAgZnVuY3Rpb24gcHVzaEluaXRpYWxpemVycyhlLCB0KSB7XG4gICAgdCAmJiBlLnB1c2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgdC5sZW5ndGg7IHIrKykgdFtyXS5jYWxsKGUpO1xuICAgICAgcmV0dXJuIGU7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIChlLCB0LCByKSB7XG4gICAgdmFyIGEgPSBbXTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGUsIHQsIHIpIHtcbiAgICAgIGZvciAodmFyIGEsIG4sIGkgPSBuZXcgTWFwKCksIHMgPSBuZXcgTWFwKCksIG8gPSAwOyBvIDwgci5sZW5ndGg7IG8rKykge1xuICAgICAgICB2YXIgYyA9IHJbb107XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG4gICAgICAgICAgdmFyIGwsXG4gICAgICAgICAgICB1LFxuICAgICAgICAgICAgZiA9IGNbMV0sXG4gICAgICAgICAgICBwID0gY1syXSxcbiAgICAgICAgICAgIGQgPSBjLmxlbmd0aCA+IDMsXG4gICAgICAgICAgICBoID0gZiA+PSA1O1xuICAgICAgICAgIGlmIChoID8gKGwgPSB0LCAwICE9IChmIC09IDUpICYmICh1ID0gbiA9IG4gfHwgW10pKSA6IChsID0gdC5wcm90b3R5cGUsIDAgIT09IGYgJiYgKHUgPSBhID0gYSB8fCBbXSkpLCAwICE9PSBmICYmICFkKSB7XG4gICAgICAgICAgICB2YXIgdiA9IGggPyBzIDogaSxcbiAgICAgICAgICAgICAgZyA9IHYuZ2V0KHApIHx8IDA7XG4gICAgICAgICAgICBpZiAoITAgPT09IGcgfHwgMyA9PT0gZyAmJiA0ICE9PSBmIHx8IDQgPT09IGcgJiYgMyAhPT0gZikgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIGRlY29yYXRlIGEgcHVibGljIG1ldGhvZC9hY2Nlc3NvciB0aGF0IGhhcyB0aGUgc2FtZSBuYW1lIGFzIGEgcHJldmlvdXNseSBkZWNvcmF0ZWQgcHVibGljIG1ldGhvZC9hY2Nlc3Nvci4gVGhpcyBpcyBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBieSB0aGUgZGVjb3JhdG9ycyBwbHVnaW4uIFByb3BlcnR5IG5hbWUgd2FzOiBcIiArIHApO1xuICAgICAgICAgICAgIWcgJiYgZiA+IDIgPyB2LnNldChwLCBmKSA6IHYuc2V0KHAsICEwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXBwbHlNZW1iZXJEZWMoZSwgbCwgYywgcCwgZiwgaCwgZCwgdSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHB1c2hJbml0aWFsaXplcnMoZSwgYSksIHB1c2hJbml0aWFsaXplcnMoZSwgbik7XG4gICAgfShhLCBlLCB0KSwgZnVuY3Rpb24gKGUsIHQsIHIpIHtcbiAgICAgIGlmIChyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yICh2YXIgYSA9IFtdLCBuID0gdCwgaSA9IHQubmFtZSwgcyA9IHIubGVuZ3RoIC0gMTsgcyA+PSAwOyBzLS0pIHtcbiAgICAgICAgICB2YXIgbyA9IHtcbiAgICAgICAgICAgIHY6ICExXG4gICAgICAgICAgfTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGMgPSByW3NdKG4sIHtcbiAgICAgICAgICAgICAga2luZDogXCJjbGFzc1wiLFxuICAgICAgICAgICAgICBuYW1lOiBpLFxuICAgICAgICAgICAgICBhZGRJbml0aWFsaXplcjogY3JlYXRlQWRkSW5pdGlhbGl6ZXJNZXRob2QoYSwgbylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBvLnYgPSAhMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdm9pZCAwICE9PSBjICYmIChhc3NlcnRWYWxpZFJldHVyblZhbHVlKDEwLCBjKSwgbiA9IGMpO1xuICAgICAgICB9XG4gICAgICAgIGUucHVzaChuLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCBhLmxlbmd0aDsgZSsrKSBhW2VdLmNhbGwobik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0oYSwgZSwgciksIGE7XG4gIH07XG59XG52YXIgYXBwbHlEZWNzMjIwM0ltcGw7XG5mdW5jdGlvbiBfYXBwbHlEZWNzMjIwMyhlLCB0LCByKSB7XG4gIHJldHVybiAoYXBwbHlEZWNzMjIwM0ltcGwgPSBhcHBseURlY3MyMjAzSW1wbCB8fCBhcHBseURlY3MyMjAzRmFjdG9yeSgpKShlLCB0LCByKTtcbn1cbmZ1bmN0aW9uIGFwcGx5RGVjczIyMDNSRmFjdG9yeSgpIHtcbiAgZnVuY3Rpb24gY3JlYXRlQWRkSW5pdGlhbGl6ZXJNZXRob2QoZSwgdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAocikge1xuICAgICAgIWZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgIGlmIChlLnYpIHRocm93IG5ldyBFcnJvcihcImF0dGVtcHRlZCB0byBjYWxsIFwiICsgdCArIFwiIGFmdGVyIGRlY29yYXRpb24gd2FzIGZpbmlzaGVkXCIpO1xuICAgICAgfSh0LCBcImFkZEluaXRpYWxpemVyXCIpLCBhc3NlcnRDYWxsYWJsZShyLCBcIkFuIGluaXRpYWxpemVyXCIpLCBlLnB1c2gocik7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBtZW1iZXJEZWMoZSwgdCwgciwgbiwgYSwgaSwgcywgbykge1xuICAgIHZhciBjO1xuICAgIHN3aXRjaCAoYSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBjID0gXCJhY2Nlc3NvclwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgYyA9IFwibWV0aG9kXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBjID0gXCJnZXR0ZXJcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIGMgPSBcInNldHRlclwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGMgPSBcImZpZWxkXCI7XG4gICAgfVxuICAgIHZhciBsLFxuICAgICAgdSxcbiAgICAgIGYgPSB7XG4gICAgICAgIGtpbmQ6IGMsXG4gICAgICAgIG5hbWU6IHMgPyBcIiNcIiArIHQgOiB0LFxuICAgICAgICBzdGF0aWM6IGksXG4gICAgICAgIHByaXZhdGU6IHNcbiAgICAgIH0sXG4gICAgICBwID0ge1xuICAgICAgICB2OiAhMVxuICAgICAgfTtcbiAgICAwICE9PSBhICYmIChmLmFkZEluaXRpYWxpemVyID0gY3JlYXRlQWRkSW5pdGlhbGl6ZXJNZXRob2QobiwgcCkpLCAwID09PSBhID8gcyA/IChsID0gci5nZXQsIHUgPSByLnNldCkgOiAobCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzW3RdO1xuICAgIH0sIHUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdGhpc1t0XSA9IGU7XG4gICAgfSkgOiAyID09PSBhID8gbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByLnZhbHVlO1xuICAgIH0gOiAoMSAhPT0gYSAmJiAzICE9PSBhIHx8IChsID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHIuZ2V0LmNhbGwodGhpcyk7XG4gICAgfSksIDEgIT09IGEgJiYgNCAhPT0gYSB8fCAodSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICByLnNldC5jYWxsKHRoaXMsIGUpO1xuICAgIH0pKSwgZi5hY2Nlc3MgPSBsICYmIHUgPyB7XG4gICAgICBnZXQ6IGwsXG4gICAgICBzZXQ6IHVcbiAgICB9IDogbCA/IHtcbiAgICAgIGdldDogbFxuICAgIH0gOiB7XG4gICAgICBzZXQ6IHVcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZShvLCBmKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgcC52ID0gITA7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGFzc2VydENhbGxhYmxlKGUsIHQpIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKHQgKyBcIiBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gIH1cbiAgZnVuY3Rpb24gYXNzZXJ0VmFsaWRSZXR1cm5WYWx1ZShlLCB0KSB7XG4gICAgdmFyIHIgPSB0eXBlb2YgdDtcbiAgICBpZiAoMSA9PT0gZSkge1xuICAgICAgaWYgKFwib2JqZWN0XCIgIT09IHIgfHwgbnVsbCA9PT0gdCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcImFjY2Vzc29yIGRlY29yYXRvcnMgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHdpdGggZ2V0LCBzZXQsIG9yIGluaXQgcHJvcGVydGllcyBvciB2b2lkIDBcIik7XG4gICAgICB2b2lkIDAgIT09IHQuZ2V0ICYmIGFzc2VydENhbGxhYmxlKHQuZ2V0LCBcImFjY2Vzc29yLmdldFwiKSwgdm9pZCAwICE9PSB0LnNldCAmJiBhc3NlcnRDYWxsYWJsZSh0LnNldCwgXCJhY2Nlc3Nvci5zZXRcIiksIHZvaWQgMCAhPT0gdC5pbml0ICYmIGFzc2VydENhbGxhYmxlKHQuaW5pdCwgXCJhY2Nlc3Nvci5pbml0XCIpO1xuICAgIH0gZWxzZSBpZiAoXCJmdW5jdGlvblwiICE9PSByKSB7XG4gICAgICB2YXIgbjtcbiAgICAgIHRocm93IG4gPSAwID09PSBlID8gXCJmaWVsZFwiIDogMTAgPT09IGUgPyBcImNsYXNzXCIgOiBcIm1ldGhvZFwiLCBuZXcgVHlwZUVycm9yKG4gKyBcIiBkZWNvcmF0b3JzIG11c3QgcmV0dXJuIGEgZnVuY3Rpb24gb3Igdm9pZCAwXCIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBhcHBseU1lbWJlckRlYyhlLCB0LCByLCBuLCBhLCBpLCBzLCBvKSB7XG4gICAgdmFyIGMsXG4gICAgICBsLFxuICAgICAgdSxcbiAgICAgIGYsXG4gICAgICBwLFxuICAgICAgZCxcbiAgICAgIGggPSByWzBdO1xuICAgIGlmIChzID8gYyA9IDAgPT09IGEgfHwgMSA9PT0gYSA/IHtcbiAgICAgIGdldDogclszXSxcbiAgICAgIHNldDogcls0XVxuICAgIH0gOiAzID09PSBhID8ge1xuICAgICAgZ2V0OiByWzNdXG4gICAgfSA6IDQgPT09IGEgPyB7XG4gICAgICBzZXQ6IHJbM11cbiAgICB9IDoge1xuICAgICAgdmFsdWU6IHJbM11cbiAgICB9IDogMCAhPT0gYSAmJiAoYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgbikpLCAxID09PSBhID8gdSA9IHtcbiAgICAgIGdldDogYy5nZXQsXG4gICAgICBzZXQ6IGMuc2V0XG4gICAgfSA6IDIgPT09IGEgPyB1ID0gYy52YWx1ZSA6IDMgPT09IGEgPyB1ID0gYy5nZXQgOiA0ID09PSBhICYmICh1ID0gYy5zZXQpLCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGgpIHZvaWQgMCAhPT0gKGYgPSBtZW1iZXJEZWMoaCwgbiwgYywgbywgYSwgaSwgcywgdSkpICYmIChhc3NlcnRWYWxpZFJldHVyblZhbHVlKGEsIGYpLCAwID09PSBhID8gbCA9IGYgOiAxID09PSBhID8gKGwgPSBmLmluaXQsIHAgPSBmLmdldCB8fCB1LmdldCwgZCA9IGYuc2V0IHx8IHUuc2V0LCB1ID0ge1xuICAgICAgZ2V0OiBwLFxuICAgICAgc2V0OiBkXG4gICAgfSkgOiB1ID0gZik7ZWxzZSBmb3IgKHZhciB2ID0gaC5sZW5ndGggLSAxOyB2ID49IDA7IHYtLSkge1xuICAgICAgdmFyIGc7XG4gICAgICBpZiAodm9pZCAwICE9PSAoZiA9IG1lbWJlckRlYyhoW3ZdLCBuLCBjLCBvLCBhLCBpLCBzLCB1KSkpIGFzc2VydFZhbGlkUmV0dXJuVmFsdWUoYSwgZiksIDAgPT09IGEgPyBnID0gZiA6IDEgPT09IGEgPyAoZyA9IGYuaW5pdCwgcCA9IGYuZ2V0IHx8IHUuZ2V0LCBkID0gZi5zZXQgfHwgdS5zZXQsIHUgPSB7XG4gICAgICAgIGdldDogcCxcbiAgICAgICAgc2V0OiBkXG4gICAgICB9KSA6IHUgPSBmLCB2b2lkIDAgIT09IGcgJiYgKHZvaWQgMCA9PT0gbCA/IGwgPSBnIDogXCJmdW5jdGlvblwiID09IHR5cGVvZiBsID8gbCA9IFtsLCBnXSA6IGwucHVzaChnKSk7XG4gICAgfVxuICAgIGlmICgwID09PSBhIHx8IDEgPT09IGEpIHtcbiAgICAgIGlmICh2b2lkIDAgPT09IGwpIGwgPSBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICByZXR1cm4gdDtcbiAgICAgIH07ZWxzZSBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBsKSB7XG4gICAgICAgIHZhciB5ID0gbDtcbiAgICAgICAgbCA9IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgZm9yICh2YXIgciA9IHQsIG4gPSAwOyBuIDwgeS5sZW5ndGg7IG4rKykgciA9IHlbbl0uY2FsbChlLCByKTtcbiAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtID0gbDtcbiAgICAgICAgbCA9IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgcmV0dXJuIG0uY2FsbChlLCB0KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGUucHVzaChsKTtcbiAgICB9XG4gICAgMCAhPT0gYSAmJiAoMSA9PT0gYSA/IChjLmdldCA9IHUuZ2V0LCBjLnNldCA9IHUuc2V0KSA6IDIgPT09IGEgPyBjLnZhbHVlID0gdSA6IDMgPT09IGEgPyBjLmdldCA9IHUgOiA0ID09PSBhICYmIChjLnNldCA9IHUpLCBzID8gMSA9PT0gYSA/IChlLnB1c2goZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgIHJldHVybiB1LmdldC5jYWxsKGUsIHQpO1xuICAgIH0pLCBlLnB1c2goZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgIHJldHVybiB1LnNldC5jYWxsKGUsIHQpO1xuICAgIH0pKSA6IDIgPT09IGEgPyBlLnB1c2godSkgOiBlLnB1c2goZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgIHJldHVybiB1LmNhbGwoZSwgdCk7XG4gICAgfSkgOiBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgbiwgYykpO1xuICB9XG4gIGZ1bmN0aW9uIGFwcGx5TWVtYmVyRGVjcyhlLCB0KSB7XG4gICAgZm9yICh2YXIgciwgbiwgYSA9IFtdLCBpID0gbmV3IE1hcCgpLCBzID0gbmV3IE1hcCgpLCBvID0gMDsgbyA8IHQubGVuZ3RoOyBvKyspIHtcbiAgICAgIHZhciBjID0gdFtvXTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG4gICAgICAgIHZhciBsLFxuICAgICAgICAgIHUsXG4gICAgICAgICAgZiA9IGNbMV0sXG4gICAgICAgICAgcCA9IGNbMl0sXG4gICAgICAgICAgZCA9IGMubGVuZ3RoID4gMyxcbiAgICAgICAgICBoID0gZiA+PSA1O1xuICAgICAgICBpZiAoaCA/IChsID0gZSwgMCAhPT0gKGYgLT0gNSkgJiYgKHUgPSBuID0gbiB8fCBbXSkpIDogKGwgPSBlLnByb3RvdHlwZSwgMCAhPT0gZiAmJiAodSA9IHIgPSByIHx8IFtdKSksIDAgIT09IGYgJiYgIWQpIHtcbiAgICAgICAgICB2YXIgdiA9IGggPyBzIDogaSxcbiAgICAgICAgICAgIGcgPSB2LmdldChwKSB8fCAwO1xuICAgICAgICAgIGlmICghMCA9PT0gZyB8fCAzID09PSBnICYmIDQgIT09IGYgfHwgNCA9PT0gZyAmJiAzICE9PSBmKSB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gZGVjb3JhdGUgYSBwdWJsaWMgbWV0aG9kL2FjY2Vzc29yIHRoYXQgaGFzIHRoZSBzYW1lIG5hbWUgYXMgYSBwcmV2aW91c2x5IGRlY29yYXRlZCBwdWJsaWMgbWV0aG9kL2FjY2Vzc29yLiBUaGlzIGlzIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGJ5IHRoZSBkZWNvcmF0b3JzIHBsdWdpbi4gUHJvcGVydHkgbmFtZSB3YXM6IFwiICsgcCk7XG4gICAgICAgICAgIWcgJiYgZiA+IDIgPyB2LnNldChwLCBmKSA6IHYuc2V0KHAsICEwKTtcbiAgICAgICAgfVxuICAgICAgICBhcHBseU1lbWJlckRlYyhhLCBsLCBjLCBwLCBmLCBoLCBkLCB1KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHB1c2hJbml0aWFsaXplcnMoYSwgciksIHB1c2hJbml0aWFsaXplcnMoYSwgbiksIGE7XG4gIH1cbiAgZnVuY3Rpb24gcHVzaEluaXRpYWxpemVycyhlLCB0KSB7XG4gICAgdCAmJiBlLnB1c2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgdC5sZW5ndGg7IHIrKykgdFtyXS5jYWxsKGUpO1xuICAgICAgcmV0dXJuIGU7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIChlLCB0LCByKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGU6IGFwcGx5TWVtYmVyRGVjcyhlLCB0KSxcbiAgICAgIGdldCBjKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICBpZiAodC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciByID0gW10sIG4gPSBlLCBhID0gZS5uYW1lLCBpID0gdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICB2YXIgcyA9IHtcbiAgICAgICAgICAgICAgICB2OiAhMVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBvID0gdFtpXShuLCB7XG4gICAgICAgICAgICAgICAgICBraW5kOiBcImNsYXNzXCIsXG4gICAgICAgICAgICAgICAgICBuYW1lOiBhLFxuICAgICAgICAgICAgICAgICAgYWRkSW5pdGlhbGl6ZXI6IGNyZWF0ZUFkZEluaXRpYWxpemVyTWV0aG9kKHIsIHMpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgcy52ID0gITA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdm9pZCAwICE9PSBvICYmIChhc3NlcnRWYWxpZFJldHVyblZhbHVlKDEwLCBvKSwgbiA9IG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtuLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgci5sZW5ndGg7IGUrKykgcltlXS5jYWxsKG4pO1xuICAgICAgICAgICAgfV07XG4gICAgICAgICAgfVxuICAgICAgICB9KGUsIHIpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59XG5mdW5jdGlvbiBfYXBwbHlEZWNzMjIwM1IoZSwgdCwgcikge1xuICByZXR1cm4gKF9hcHBseURlY3MyMjAzUiA9IGFwcGx5RGVjczIyMDNSRmFjdG9yeSgpKShlLCB0LCByKTtcbn1cbmZ1bmN0aW9uIGFwcGx5RGVjczIzMDFGYWN0b3J5KCkge1xuICBmdW5jdGlvbiBjcmVhdGVBZGRJbml0aWFsaXplck1ldGhvZChlLCB0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyKSB7XG4gICAgICAhZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgaWYgKGUudikgdGhyb3cgbmV3IEVycm9yKFwiYXR0ZW1wdGVkIHRvIGNhbGwgXCIgKyB0ICsgXCIgYWZ0ZXIgZGVjb3JhdGlvbiB3YXMgZmluaXNoZWRcIik7XG4gICAgICB9KHQsIFwiYWRkSW5pdGlhbGl6ZXJcIiksIGFzc2VydENhbGxhYmxlKHIsIFwiQW4gaW5pdGlhbGl6ZXJcIiksIGUucHVzaChyKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGFzc2VydEluc3RhbmNlSWZQcml2YXRlKGUsIHQpIHtcbiAgICBpZiAoIWUodCkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBdHRlbXB0ZWQgdG8gYWNjZXNzIHByaXZhdGUgZWxlbWVudCBvbiBub24taW5zdGFuY2VcIik7XG4gIH1cbiAgZnVuY3Rpb24gbWVtYmVyRGVjKGUsIHQsIHIsIG4sIGEsIGksIHMsIG8sIGMpIHtcbiAgICB2YXIgdTtcbiAgICBzd2l0Y2ggKGEpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdSA9IFwiYWNjZXNzb3JcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHUgPSBcIm1ldGhvZFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgdSA9IFwiZ2V0dGVyXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICB1ID0gXCJzZXR0ZXJcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB1ID0gXCJmaWVsZFwiO1xuICAgIH1cbiAgICB2YXIgbCxcbiAgICAgIGYsXG4gICAgICBwID0ge1xuICAgICAgICBraW5kOiB1LFxuICAgICAgICBuYW1lOiBzID8gXCIjXCIgKyB0IDogdCxcbiAgICAgICAgc3RhdGljOiBpLFxuICAgICAgICBwcml2YXRlOiBzXG4gICAgICB9LFxuICAgICAgZCA9IHtcbiAgICAgICAgdjogITFcbiAgICAgIH07XG4gICAgaWYgKDAgIT09IGEgJiYgKHAuYWRkSW5pdGlhbGl6ZXIgPSBjcmVhdGVBZGRJbml0aWFsaXplck1ldGhvZChuLCBkKSksIHMgfHwgMCAhPT0gYSAmJiAyICE9PSBhKSB7XG4gICAgICBpZiAoMiA9PT0gYSkgbCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBhc3NlcnRJbnN0YW5jZUlmUHJpdmF0ZShjLCBlKSwgci52YWx1ZTtcbiAgICAgIH07ZWxzZSB7XG4gICAgICAgIHZhciBoID0gMCA9PT0gYSB8fCAxID09PSBhO1xuICAgICAgICAoaCB8fCAzID09PSBhKSAmJiAobCA9IHMgPyBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHJldHVybiBhc3NlcnRJbnN0YW5jZUlmUHJpdmF0ZShjLCBlKSwgci5nZXQuY2FsbChlKTtcbiAgICAgICAgfSA6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcmV0dXJuIHIuZ2V0LmNhbGwoZSk7XG4gICAgICAgIH0pLCAoaCB8fCA0ID09PSBhKSAmJiAoZiA9IHMgPyBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIGFzc2VydEluc3RhbmNlSWZQcml2YXRlKGMsIGUpLCByLnNldC5jYWxsKGUsIHQpO1xuICAgICAgICB9IDogZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICByLnNldC5jYWxsKGUsIHQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgbCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZVt0XTtcbiAgICB9LCAwID09PSBhICYmIChmID0gZnVuY3Rpb24gKGUsIHIpIHtcbiAgICAgIGVbdF0gPSByO1xuICAgIH0pO1xuICAgIHZhciB2ID0gcyA/IGMuYmluZCgpIDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiB0IGluIGU7XG4gICAgfTtcbiAgICBwLmFjY2VzcyA9IGwgJiYgZiA/IHtcbiAgICAgIGdldDogbCxcbiAgICAgIHNldDogZixcbiAgICAgIGhhczogdlxuICAgIH0gOiBsID8ge1xuICAgICAgZ2V0OiBsLFxuICAgICAgaGFzOiB2XG4gICAgfSA6IHtcbiAgICAgIHNldDogZixcbiAgICAgIGhhczogdlxuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBlKG8sIHApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBkLnYgPSAhMDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYXNzZXJ0Q2FsbGFibGUoZSwgdCkge1xuICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpIHRocm93IG5ldyBUeXBlRXJyb3IodCArIFwiIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgfVxuICBmdW5jdGlvbiBhc3NlcnRWYWxpZFJldHVyblZhbHVlKGUsIHQpIHtcbiAgICB2YXIgciA9IHR5cGVvZiB0O1xuICAgIGlmICgxID09PSBlKSB7XG4gICAgICBpZiAoXCJvYmplY3RcIiAhPT0gciB8fCBudWxsID09PSB0KSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYWNjZXNzb3IgZGVjb3JhdG9ycyBtdXN0IHJldHVybiBhbiBvYmplY3Qgd2l0aCBnZXQsIHNldCwgb3IgaW5pdCBwcm9wZXJ0aWVzIG9yIHZvaWQgMFwiKTtcbiAgICAgIHZvaWQgMCAhPT0gdC5nZXQgJiYgYXNzZXJ0Q2FsbGFibGUodC5nZXQsIFwiYWNjZXNzb3IuZ2V0XCIpLCB2b2lkIDAgIT09IHQuc2V0ICYmIGFzc2VydENhbGxhYmxlKHQuc2V0LCBcImFjY2Vzc29yLnNldFwiKSwgdm9pZCAwICE9PSB0LmluaXQgJiYgYXNzZXJ0Q2FsbGFibGUodC5pbml0LCBcImFjY2Vzc29yLmluaXRcIik7XG4gICAgfSBlbHNlIGlmIChcImZ1bmN0aW9uXCIgIT09IHIpIHtcbiAgICAgIHZhciBuO1xuICAgICAgdGhyb3cgbiA9IDAgPT09IGUgPyBcImZpZWxkXCIgOiAxMCA9PT0gZSA/IFwiY2xhc3NcIiA6IFwibWV0aG9kXCIsIG5ldyBUeXBlRXJyb3IobiArIFwiIGRlY29yYXRvcnMgbXVzdCByZXR1cm4gYSBmdW5jdGlvbiBvciB2b2lkIDBcIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGN1cnJ5VGhpczIoZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodCkge1xuICAgICAgZSh0aGlzLCB0KTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGFwcGx5TWVtYmVyRGVjKGUsIHQsIHIsIG4sIGEsIGksIHMsIG8sIGMpIHtcbiAgICB2YXIgdSxcbiAgICAgIGwsXG4gICAgICBmLFxuICAgICAgcCxcbiAgICAgIGQsXG4gICAgICBoLFxuICAgICAgdixcbiAgICAgIGcgPSByWzBdO1xuICAgIGlmIChzID8gdSA9IDAgPT09IGEgfHwgMSA9PT0gYSA/IHtcbiAgICAgIGdldDogKHAgPSByWzNdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBwKHRoaXMpO1xuICAgICAgfSksXG4gICAgICBzZXQ6IGN1cnJ5VGhpczIocls0XSlcbiAgICB9IDogMyA9PT0gYSA/IHtcbiAgICAgIGdldDogclszXVxuICAgIH0gOiA0ID09PSBhID8ge1xuICAgICAgc2V0OiByWzNdXG4gICAgfSA6IHtcbiAgICAgIHZhbHVlOiByWzNdXG4gICAgfSA6IDAgIT09IGEgJiYgKHUgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIG4pKSwgMSA9PT0gYSA/IGYgPSB7XG4gICAgICBnZXQ6IHUuZ2V0LFxuICAgICAgc2V0OiB1LnNldFxuICAgIH0gOiAyID09PSBhID8gZiA9IHUudmFsdWUgOiAzID09PSBhID8gZiA9IHUuZ2V0IDogNCA9PT0gYSAmJiAoZiA9IHUuc2V0KSwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBnKSB2b2lkIDAgIT09IChkID0gbWVtYmVyRGVjKGcsIG4sIHUsIG8sIGEsIGksIHMsIGYsIGMpKSAmJiAoYXNzZXJ0VmFsaWRSZXR1cm5WYWx1ZShhLCBkKSwgMCA9PT0gYSA/IGwgPSBkIDogMSA9PT0gYSA/IChsID0gZC5pbml0LCBoID0gZC5nZXQgfHwgZi5nZXQsIHYgPSBkLnNldCB8fCBmLnNldCwgZiA9IHtcbiAgICAgIGdldDogaCxcbiAgICAgIHNldDogdlxuICAgIH0pIDogZiA9IGQpO2Vsc2UgZm9yICh2YXIgeSA9IGcubGVuZ3RoIC0gMTsgeSA+PSAwOyB5LS0pIHtcbiAgICAgIHZhciBtO1xuICAgICAgaWYgKHZvaWQgMCAhPT0gKGQgPSBtZW1iZXJEZWMoZ1t5XSwgbiwgdSwgbywgYSwgaSwgcywgZiwgYykpKSBhc3NlcnRWYWxpZFJldHVyblZhbHVlKGEsIGQpLCAwID09PSBhID8gbSA9IGQgOiAxID09PSBhID8gKG0gPSBkLmluaXQsIGggPSBkLmdldCB8fCBmLmdldCwgdiA9IGQuc2V0IHx8IGYuc2V0LCBmID0ge1xuICAgICAgICBnZXQ6IGgsXG4gICAgICAgIHNldDogdlxuICAgICAgfSkgOiBmID0gZCwgdm9pZCAwICE9PSBtICYmICh2b2lkIDAgPT09IGwgPyBsID0gbSA6IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgbCA/IGwgPSBbbCwgbV0gOiBsLnB1c2gobSkpO1xuICAgIH1cbiAgICBpZiAoMCA9PT0gYSB8fCAxID09PSBhKSB7XG4gICAgICBpZiAodm9pZCAwID09PSBsKSBsID0gZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgICB9O2Vsc2UgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgbCkge1xuICAgICAgICB2YXIgYiA9IGw7XG4gICAgICAgIGwgPSBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIGZvciAodmFyIHIgPSB0LCBuID0gMDsgbiA8IGIubGVuZ3RoOyBuKyspIHIgPSBiW25dLmNhbGwoZSwgcik7XG4gICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgSSA9IGw7XG4gICAgICAgIGwgPSBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIHJldHVybiBJLmNhbGwoZSwgdCk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBlLnB1c2gobCk7XG4gICAgfVxuICAgIDAgIT09IGEgJiYgKDEgPT09IGEgPyAodS5nZXQgPSBmLmdldCwgdS5zZXQgPSBmLnNldCkgOiAyID09PSBhID8gdS52YWx1ZSA9IGYgOiAzID09PSBhID8gdS5nZXQgPSBmIDogNCA9PT0gYSAmJiAodS5zZXQgPSBmKSwgcyA/IDEgPT09IGEgPyAoZS5wdXNoKGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICByZXR1cm4gZi5nZXQuY2FsbChlLCB0KTtcbiAgICB9KSwgZS5wdXNoKGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICByZXR1cm4gZi5zZXQuY2FsbChlLCB0KTtcbiAgICB9KSkgOiAyID09PSBhID8gZS5wdXNoKGYpIDogZS5wdXNoKGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICByZXR1cm4gZi5jYWxsKGUsIHQpO1xuICAgIH0pIDogT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIG4sIHUpKTtcbiAgfVxuICBmdW5jdGlvbiBhcHBseU1lbWJlckRlY3MoZSwgdCwgcikge1xuICAgIGZvciAodmFyIG4sIGEsIGksIHMgPSBbXSwgbyA9IG5ldyBNYXAoKSwgYyA9IG5ldyBNYXAoKSwgdSA9IDA7IHUgPCB0Lmxlbmd0aDsgdSsrKSB7XG4gICAgICB2YXIgbCA9IHRbdV07XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShsKSkge1xuICAgICAgICB2YXIgZixcbiAgICAgICAgICBwLFxuICAgICAgICAgIGQgPSBsWzFdLFxuICAgICAgICAgIGggPSBsWzJdLFxuICAgICAgICAgIHYgPSBsLmxlbmd0aCA+IDMsXG4gICAgICAgICAgZyA9IGQgPj0gNSxcbiAgICAgICAgICB5ID0gcjtcbiAgICAgICAgaWYgKGcgPyAoZiA9IGUsIDAgIT09IChkIC09IDUpICYmIChwID0gYSA9IGEgfHwgW10pLCB2ICYmICFpICYmIChpID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gX2NoZWNrSW5SSFModCkgPT09IGU7XG4gICAgICAgIH0pLCB5ID0gaSkgOiAoZiA9IGUucHJvdG90eXBlLCAwICE9PSBkICYmIChwID0gbiA9IG4gfHwgW10pKSwgMCAhPT0gZCAmJiAhdikge1xuICAgICAgICAgIHZhciBtID0gZyA/IGMgOiBvLFxuICAgICAgICAgICAgYiA9IG0uZ2V0KGgpIHx8IDA7XG4gICAgICAgICAgaWYgKCEwID09PSBiIHx8IDMgPT09IGIgJiYgNCAhPT0gZCB8fCA0ID09PSBiICYmIDMgIT09IGQpIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBkZWNvcmF0ZSBhIHB1YmxpYyBtZXRob2QvYWNjZXNzb3IgdGhhdCBoYXMgdGhlIHNhbWUgbmFtZSBhcyBhIHByZXZpb3VzbHkgZGVjb3JhdGVkIHB1YmxpYyBtZXRob2QvYWNjZXNzb3IuIFRoaXMgaXMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgYnkgdGhlIGRlY29yYXRvcnMgcGx1Z2luLiBQcm9wZXJ0eSBuYW1lIHdhczogXCIgKyBoKTtcbiAgICAgICAgICAhYiAmJiBkID4gMiA/IG0uc2V0KGgsIGQpIDogbS5zZXQoaCwgITApO1xuICAgICAgICB9XG4gICAgICAgIGFwcGx5TWVtYmVyRGVjKHMsIGYsIGwsIGgsIGQsIGcsIHYsIHAsIHkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHVzaEluaXRpYWxpemVycyhzLCBuKSwgcHVzaEluaXRpYWxpemVycyhzLCBhKSwgcztcbiAgfVxuICBmdW5jdGlvbiBwdXNoSW5pdGlhbGl6ZXJzKGUsIHQpIHtcbiAgICB0ICYmIGUucHVzaChmdW5jdGlvbiAoZSkge1xuICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCB0Lmxlbmd0aDsgcisrKSB0W3JdLmNhbGwoZSk7XG4gICAgICByZXR1cm4gZTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKGUsIHQsIHIsIG4pIHtcbiAgICByZXR1cm4ge1xuICAgICAgZTogYXBwbHlNZW1iZXJEZWNzKGUsIHQsIG4pLFxuICAgICAgZ2V0IGMoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIGlmICh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAodmFyIHIgPSBbXSwgbiA9IGUsIGEgPSBlLm5hbWUsIGkgPSB0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgIHZhciBzID0ge1xuICAgICAgICAgICAgICAgIHY6ICExXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSB0W2ldKG4sIHtcbiAgICAgICAgICAgICAgICAgIGtpbmQ6IFwiY2xhc3NcIixcbiAgICAgICAgICAgICAgICAgIG5hbWU6IGEsXG4gICAgICAgICAgICAgICAgICBhZGRJbml0aWFsaXplcjogY3JlYXRlQWRkSW5pdGlhbGl6ZXJNZXRob2QociwgcylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBzLnYgPSAhMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2b2lkIDAgIT09IG8gJiYgKGFzc2VydFZhbGlkUmV0dXJuVmFsdWUoMTAsIG8pLCBuID0gbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCByLmxlbmd0aDsgZSsrKSByW2VdLmNhbGwobik7XG4gICAgICAgICAgICB9XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0oZSwgcik7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cbmZ1bmN0aW9uIF9hcHBseURlY3MyMzAxKGUsIHQsIHIsIG4pIHtcbiAgcmV0dXJuIChfYXBwbHlEZWNzMjMwMSA9IGFwcGx5RGVjczIzMDFGYWN0b3J5KCkpKGUsIHQsIHIsIG4pO1xufVxuZnVuY3Rpb24gY3JlYXRlQWRkSW5pdGlhbGl6ZXJNZXRob2QoZSwgdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHIpIHtcbiAgICBhc3NlcnROb3RGaW5pc2hlZCh0LCBcImFkZEluaXRpYWxpemVyXCIpLCBhc3NlcnRDYWxsYWJsZShyLCBcIkFuIGluaXRpYWxpemVyXCIpLCBlLnB1c2gocik7XG4gIH07XG59XG5mdW5jdGlvbiBhc3NlcnRJbnN0YW5jZUlmUHJpdmF0ZShlLCB0KSB7XG4gIGlmICghZSh0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkF0dGVtcHRlZCB0byBhY2Nlc3MgcHJpdmF0ZSBlbGVtZW50IG9uIG5vbi1pbnN0YW5jZVwiKTtcbn1cbmZ1bmN0aW9uIG1lbWJlckRlYyhlLCB0LCByLCBuLCBhLCBpLCBzLCBvLCBjLCBsKSB7XG4gIHZhciB1O1xuICBzd2l0Y2ggKGkpIHtcbiAgICBjYXNlIDE6XG4gICAgICB1ID0gXCJhY2Nlc3NvclwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdSA9IFwibWV0aG9kXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB1ID0gXCJnZXR0ZXJcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHUgPSBcInNldHRlclwiO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHUgPSBcImZpZWxkXCI7XG4gIH1cbiAgdmFyIGYsXG4gICAgZCxcbiAgICBwID0ge1xuICAgICAga2luZDogdSxcbiAgICAgIG5hbWU6IG8gPyBcIiNcIiArIHIgOiByLFxuICAgICAgc3RhdGljOiBzLFxuICAgICAgcHJpdmF0ZTogb1xuICAgIH0sXG4gICAgaCA9IHtcbiAgICAgIHY6ICExXG4gICAgfTtcbiAgaWYgKDAgIT09IGkgJiYgKHAuYWRkSW5pdGlhbGl6ZXIgPSBjcmVhdGVBZGRJbml0aWFsaXplck1ldGhvZChhLCBoKSksIG8gfHwgMCAhPT0gaSAmJiAyICE9PSBpKSB7XG4gICAgaWYgKDIgPT09IGkpIGYgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIGFzc2VydEluc3RhbmNlSWZQcml2YXRlKGwsIGUpLCBuLnZhbHVlO1xuICAgIH07ZWxzZSB7XG4gICAgICB2YXIgdiA9IDAgPT09IGkgfHwgMSA9PT0gaTtcbiAgICAgICh2IHx8IDMgPT09IGkpICYmIChmID0gbyA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBhc3NlcnRJbnN0YW5jZUlmUHJpdmF0ZShsLCBlKSwgbi5nZXQuY2FsbChlKTtcbiAgICAgIH0gOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gbi5nZXQuY2FsbChlKTtcbiAgICAgIH0pLCAodiB8fCA0ID09PSBpKSAmJiAoZCA9IG8gPyBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICBhc3NlcnRJbnN0YW5jZUlmUHJpdmF0ZShsLCBlKSwgbi5zZXQuY2FsbChlLCB0KTtcbiAgICAgIH0gOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICBuLnNldC5jYWxsKGUsIHQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2UgZiA9IGZ1bmN0aW9uIChlKSB7XG4gICAgcmV0dXJuIGVbcl07XG4gIH0sIDAgPT09IGkgJiYgKGQgPSBmdW5jdGlvbiAoZSwgdCkge1xuICAgIGVbcl0gPSB0O1xuICB9KTtcbiAgdmFyIHkgPSBvID8gbC5iaW5kKCkgOiBmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiByIGluIGU7XG4gIH07XG4gIHAuYWNjZXNzID0gZiAmJiBkID8ge1xuICAgIGdldDogZixcbiAgICBzZXQ6IGQsXG4gICAgaGFzOiB5XG4gIH0gOiBmID8ge1xuICAgIGdldDogZixcbiAgICBoYXM6IHlcbiAgfSA6IHtcbiAgICBzZXQ6IGQsXG4gICAgaGFzOiB5XG4gIH07XG4gIHRyeSB7XG4gICAgcmV0dXJuIGUuY2FsbCh0LCBjLCBwKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBoLnYgPSAhMDtcbiAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0Tm90RmluaXNoZWQoZSwgdCkge1xuICBpZiAoZS52KSB0aHJvdyBuZXcgRXJyb3IoXCJhdHRlbXB0ZWQgdG8gY2FsbCBcIiArIHQgKyBcIiBhZnRlciBkZWNvcmF0aW9uIHdhcyBmaW5pc2hlZFwiKTtcbn1cbmZ1bmN0aW9uIGFzc2VydENhbGxhYmxlKGUsIHQpIHtcbiAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgdGhyb3cgbmV3IFR5cGVFcnJvcih0ICsgXCIgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xufVxuZnVuY3Rpb24gYXNzZXJ0VmFsaWRSZXR1cm5WYWx1ZShlLCB0KSB7XG4gIHZhciByID0gdHlwZW9mIHQ7XG4gIGlmICgxID09PSBlKSB7XG4gICAgaWYgKFwib2JqZWN0XCIgIT09IHIgfHwgbnVsbCA9PT0gdCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcImFjY2Vzc29yIGRlY29yYXRvcnMgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHdpdGggZ2V0LCBzZXQsIG9yIGluaXQgcHJvcGVydGllcyBvciB2b2lkIDBcIik7XG4gICAgdm9pZCAwICE9PSB0LmdldCAmJiBhc3NlcnRDYWxsYWJsZSh0LmdldCwgXCJhY2Nlc3Nvci5nZXRcIiksIHZvaWQgMCAhPT0gdC5zZXQgJiYgYXNzZXJ0Q2FsbGFibGUodC5zZXQsIFwiYWNjZXNzb3Iuc2V0XCIpLCB2b2lkIDAgIT09IHQuaW5pdCAmJiBhc3NlcnRDYWxsYWJsZSh0LmluaXQsIFwiYWNjZXNzb3IuaW5pdFwiKTtcbiAgfSBlbHNlIGlmIChcImZ1bmN0aW9uXCIgIT09IHIpIHtcbiAgICB2YXIgbjtcbiAgICB0aHJvdyBuID0gMCA9PT0gZSA/IFwiZmllbGRcIiA6IDUgPT09IGUgPyBcImNsYXNzXCIgOiBcIm1ldGhvZFwiLCBuZXcgVHlwZUVycm9yKG4gKyBcIiBkZWNvcmF0b3JzIG11c3QgcmV0dXJuIGEgZnVuY3Rpb24gb3Igdm9pZCAwXCIpO1xuICB9XG59XG5mdW5jdGlvbiBjdXJyeVRoaXMxKGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZSh0aGlzKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGN1cnJ5VGhpczIoZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICBlKHRoaXMsIHQpO1xuICB9O1xufVxuZnVuY3Rpb24gYXBwbHlNZW1iZXJEZWMoZSwgdCwgciwgbiwgYSwgaSwgcywgbywgYywgbCkge1xuICB2YXIgdSxcbiAgICBmLFxuICAgIGQsXG4gICAgcCxcbiAgICBoLFxuICAgIHYsXG4gICAgeSA9IHJbMF07XG4gIG4gfHwgQXJyYXkuaXNBcnJheSh5KSB8fCAoeSA9IFt5XSksIG8gPyB1ID0gMCA9PT0gaSB8fCAxID09PSBpID8ge1xuICAgIGdldDogY3VycnlUaGlzMShyWzNdKSxcbiAgICBzZXQ6IGN1cnJ5VGhpczIocls0XSlcbiAgfSA6IDMgPT09IGkgPyB7XG4gICAgZ2V0OiByWzNdXG4gIH0gOiA0ID09PSBpID8ge1xuICAgIHNldDogclszXVxuICB9IDoge1xuICAgIHZhbHVlOiByWzNdXG4gIH0gOiAwICE9PSBpICYmICh1ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCBhKSksIDEgPT09IGkgPyBkID0ge1xuICAgIGdldDogdS5nZXQsXG4gICAgc2V0OiB1LnNldFxuICB9IDogMiA9PT0gaSA/IGQgPSB1LnZhbHVlIDogMyA9PT0gaSA/IGQgPSB1LmdldCA6IDQgPT09IGkgJiYgKGQgPSB1LnNldCk7XG4gIGZvciAodmFyIGcgPSBuID8gMiA6IDEsIG0gPSB5Lmxlbmd0aCAtIDE7IG0gPj0gMDsgbSAtPSBnKSB7XG4gICAgdmFyIGI7XG4gICAgaWYgKHZvaWQgMCAhPT0gKHAgPSBtZW1iZXJEZWMoeVttXSwgbiA/IHlbbSAtIDFdIDogdm9pZCAwLCBhLCB1LCBjLCBpLCBzLCBvLCBkLCBsKSkpIGFzc2VydFZhbGlkUmV0dXJuVmFsdWUoaSwgcCksIDAgPT09IGkgPyBiID0gcCA6IDEgPT09IGkgPyAoYiA9IHAuaW5pdCwgaCA9IHAuZ2V0IHx8IGQuZ2V0LCB2ID0gcC5zZXQgfHwgZC5zZXQsIGQgPSB7XG4gICAgICBnZXQ6IGgsXG4gICAgICBzZXQ6IHZcbiAgICB9KSA6IGQgPSBwLCB2b2lkIDAgIT09IGIgJiYgKHZvaWQgMCA9PT0gZiA/IGYgPSBiIDogXCJmdW5jdGlvblwiID09IHR5cGVvZiBmID8gZiA9IFtmLCBiXSA6IGYucHVzaChiKSk7XG4gIH1cbiAgaWYgKDAgPT09IGkgfHwgMSA9PT0gaSkge1xuICAgIGlmICh2b2lkIDAgPT09IGYpIGYgPSBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfTtlbHNlIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGYpIHtcbiAgICAgIHZhciBJID0gZjtcbiAgICAgIGYgPSBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICBmb3IgKHZhciByID0gdCwgbiA9IEkubGVuZ3RoIC0gMTsgbiA+PSAwOyBuLS0pIHIgPSBJW25dLmNhbGwoZSwgcik7XG4gICAgICAgIHJldHVybiByO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHcgPSBmO1xuICAgICAgZiA9IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgIHJldHVybiB3LmNhbGwoZSwgdCk7XG4gICAgICB9O1xuICAgIH1cbiAgICBlLnB1c2goZik7XG4gIH1cbiAgMCAhPT0gaSAmJiAoMSA9PT0gaSA/ICh1LmdldCA9IGQuZ2V0LCB1LnNldCA9IGQuc2V0KSA6IDIgPT09IGkgPyB1LnZhbHVlID0gZCA6IDMgPT09IGkgPyB1LmdldCA9IGQgOiA0ID09PSBpICYmICh1LnNldCA9IGQpLCBvID8gMSA9PT0gaSA/IChlLnB1c2goZnVuY3Rpb24gKGUsIHQpIHtcbiAgICByZXR1cm4gZC5nZXQuY2FsbChlLCB0KTtcbiAgfSksIGUucHVzaChmdW5jdGlvbiAoZSwgdCkge1xuICAgIHJldHVybiBkLnNldC5jYWxsKGUsIHQpO1xuICB9KSkgOiAyID09PSBpID8gZS5wdXNoKGQpIDogZS5wdXNoKGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgcmV0dXJuIGQuY2FsbChlLCB0KTtcbiAgfSkgOiBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgYSwgdSkpO1xufVxuZnVuY3Rpb24gYXBwbHlNZW1iZXJEZWNzKGUsIHQsIHIpIHtcbiAgZm9yICh2YXIgbiwgYSwgaSwgcyA9IFtdLCBvID0gbmV3IE1hcCgpLCBjID0gbmV3IE1hcCgpLCBsID0gMDsgbCA8IHQubGVuZ3RoOyBsKyspIHtcbiAgICB2YXIgdSA9IHRbbF07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodSkpIHtcbiAgICAgIHZhciBmLFxuICAgICAgICBkLFxuICAgICAgICBwID0gdVsxXSxcbiAgICAgICAgaCA9IHVbMl0sXG4gICAgICAgIHYgPSB1Lmxlbmd0aCA+IDMsXG4gICAgICAgIHkgPSAxNiAmIHAsXG4gICAgICAgIGcgPSAhISg4ICYgcCksXG4gICAgICAgIG0gPSByO1xuICAgICAgaWYgKHAgJj0gNywgZyA/IChmID0gZSwgMCAhPT0gcCAmJiAoZCA9IGEgPSBhIHx8IFtdKSwgdiAmJiAhaSAmJiAoaSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiBfY2hlY2tJblJIUyh0KSA9PT0gZTtcbiAgICAgIH0pLCBtID0gaSkgOiAoZiA9IGUucHJvdG90eXBlLCAwICE9PSBwICYmIChkID0gbiA9IG4gfHwgW10pKSwgMCAhPT0gcCAmJiAhdikge1xuICAgICAgICB2YXIgYiA9IGcgPyBjIDogbyxcbiAgICAgICAgICBJID0gYi5nZXQoaCkgfHwgMDtcbiAgICAgICAgaWYgKCEwID09PSBJIHx8IDMgPT09IEkgJiYgNCAhPT0gcCB8fCA0ID09PSBJICYmIDMgIT09IHApIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBkZWNvcmF0ZSBhIHB1YmxpYyBtZXRob2QvYWNjZXNzb3IgdGhhdCBoYXMgdGhlIHNhbWUgbmFtZSBhcyBhIHByZXZpb3VzbHkgZGVjb3JhdGVkIHB1YmxpYyBtZXRob2QvYWNjZXNzb3IuIFRoaXMgaXMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgYnkgdGhlIGRlY29yYXRvcnMgcGx1Z2luLiBQcm9wZXJ0eSBuYW1lIHdhczogXCIgKyBoKTtcbiAgICAgICAgYi5zZXQoaCwgISghSSAmJiBwID4gMikgfHwgcCk7XG4gICAgICB9XG4gICAgICBhcHBseU1lbWJlckRlYyhzLCBmLCB1LCB5LCBoLCBwLCBnLCB2LCBkLCBtKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHB1c2hJbml0aWFsaXplcnMocywgbiksIHB1c2hJbml0aWFsaXplcnMocywgYSksIHM7XG59XG5mdW5jdGlvbiBwdXNoSW5pdGlhbGl6ZXJzKGUsIHQpIHtcbiAgdCAmJiBlLnB1c2goZnVuY3Rpb24gKGUpIHtcbiAgICBmb3IgKHZhciByID0gMDsgciA8IHQubGVuZ3RoOyByKyspIHRbcl0uY2FsbChlKTtcbiAgICByZXR1cm4gZTtcbiAgfSk7XG59XG5mdW5jdGlvbiBhcHBseUNsYXNzRGVjcyhlLCB0LCByKSB7XG4gIGlmICh0Lmxlbmd0aCkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgYSA9IGUsIGkgPSBlLm5hbWUsIHMgPSByID8gMiA6IDEsIG8gPSB0Lmxlbmd0aCAtIDE7IG8gPj0gMDsgbyAtPSBzKSB7XG4gICAgICB2YXIgYyA9IHtcbiAgICAgICAgdjogITFcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbCA9IHRbb10uY2FsbChyID8gdFtvIC0gMV0gOiB2b2lkIDAsIGEsIHtcbiAgICAgICAgICBraW5kOiBcImNsYXNzXCIsXG4gICAgICAgICAgbmFtZTogaSxcbiAgICAgICAgICBhZGRJbml0aWFsaXplcjogY3JlYXRlQWRkSW5pdGlhbGl6ZXJNZXRob2QobiwgYylcbiAgICAgICAgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBjLnYgPSAhMDtcbiAgICAgIH1cbiAgICAgIHZvaWQgMCAhPT0gbCAmJiAoYXNzZXJ0VmFsaWRSZXR1cm5WYWx1ZSg1LCBsKSwgYSA9IGwpO1xuICAgIH1cbiAgICByZXR1cm4gW2EsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgbi5sZW5ndGg7IGUrKykgbltlXS5jYWxsKGEpO1xuICAgIH1dO1xuICB9XG59XG5mdW5jdGlvbiBfYXBwbHlEZWNzMjMwNShlLCB0LCByLCBuLCBhKSB7XG4gIHJldHVybiB7XG4gICAgZTogYXBwbHlNZW1iZXJEZWNzKGUsIHQsIGEpLFxuICAgIGdldCBjKCkge1xuICAgICAgcmV0dXJuIGFwcGx5Q2xhc3NEZWNzKGUsIHIsIG4pO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIF9hc3luY0dlbmVyYXRvckRlbGVnYXRlKHQpIHtcbiAgdmFyIGUgPSB7fSxcbiAgICBuID0gITE7XG4gIGZ1bmN0aW9uIHB1bXAoZSwgcikge1xuICAgIHJldHVybiBuID0gITAsIHIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAobikge1xuICAgICAgbih0W2VdKHIpKTtcbiAgICB9KSwge1xuICAgICAgZG9uZTogITEsXG4gICAgICB2YWx1ZTogbmV3IF9PdmVybG9hZFlpZWxkKHIsIDEpXG4gICAgfTtcbiAgfVxuICByZXR1cm4gZVtcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSwgZS5uZXh0ID0gZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gbiA/IChuID0gITEsIHQpIDogcHVtcChcIm5leHRcIiwgdCk7XG4gIH0sIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdC50aHJvdyAmJiAoZS50aHJvdyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgaWYgKG4pIHRocm93IG4gPSAhMSwgdDtcbiAgICByZXR1cm4gcHVtcChcInRocm93XCIsIHQpO1xuICB9KSwgXCJmdW5jdGlvblwiID09IHR5cGVvZiB0LnJldHVybiAmJiAoZS5yZXR1cm4gPSBmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiBuID8gKG4gPSAhMSwgdCkgOiBwdW1wKFwicmV0dXJuXCIsIHQpO1xuICB9KSwgZTtcbn1cbmZ1bmN0aW9uIF9hc3luY0l0ZXJhdG9yKHIpIHtcbiAgdmFyIG4sXG4gICAgdCxcbiAgICBvLFxuICAgIGUgPSAyO1xuICBmb3IgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiAodCA9IFN5bWJvbC5hc3luY0l0ZXJhdG9yLCBvID0gU3ltYm9sLml0ZXJhdG9yKTsgZS0tOykge1xuICAgIGlmICh0ICYmIG51bGwgIT0gKG4gPSByW3RdKSkgcmV0dXJuIG4uY2FsbChyKTtcbiAgICBpZiAobyAmJiBudWxsICE9IChuID0gcltvXSkpIHJldHVybiBuZXcgQXN5bmNGcm9tU3luY0l0ZXJhdG9yKG4uY2FsbChyKSk7XG4gICAgdCA9IFwiQEBhc3luY0l0ZXJhdG9yXCIsIG8gPSBcIkBAaXRlcmF0b3JcIjtcbiAgfVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGlzIG5vdCBhc3luYyBpdGVyYWJsZVwiKTtcbn1cbmZ1bmN0aW9uIEFzeW5jRnJvbVN5bmNJdGVyYXRvcihyKSB7XG4gIGZ1bmN0aW9uIEFzeW5jRnJvbVN5bmNJdGVyYXRvckNvbnRpbnVhdGlvbihyKSB7XG4gICAgaWYgKE9iamVjdChyKSAhPT0gcikgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IociArIFwiIGlzIG5vdCBhbiBvYmplY3QuXCIpKTtcbiAgICB2YXIgbiA9IHIuZG9uZTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUpLnRoZW4oZnVuY3Rpb24gKHIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiByLFxuICAgICAgICBkb25lOiBuXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBBc3luY0Zyb21TeW5jSXRlcmF0b3IgPSBmdW5jdGlvbiAocikge1xuICAgIHRoaXMucyA9IHIsIHRoaXMubiA9IHIubmV4dDtcbiAgfSwgQXN5bmNGcm9tU3luY0l0ZXJhdG9yLnByb3RvdHlwZSA9IHtcbiAgICBzOiBudWxsLFxuICAgIG46IG51bGwsXG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIEFzeW5jRnJvbVN5bmNJdGVyYXRvckNvbnRpbnVhdGlvbih0aGlzLm4uYXBwbHkodGhpcy5zLCBhcmd1bWVudHMpKTtcbiAgICB9LFxuICAgIHJldHVybjogZnVuY3Rpb24gKHIpIHtcbiAgICAgIHZhciBuID0gdGhpcy5zLnJldHVybjtcbiAgICAgIHJldHVybiB2b2lkIDAgPT09IG4gPyBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICB2YWx1ZTogcixcbiAgICAgICAgZG9uZTogITBcbiAgICAgIH0pIDogQXN5bmNGcm9tU3luY0l0ZXJhdG9yQ29udGludWF0aW9uKG4uYXBwbHkodGhpcy5zLCBhcmd1bWVudHMpKTtcbiAgICB9LFxuICAgIHRocm93OiBmdW5jdGlvbiAocikge1xuICAgICAgdmFyIG4gPSB0aGlzLnMucmV0dXJuO1xuICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gbiA/IFByb21pc2UucmVqZWN0KHIpIDogQXN5bmNGcm9tU3luY0l0ZXJhdG9yQ29udGludWF0aW9uKG4uYXBwbHkodGhpcy5zLCBhcmd1bWVudHMpKTtcbiAgICB9XG4gIH0sIG5ldyBBc3luY0Zyb21TeW5jSXRlcmF0b3Iocik7XG59XG5mdW5jdGlvbiBfYXdhaXRBc3luY0dlbmVyYXRvcihlKSB7XG4gIHJldHVybiBuZXcgX092ZXJsb2FkWWllbGQoZSwgMCk7XG59XG5mdW5jdGlvbiBfY2hlY2tJblJIUyhlKSB7XG4gIGlmIChPYmplY3QoZSkgIT09IGUpIHRocm93IFR5cGVFcnJvcihcInJpZ2h0LWhhbmQgc2lkZSBvZiAnaW4nIHNob3VsZCBiZSBhbiBvYmplY3QsIGdvdCBcIiArIChudWxsICE9PSBlID8gdHlwZW9mIGUgOiBcIm51bGxcIikpO1xuICByZXR1cm4gZTtcbn1cbmZ1bmN0aW9uIF9kZWZpbmVBY2Nlc3NvcihlLCByLCBuLCB0KSB7XG4gIHZhciBjID0ge1xuICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgZW51bWVyYWJsZTogITBcbiAgfTtcbiAgcmV0dXJuIGNbZV0gPSB0LCBPYmplY3QuZGVmaW5lUHJvcGVydHkociwgbiwgYyk7XG59XG5mdW5jdGlvbiBkaXNwb3NlX1N1cHByZXNzZWRFcnJvcihyLCBlKSB7XG4gIHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTdXBwcmVzc2VkRXJyb3IgPyBkaXNwb3NlX1N1cHByZXNzZWRFcnJvciA9IFN1cHByZXNzZWRFcnJvciA6IChkaXNwb3NlX1N1cHByZXNzZWRFcnJvciA9IGZ1bmN0aW9uIChyLCBlKSB7XG4gICAgdGhpcy5zdXBwcmVzc2VkID0gciwgdGhpcy5lcnJvciA9IGUsIHRoaXMuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgfSwgZGlzcG9zZV9TdXBwcmVzc2VkRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IGRpc3Bvc2VfU3VwcHJlc3NlZEVycm9yLFxuICAgICAgd3JpdGFibGU6ICEwLFxuICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH1cbiAgfSkpLCBuZXcgZGlzcG9zZV9TdXBwcmVzc2VkRXJyb3IociwgZSk7XG59XG5mdW5jdGlvbiBfZGlzcG9zZShyLCBlLCBzKSB7XG4gIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgZm9yICg7IHIubGVuZ3RoID4gMDspIHRyeSB7XG4gICAgICB2YXIgbyA9IHIucG9wKCksXG4gICAgICAgIHAgPSBvLmQuY2FsbChvLnYpO1xuICAgICAgaWYgKG8uYSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwKS50aGVuKG5leHQsIGVycik7XG4gICAgfSBjYXRjaCAocikge1xuICAgICAgcmV0dXJuIGVycihyKTtcbiAgICB9XG4gICAgaWYgKHMpIHRocm93IGU7XG4gIH1cbiAgZnVuY3Rpb24gZXJyKHIpIHtcbiAgICByZXR1cm4gZSA9IHMgPyBuZXcgZGlzcG9zZV9TdXBwcmVzc2VkRXJyb3IociwgZSkgOiByLCBzID0gITAsIG5leHQoKTtcbiAgfVxuICByZXR1cm4gbmV4dCgpO1xufVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHtcbiAgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTtcbiAgaWYgKG51bGwgIT0gdCkge1xuICAgIHZhciBlLFxuICAgICAgbixcbiAgICAgIGksXG4gICAgICB1LFxuICAgICAgYSA9IFtdLFxuICAgICAgZiA9ICEwLFxuICAgICAgbyA9ICExO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaSA9ICh0ID0gdC5jYWxsKHIpKS5uZXh0LCAwID09PSBsKSB7XG4gICAgICAgIGlmIChPYmplY3QodCkgIT09IHQpIHJldHVybjtcbiAgICAgICAgZiA9ICExO1xuICAgICAgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApO1xuICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgIG8gPSAhMCwgbiA9IHI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghZiAmJiBudWxsICE9IHQucmV0dXJuICYmICh1ID0gdC5yZXR1cm4oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKG8pIHRocm93IG47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9XG59XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXRMb29zZShlLCByKSB7XG4gIHZhciB0ID0gZSAmJiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIGVbU3ltYm9sLml0ZXJhdG9yXSB8fCBlW1wiQEBpdGVyYXRvclwiXSk7XG4gIGlmIChudWxsICE9IHQpIHtcbiAgICB2YXIgbyxcbiAgICAgIGwgPSBbXTtcbiAgICBmb3IgKHQgPSB0LmNhbGwoZSk7IGUubGVuZ3RoIDwgciAmJiAhKG8gPSB0Lm5leHQoKSkuZG9uZTspIGwucHVzaChvLnZhbHVlKTtcbiAgICByZXR1cm4gbDtcbiAgfVxufVxudmFyIFJFQUNUX0VMRU1FTlRfVFlQRTtcbmZ1bmN0aW9uIF9qc3goZSwgciwgRSwgbCkge1xuICBSRUFDVF9FTEVNRU5UX1RZUEUgfHwgKFJFQUNUX0VMRU1FTlRfVFlQRSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFN5bWJvbC5mb3IgJiYgU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIikgfHwgNjAxMDMpO1xuICB2YXIgbyA9IGUgJiYgZS5kZWZhdWx0UHJvcHMsXG4gICAgbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAzO1xuICBpZiAociB8fCAwID09PSBuIHx8IChyID0ge1xuICAgIGNoaWxkcmVuOiB2b2lkIDBcbiAgfSksIDEgPT09IG4pIHIuY2hpbGRyZW4gPSBsO2Vsc2UgaWYgKG4gPiAxKSB7XG4gICAgZm9yICh2YXIgdCA9IG5ldyBBcnJheShuKSwgZiA9IDA7IGYgPCBuOyBmKyspIHRbZl0gPSBhcmd1bWVudHNbZiArIDNdO1xuICAgIHIuY2hpbGRyZW4gPSB0O1xuICB9XG4gIGlmIChyICYmIG8pIGZvciAodmFyIGkgaW4gbykgdm9pZCAwID09PSByW2ldICYmIChyW2ldID0gb1tpXSk7ZWxzZSByIHx8IChyID0gbyB8fCB7fSk7XG4gIHJldHVybiB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICB0eXBlOiBlLFxuICAgIGtleTogdm9pZCAwID09PSBFID8gbnVsbCA6IFwiXCIgKyBFLFxuICAgIHJlZjogbnVsbCxcbiAgICBwcm9wczogcixcbiAgICBfb3duZXI6IG51bGxcbiAgfTtcbn1cbmZ1bmN0aW9uIG93bktleXMoZSwgcikge1xuICB2YXIgdCA9IE9iamVjdC5rZXlzKGUpO1xuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTtcbiAgICByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7XG4gICAgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7XG4gIH1cbiAgcmV0dXJuIHQ7XG59XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMihlKSB7XG4gIGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7XG4gICAgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9O1xuICAgIHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBfcmVnZW5lcmF0b3JSdW50aW1lKCkge1xuICBcInVzZSBzdHJpY3RcIjsgLyohIHJlZ2VuZXJhdG9yLXJ1bnRpbWUgLS0gQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuIC0tIGxpY2Vuc2UgKE1JVCk6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9ibG9iL21haW4vTElDRU5TRSAqL1xuICBfcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlO1xuICB9O1xuICB2YXIgdCxcbiAgICBlID0ge30sXG4gICAgciA9IE9iamVjdC5wcm90b3R5cGUsXG4gICAgbiA9IHIuaGFzT3duUHJvcGVydHksXG4gICAgbyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB8fCBmdW5jdGlvbiAodCwgZSwgcikge1xuICAgICAgdFtlXSA9IHIudmFsdWU7XG4gICAgfSxcbiAgICBpID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgPyBTeW1ib2wgOiB7fSxcbiAgICBhID0gaS5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIixcbiAgICBjID0gaS5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCIsXG4gICAgdSA9IGkudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG4gIGZ1bmN0aW9uIGRlZmluZSh0LCBlLCByKSB7XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBlLCB7XG4gICAgICB2YWx1ZTogcixcbiAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgY29uZmlndXJhYmxlOiAhMCxcbiAgICAgIHdyaXRhYmxlOiAhMFxuICAgIH0pLCB0W2VdO1xuICB9XG4gIHRyeSB7XG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAodCkge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uICh0LCBlLCByKSB7XG4gICAgICByZXR1cm4gdFtlXSA9IHI7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiB3cmFwKHQsIGUsIHIsIG4pIHtcbiAgICB2YXIgaSA9IGUgJiYgZS5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBlIDogR2VuZXJhdG9yLFxuICAgICAgYSA9IE9iamVjdC5jcmVhdGUoaS5wcm90b3R5cGUpLFxuICAgICAgYyA9IG5ldyBDb250ZXh0KG4gfHwgW10pO1xuICAgIHJldHVybiBvKGEsIFwiX2ludm9rZVwiLCB7XG4gICAgICB2YWx1ZTogbWFrZUludm9rZU1ldGhvZCh0LCByLCBjKVxuICAgIH0pLCBhO1xuICB9XG4gIGZ1bmN0aW9uIHRyeUNhdGNoKHQsIGUsIHIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJub3JtYWxcIixcbiAgICAgICAgYXJnOiB0LmNhbGwoZSwgcilcbiAgICAgIH07XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJ0aHJvd1wiLFxuICAgICAgICBhcmc6IHRcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGUud3JhcCA9IHdyYXA7XG4gIHZhciBoID0gXCJzdXNwZW5kZWRTdGFydFwiLFxuICAgIGwgPSBcInN1c3BlbmRlZFlpZWxkXCIsXG4gICAgZiA9IFwiZXhlY3V0aW5nXCIsXG4gICAgcyA9IFwiY29tcGxldGVkXCIsXG4gICAgeSA9IHt9O1xuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cbiAgdmFyIHAgPSB7fTtcbiAgZGVmaW5lKHAsIGEsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIHZhciBkID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuICAgIHYgPSBkICYmIGQoZCh2YWx1ZXMoW10pKSk7XG4gIHYgJiYgdiAhPT0gciAmJiBuLmNhbGwodiwgYSkgJiYgKHAgPSB2KTtcbiAgdmFyIGcgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwKTtcbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHQpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgZGVmaW5lKHQsIGUsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UoZSwgdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKHQsIGUpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UociwgbywgaSwgYSkge1xuICAgICAgdmFyIGMgPSB0cnlDYXRjaCh0W3JdLCB0LCBvKTtcbiAgICAgIGlmIChcInRocm93XCIgIT09IGMudHlwZSkge1xuICAgICAgICB2YXIgdSA9IGMuYXJnLFxuICAgICAgICAgIGggPSB1LnZhbHVlO1xuICAgICAgICByZXR1cm4gaCAmJiBcIm9iamVjdFwiID09IHR5cGVvZiBoICYmIG4uY2FsbChoLCBcIl9fYXdhaXRcIikgPyBlLnJlc29sdmUoaC5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB0LCBpLCBhKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCB0LCBpLCBhKTtcbiAgICAgICAgfSkgOiBlLnJlc29sdmUoaCkudGhlbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHUudmFsdWUgPSB0LCBpKHUpO1xuICAgICAgICB9LCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCB0LCBpLCBhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBhKGMuYXJnKTtcbiAgICB9XG4gICAgdmFyIHI7XG4gICAgbyh0aGlzLCBcIl9pbnZva2VcIiwge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0LCBuKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICAgIHJldHVybiBuZXcgZShmdW5jdGlvbiAoZSwgcikge1xuICAgICAgICAgICAgaW52b2tlKHQsIG4sIGUsIHIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByID0gciA/IHIudGhlbihjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZywgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcpIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGUsIHIsIG4pIHtcbiAgICB2YXIgbyA9IGg7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpLCBhKSB7XG4gICAgICBpZiAobyA9PT0gZikgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIGlmIChvID09PSBzKSB7XG4gICAgICAgIGlmIChcInRocm93XCIgPT09IGkpIHRocm93IGE7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IHQsXG4gICAgICAgICAgZG9uZTogITBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGZvciAobi5tZXRob2QgPSBpLCBuLmFyZyA9IGE7Oykge1xuICAgICAgICB2YXIgYyA9IG4uZGVsZWdhdGU7XG4gICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgdmFyIHUgPSBtYXliZUludm9rZURlbGVnYXRlKGMsIG4pO1xuICAgICAgICAgIGlmICh1KSB7XG4gICAgICAgICAgICBpZiAodSA9PT0geSkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gdTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwibmV4dFwiID09PSBuLm1ldGhvZCkgbi5zZW50ID0gbi5fc2VudCA9IG4uYXJnO2Vsc2UgaWYgKFwidGhyb3dcIiA9PT0gbi5tZXRob2QpIHtcbiAgICAgICAgICBpZiAobyA9PT0gaCkgdGhyb3cgbyA9IHMsIG4uYXJnO1xuICAgICAgICAgIG4uZGlzcGF0Y2hFeGNlcHRpb24obi5hcmcpO1xuICAgICAgICB9IGVsc2UgXCJyZXR1cm5cIiA9PT0gbi5tZXRob2QgJiYgbi5hYnJ1cHQoXCJyZXR1cm5cIiwgbi5hcmcpO1xuICAgICAgICBvID0gZjtcbiAgICAgICAgdmFyIHAgPSB0cnlDYXRjaChlLCByLCBuKTtcbiAgICAgICAgaWYgKFwibm9ybWFsXCIgPT09IHAudHlwZSkge1xuICAgICAgICAgIGlmIChvID0gbi5kb25lID8gcyA6IGwsIHAuYXJnID09PSB5KSBjb250aW51ZTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHAuYXJnLFxuICAgICAgICAgICAgZG9uZTogbi5kb25lXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcInRocm93XCIgPT09IHAudHlwZSAmJiAobyA9IHMsIG4ubWV0aG9kID0gXCJ0aHJvd1wiLCBuLmFyZyA9IHAuYXJnKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZSwgcikge1xuICAgIHZhciBuID0gci5tZXRob2QsXG4gICAgICBvID0gZS5pdGVyYXRvcltuXTtcbiAgICBpZiAobyA9PT0gdCkgcmV0dXJuIHIuZGVsZWdhdGUgPSBudWxsLCBcInRocm93XCIgPT09IG4gJiYgZS5pdGVyYXRvci5yZXR1cm4gJiYgKHIubWV0aG9kID0gXCJyZXR1cm5cIiwgci5hcmcgPSB0LCBtYXliZUludm9rZURlbGVnYXRlKGUsIHIpLCBcInRocm93XCIgPT09IHIubWV0aG9kKSB8fCBcInJldHVyblwiICE9PSBuICYmIChyLm1ldGhvZCA9IFwidGhyb3dcIiwgci5hcmcgPSBuZXcgVHlwZUVycm9yKFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAnXCIgKyBuICsgXCInIG1ldGhvZFwiKSksIHk7XG4gICAgdmFyIGkgPSB0cnlDYXRjaChvLCBlLml0ZXJhdG9yLCByLmFyZyk7XG4gICAgaWYgKFwidGhyb3dcIiA9PT0gaS50eXBlKSByZXR1cm4gci5tZXRob2QgPSBcInRocm93XCIsIHIuYXJnID0gaS5hcmcsIHIuZGVsZWdhdGUgPSBudWxsLCB5O1xuICAgIHZhciBhID0gaS5hcmc7XG4gICAgcmV0dXJuIGEgPyBhLmRvbmUgPyAocltlLnJlc3VsdE5hbWVdID0gYS52YWx1ZSwgci5uZXh0ID0gZS5uZXh0TG9jLCBcInJldHVyblwiICE9PSByLm1ldGhvZCAmJiAoci5tZXRob2QgPSBcIm5leHRcIiwgci5hcmcgPSB0KSwgci5kZWxlZ2F0ZSA9IG51bGwsIHkpIDogYSA6IChyLm1ldGhvZCA9IFwidGhyb3dcIiwgci5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIiksIHIuZGVsZWdhdGUgPSBudWxsLCB5KTtcbiAgfVxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkodCkge1xuICAgIHZhciBlID0ge1xuICAgICAgdHJ5TG9jOiB0WzBdXG4gICAgfTtcbiAgICAxIGluIHQgJiYgKGUuY2F0Y2hMb2MgPSB0WzFdKSwgMiBpbiB0ICYmIChlLmZpbmFsbHlMb2MgPSB0WzJdLCBlLmFmdGVyTG9jID0gdFszXSksIHRoaXMudHJ5RW50cmllcy5wdXNoKGUpO1xuICB9XG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkodCkge1xuICAgIHZhciBlID0gdC5jb21wbGV0aW9uIHx8IHt9O1xuICAgIGUudHlwZSA9IFwibm9ybWFsXCIsIGRlbGV0ZSBlLmFyZywgdC5jb21wbGV0aW9uID0gZTtcbiAgfVxuICBmdW5jdGlvbiBDb250ZXh0KHQpIHtcbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbe1xuICAgICAgdHJ5TG9jOiBcInJvb3RcIlxuICAgIH1dLCB0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKSwgdGhpcy5yZXNldCghMCk7XG4gIH1cbiAgZnVuY3Rpb24gdmFsdWVzKGUpIHtcbiAgICBpZiAoZSB8fCBcIlwiID09PSBlKSB7XG4gICAgICB2YXIgciA9IGVbYV07XG4gICAgICBpZiAocikgcmV0dXJuIHIuY2FsbChlKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUubmV4dCkgcmV0dXJuIGU7XG4gICAgICBpZiAoIWlzTmFOKGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgbyA9IC0xLFxuICAgICAgICAgIGkgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgICAgZm9yICg7ICsrbyA8IGUubGVuZ3RoOykgaWYgKG4uY2FsbChlLCBvKSkgcmV0dXJuIG5leHQudmFsdWUgPSBlW29dLCBuZXh0LmRvbmUgPSAhMSwgbmV4dDtcbiAgICAgICAgICAgIHJldHVybiBuZXh0LnZhbHVlID0gdCwgbmV4dC5kb25lID0gITAsIG5leHQ7XG4gICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGkubmV4dCA9IGk7XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IodHlwZW9mIGUgKyBcIiBpcyBub3QgaXRlcmFibGVcIik7XG4gIH1cbiAgcmV0dXJuIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBvKGcsIFwiY29uc3RydWN0b3JcIiwge1xuICAgIHZhbHVlOiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICBjb25maWd1cmFibGU6ICEwXG4gIH0pLCBvKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIHtcbiAgICB2YWx1ZTogR2VuZXJhdG9yRnVuY3Rpb24sXG4gICAgY29uZmlndXJhYmxlOiAhMFxuICB9KSwgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIHUsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIiksIGUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIGUgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQgJiYgdC5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gISFlICYmIChlID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIgPT09IChlLmRpc3BsYXlOYW1lIHx8IGUubmFtZSkpO1xuICB9LCBlLm1hcmsgPSBmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YodCwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpIDogKHQuX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIGRlZmluZSh0LCB1LCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpKSwgdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGcpLCB0O1xuICB9LCBlLmF3cmFwID0gZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX19hd2FpdDogdFxuICAgIH07XG4gIH0sIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSksIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KSwgZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvciwgZS5hc3luYyA9IGZ1bmN0aW9uICh0LCByLCBuLCBvLCBpKSB7XG4gICAgdm9pZCAwID09PSBpICYmIChpID0gUHJvbWlzZSk7XG4gICAgdmFyIGEgPSBuZXcgQXN5bmNJdGVyYXRvcih3cmFwKHQsIHIsIG4sIG8pLCBpKTtcbiAgICByZXR1cm4gZS5pc0dlbmVyYXRvckZ1bmN0aW9uKHIpID8gYSA6IGEubmV4dCgpLnRoZW4oZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiB0LmRvbmUgPyB0LnZhbHVlIDogYS5uZXh0KCk7XG4gICAgfSk7XG4gIH0sIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhnKSwgZGVmaW5lKGcsIHUsIFwiR2VuZXJhdG9yXCIpLCBkZWZpbmUoZywgYSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KSwgZGVmaW5lKGcsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KSwgZS5rZXlzID0gZnVuY3Rpb24gKHQpIHtcbiAgICB2YXIgZSA9IE9iamVjdCh0KSxcbiAgICAgIHIgPSBbXTtcbiAgICBmb3IgKHZhciBuIGluIGUpIHIucHVzaChuKTtcbiAgICByZXR1cm4gci5yZXZlcnNlKCksIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICBmb3IgKDsgci5sZW5ndGg7KSB7XG4gICAgICAgIHZhciB0ID0gci5wb3AoKTtcbiAgICAgICAgaWYgKHQgaW4gZSkgcmV0dXJuIG5leHQudmFsdWUgPSB0LCBuZXh0LmRvbmUgPSAhMSwgbmV4dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXh0LmRvbmUgPSAhMCwgbmV4dDtcbiAgICB9O1xuICB9LCBlLnZhbHVlcyA9IHZhbHVlcywgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAodGhpcy5wcmV2ID0gMCwgdGhpcy5uZXh0ID0gMCwgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHQsIHRoaXMuZG9uZSA9ICExLCB0aGlzLmRlbGVnYXRlID0gbnVsbCwgdGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5hcmcgPSB0LCB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KSwgIWUpIGZvciAodmFyIHIgaW4gdGhpcykgXCJ0XCIgPT09IHIuY2hhckF0KDApICYmIG4uY2FsbCh0aGlzLCByKSAmJiAhaXNOYU4oK3Iuc2xpY2UoMSkpICYmICh0aGlzW3JdID0gdCk7XG4gICAgfSxcbiAgICBzdG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmRvbmUgPSAhMDtcbiAgICAgIHZhciB0ID0gdGhpcy50cnlFbnRyaWVzWzBdLmNvbXBsZXRpb247XG4gICAgICBpZiAoXCJ0aHJvd1wiID09PSB0LnR5cGUpIHRocm93IHQuYXJnO1xuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKHRoaXMuZG9uZSkgdGhyb3cgZTtcbiAgICAgIHZhciByID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShuLCBvKSB7XG4gICAgICAgIHJldHVybiBhLnR5cGUgPSBcInRocm93XCIsIGEuYXJnID0gZSwgci5uZXh0ID0gbiwgbyAmJiAoci5tZXRob2QgPSBcIm5leHRcIiwgci5hcmcgPSB0KSwgISFvO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbyA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBvID49IDA7IC0tbykge1xuICAgICAgICB2YXIgaSA9IHRoaXMudHJ5RW50cmllc1tvXSxcbiAgICAgICAgICBhID0gaS5jb21wbGV0aW9uO1xuICAgICAgICBpZiAoXCJyb290XCIgPT09IGkudHJ5TG9jKSByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICBpZiAoaS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGMgPSBuLmNhbGwoaSwgXCJjYXRjaExvY1wiKSxcbiAgICAgICAgICAgIHUgPSBuLmNhbGwoaSwgXCJmaW5hbGx5TG9jXCIpO1xuICAgICAgICAgIGlmIChjICYmIHUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBpLmNhdGNoTG9jKSByZXR1cm4gaGFuZGxlKGkuY2F0Y2hMb2MsICEwKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBpLmZpbmFsbHlMb2MpIHJldHVybiBoYW5kbGUoaS5maW5hbGx5TG9jKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBpLmNhdGNoTG9jKSByZXR1cm4gaGFuZGxlKGkuY2F0Y2hMb2MsICEwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF1KSB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBpLmZpbmFsbHlMb2MpIHJldHVybiBoYW5kbGUoaS5maW5hbGx5TG9jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGFicnVwdDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgIGZvciAodmFyIHIgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgciA+PSAwOyAtLXIpIHtcbiAgICAgICAgdmFyIG8gPSB0aGlzLnRyeUVudHJpZXNbcl07XG4gICAgICAgIGlmIChvLnRyeUxvYyA8PSB0aGlzLnByZXYgJiYgbi5jYWxsKG8sIFwiZmluYWxseUxvY1wiKSAmJiB0aGlzLnByZXYgPCBvLmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgaSA9IG87XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGkgJiYgKFwiYnJlYWtcIiA9PT0gdCB8fCBcImNvbnRpbnVlXCIgPT09IHQpICYmIGkudHJ5TG9jIDw9IGUgJiYgZSA8PSBpLmZpbmFsbHlMb2MgJiYgKGkgPSBudWxsKTtcbiAgICAgIHZhciBhID0gaSA/IGkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmV0dXJuIGEudHlwZSA9IHQsIGEuYXJnID0gZSwgaSA/ICh0aGlzLm1ldGhvZCA9IFwibmV4dFwiLCB0aGlzLm5leHQgPSBpLmZpbmFsbHlMb2MsIHkpIDogdGhpcy5jb21wbGV0ZShhKTtcbiAgICB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgaWYgKFwidGhyb3dcIiA9PT0gdC50eXBlKSB0aHJvdyB0LmFyZztcbiAgICAgIHJldHVybiBcImJyZWFrXCIgPT09IHQudHlwZSB8fCBcImNvbnRpbnVlXCIgPT09IHQudHlwZSA/IHRoaXMubmV4dCA9IHQuYXJnIDogXCJyZXR1cm5cIiA9PT0gdC50eXBlID8gKHRoaXMucnZhbCA9IHRoaXMuYXJnID0gdC5hcmcsIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIiwgdGhpcy5uZXh0ID0gXCJlbmRcIikgOiBcIm5vcm1hbFwiID09PSB0LnR5cGUgJiYgZSAmJiAodGhpcy5uZXh0ID0gZSksIHk7XG4gICAgfSxcbiAgICBmaW5pc2g6IGZ1bmN0aW9uICh0KSB7XG4gICAgICBmb3IgKHZhciBlID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGUgPj0gMDsgLS1lKSB7XG4gICAgICAgIHZhciByID0gdGhpcy50cnlFbnRyaWVzW2VdO1xuICAgICAgICBpZiAoci5maW5hbGx5TG9jID09PSB0KSByZXR1cm4gdGhpcy5jb21wbGV0ZShyLmNvbXBsZXRpb24sIHIuYWZ0ZXJMb2MpLCByZXNldFRyeUVudHJ5KHIpLCB5O1xuICAgICAgfVxuICAgIH0sXG4gICAgY2F0Y2g6IGZ1bmN0aW9uICh0KSB7XG4gICAgICBmb3IgKHZhciBlID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGUgPj0gMDsgLS1lKSB7XG4gICAgICAgIHZhciByID0gdGhpcy50cnlFbnRyaWVzW2VdO1xuICAgICAgICBpZiAoci50cnlMb2MgPT09IHQpIHtcbiAgICAgICAgICB2YXIgbiA9IHIuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAoXCJ0aHJvd1wiID09PSBuLnR5cGUpIHtcbiAgICAgICAgICAgIHZhciBvID0gbi5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24gKGUsIHIsIG4pIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGUpLFxuICAgICAgICByZXN1bHROYW1lOiByLFxuICAgICAgICBuZXh0TG9jOiBuXG4gICAgICB9LCBcIm5leHRcIiA9PT0gdGhpcy5tZXRob2QgJiYgKHRoaXMuYXJnID0gdCksIHk7XG4gICAgfVxuICB9LCBlO1xufVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgX3R5cGVvZihvKTtcbn1cbmZ1bmN0aW9uIF91c2luZyhvLCBlLCBuKSB7XG4gIGlmIChudWxsID09IGUpIHJldHVybiBlO1xuICBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcInVzaW5nIGRlY2xhcmF0aW9ucyBjYW4gb25seSBiZSB1c2VkIHdpdGggb2JqZWN0cywgbnVsbCwgb3IgdW5kZWZpbmVkLlwiKTtcbiAgaWYgKG4pIHZhciByID0gZVtTeW1ib2wuYXN5bmNEaXNwb3NlIHx8IFN5bWJvbC5mb3IoXCJTeW1ib2wuYXN5bmNEaXNwb3NlXCIpXTtcbiAgaWYgKG51bGwgPT0gciAmJiAociA9IGVbU3ltYm9sLmRpc3Bvc2UgfHwgU3ltYm9sLmZvcihcIlN5bWJvbC5kaXNwb3NlXCIpXSksIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByb3BlcnR5IFtTeW1ib2wuZGlzcG9zZV0gaXMgbm90IGEgZnVuY3Rpb24uXCIpO1xuICByZXR1cm4gby5wdXNoKHtcbiAgICB2OiBlLFxuICAgIGQ6IHIsXG4gICAgYTogblxuICB9KSwgZTtcbn1cbmZ1bmN0aW9uIF93cmFwUmVnRXhwKCkge1xuICBfd3JhcFJlZ0V4cCA9IGZ1bmN0aW9uIChlLCByKSB7XG4gICAgcmV0dXJuIG5ldyBCYWJlbFJlZ0V4cChlLCB2b2lkIDAsIHIpO1xuICB9O1xuICB2YXIgZSA9IFJlZ0V4cC5wcm90b3R5cGUsXG4gICAgciA9IG5ldyBXZWFrTWFwKCk7XG4gIGZ1bmN0aW9uIEJhYmVsUmVnRXhwKGUsIHQsIHApIHtcbiAgICB2YXIgbyA9IG5ldyBSZWdFeHAoZSwgdCk7XG4gICAgcmV0dXJuIHIuc2V0KG8sIHAgfHwgci5nZXQoZSkpLCBfc2V0UHJvdG90eXBlT2YobywgQmFiZWxSZWdFeHAucHJvdG90eXBlKTtcbiAgfVxuICBmdW5jdGlvbiBidWlsZEdyb3VwcyhlLCB0KSB7XG4gICAgdmFyIHAgPSByLmdldCh0KTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocCkucmVkdWNlKGZ1bmN0aW9uIChyLCB0KSB7XG4gICAgICB2YXIgbyA9IHBbdF07XG4gICAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2Ygbykgclt0XSA9IGVbb107ZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyB2b2lkIDAgPT09IGVbb1tpXV0gJiYgaSArIDEgPCBvLmxlbmd0aDspIGkrKztcbiAgICAgICAgclt0XSA9IGVbb1tpXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcjtcbiAgICB9LCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgfVxuICByZXR1cm4gX2luaGVyaXRzKEJhYmVsUmVnRXhwLCBSZWdFeHApLCBCYWJlbFJlZ0V4cC5wcm90b3R5cGUuZXhlYyA9IGZ1bmN0aW9uIChyKSB7XG4gICAgdmFyIHQgPSBlLmV4ZWMuY2FsbCh0aGlzLCByKTtcbiAgICBpZiAodCkge1xuICAgICAgdC5ncm91cHMgPSBidWlsZEdyb3Vwcyh0LCB0aGlzKTtcbiAgICAgIHZhciBwID0gdC5pbmRpY2VzO1xuICAgICAgcCAmJiAocC5ncm91cHMgPSBidWlsZEdyb3VwcyhwLCB0aGlzKSk7XG4gICAgfVxuICAgIHJldHVybiB0O1xuICB9LCBCYWJlbFJlZ0V4cC5wcm90b3R5cGVbU3ltYm9sLnJlcGxhY2VdID0gZnVuY3Rpb24gKHQsIHApIHtcbiAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgcCkge1xuICAgICAgdmFyIG8gPSByLmdldCh0aGlzKTtcbiAgICAgIHJldHVybiBlW1N5bWJvbC5yZXBsYWNlXS5jYWxsKHRoaXMsIHQsIHAucmVwbGFjZSgvXFwkPChbXj5dKyk+L2csIGZ1bmN0aW9uIChlLCByKSB7XG4gICAgICAgIHZhciB0ID0gb1tyXTtcbiAgICAgICAgcmV0dXJuIFwiJFwiICsgKEFycmF5LmlzQXJyYXkodCkgPyB0LmpvaW4oXCIkXCIpIDogdCk7XG4gICAgICB9KSk7XG4gICAgfVxuICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHApIHtcbiAgICAgIHZhciBpID0gdGhpcztcbiAgICAgIHJldHVybiBlW1N5bWJvbC5yZXBsYWNlXS5jYWxsKHRoaXMsIHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGUgPSBhcmd1bWVudHM7XG4gICAgICAgIHJldHVybiBcIm9iamVjdFwiICE9IHR5cGVvZiBlW2UubGVuZ3RoIC0gMV0gJiYgKGUgPSBbXS5zbGljZS5jYWxsKGUpKS5wdXNoKGJ1aWxkR3JvdXBzKGUsIGkpKSwgcC5hcHBseSh0aGlzLCBlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZVtTeW1ib2wucmVwbGFjZV0uY2FsbCh0aGlzLCB0LCBwKTtcbiAgfSwgX3dyYXBSZWdFeHAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmZ1bmN0aW9uIF9Bd2FpdFZhbHVlKHZhbHVlKSB7XG4gIHRoaXMud3JhcHBlZCA9IHZhbHVlO1xufVxuZnVuY3Rpb24gX3dyYXBBc3luY0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgX0FzeW5jR2VuZXJhdG9yKGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgX3RvUHJvcGVydHlLZXkoZGVzY3JpcHRvci5rZXkpLCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cbmZ1bmN0aW9uIF9kZWZpbmVFbnVtZXJhYmxlUHJvcGVydGllcyhvYmosIGRlc2NzKSB7XG4gIGZvciAodmFyIGtleSBpbiBkZXNjcykge1xuICAgIHZhciBkZXNjID0gZGVzY3Nba2V5XTtcbiAgICBkZXNjLmNvbmZpZ3VyYWJsZSA9IGRlc2MuZW51bWVyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSBkZXNjLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIGRlc2MpO1xuICB9XG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIG9iamVjdFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGRlc2NzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdFN5bWJvbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzeW0gPSBvYmplY3RTeW1ib2xzW2ldO1xuICAgICAgdmFyIGRlc2MgPSBkZXNjc1tzeW1dO1xuICAgICAgZGVzYy5jb25maWd1cmFibGUgPSBkZXNjLmVudW1lcmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSBkZXNjLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHN5bSwgZGVzYyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiBfZGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICB2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRlZmF1bHRzKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIHZhbHVlID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihkZWZhdWx0cywga2V5KTtcbiAgICBpZiAodmFsdWUgJiYgdmFsdWUuY29uZmlndXJhYmxlICYmIG9ialtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IE9iamVjdChhcmd1bWVudHNbaV0pIDoge307XG4gICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3duS2V5cy5wdXNoLmFwcGx5KG93bktleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcbiAgdHJ5IHtcbiAgICBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0LmJpbmQoKTtcbiAgfSBlbHNlIHtcbiAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDtcbiAgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzO1xuICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG4gICAgICBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgIHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpO1xuICB9O1xuICByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7XG59XG5mdW5jdGlvbiBfaW5zdGFuY2VvZihsZWZ0LCByaWdodCkge1xuICBpZiAocmlnaHQgIT0gbnVsbCAmJiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIHJpZ2h0W1N5bWJvbC5oYXNJbnN0YW5jZV0pIHtcbiAgICByZXR1cm4gISFyaWdodFtTeW1ib2wuaGFzSW5zdGFuY2VdKGxlZnQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsZWZ0IGluc3RhbmNlb2YgcmlnaHQ7XG4gIH1cbn1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgZGVmYXVsdDogb2JqXG4gIH07XG59XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHtcbiAgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsO1xuICB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpO1xuICB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7XG4gIHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKG5vZGVJbnRlcm9wKSB7XG4gICAgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wO1xuICB9KShub2RlSW50ZXJvcCk7XG59XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7XG4gIGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cbiAgdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTtcbiAgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7XG4gICAgcmV0dXJuIGNhY2hlLmdldChvYmopO1xuICB9XG4gIHZhciBuZXdPYmogPSB7fTtcbiAgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7XG4gICAgICBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBuZXdPYmouZGVmYXVsdCA9IG9iajtcbiAgaWYgKGNhY2hlKSB7XG4gICAgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTtcbiAgfVxuICByZXR1cm4gbmV3T2JqO1xufVxuZnVuY3Rpb24gX25ld0Fycm93Q2hlY2soaW5uZXJUaGlzLCBib3VuZFRoaXMpIHtcbiAgaWYgKGlubmVyVGhpcyAhPT0gYm91bmRUaGlzKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBpbnN0YW50aWF0ZSBhbiBhcnJvdyBmdW5jdGlvblwiKTtcbiAgfVxufVxuZnVuY3Rpb24gX29iamVjdERlc3RydWN0dXJpbmdFbXB0eShvYmopIHtcbiAgaWYgKG9iaiA9PSBudWxsKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGRlc3RydWN0dXJlIFwiICsgb2JqKTtcbn1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cbiAgcmV0dXJuIHNlbGY7XG59XG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtcbiAgfVxuICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7XG4gIHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpO1xuICByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7XG4gICAgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLFxuICAgICAgcmVzdWx0O1xuICAgIGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7XG4gICAgICB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yO1xuICAgICAgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7XG4gIH07XG59XG5mdW5jdGlvbiBfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7XG4gIHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gICAgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cbmZ1bmN0aW9uIF9nZXQoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkge1xuICAgIF9nZXQgPSBSZWZsZWN0LmdldC5iaW5kKCk7XG4gIH0gZWxzZSB7XG4gICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgICAgIHZhciBiYXNlID0gX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgICBpZiAoIWJhc2UpIHJldHVybjtcbiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7XG4gICAgICBpZiAoZGVzYy5nZXQpIHtcbiAgICAgICAgcmV0dXJuIGRlc2MuZ2V0LmNhbGwoYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiByZWNlaXZlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVzYy52YWx1ZTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBfZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LnNldCkge1xuICAgIHNldCA9IFJlZmxlY3Quc2V0O1xuICB9IGVsc2Uge1xuICAgIHNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICAgIHZhciBiYXNlID0gX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgICB2YXIgZGVzYztcbiAgICAgIGlmIChiYXNlKSB7XG4gICAgICAgIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTtcbiAgICAgICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICAgICAgZGVzYy5zZXQuY2FsbChyZWNlaXZlciwgdmFsdWUpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKCFkZXNjLndyaXRhYmxlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyZWNlaXZlciwgcHJvcGVydHkpO1xuICAgICAgaWYgKGRlc2MpIHtcbiAgICAgICAgaWYgKCFkZXNjLndyaXRhYmxlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGRlc2MudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlY2VpdmVyLCBwcm9wZXJ0eSwgZGVzYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkocmVjZWl2ZXIsIHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyKTtcbn1cbmZ1bmN0aW9uIF9zZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyLCBpc1N0cmljdCkge1xuICB2YXIgcyA9IHNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIgfHwgdGFyZ2V0KTtcbiAgaWYgKCFzICYmIGlzU3RyaWN0KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmFpbGVkIHRvIHNldCBwcm9wZXJ0eScpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoc3RyaW5ncywgcmF3KSB7XG4gIGlmICghcmF3KSB7XG4gICAgcmF3ID0gc3RyaW5ncy5zbGljZSgwKTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7XG4gICAgcmF3OiB7XG4gICAgICB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpXG4gICAgfVxuICB9KSk7XG59XG5mdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2Uoc3RyaW5ncywgcmF3KSB7XG4gIGlmICghcmF3KSB7XG4gICAgcmF3ID0gc3RyaW5ncy5zbGljZSgwKTtcbiAgfVxuICBzdHJpbmdzLnJhdyA9IHJhdztcbiAgcmV0dXJuIHN0cmluZ3M7XG59XG5mdW5jdGlvbiBfcmVhZE9ubHlFcnJvcihuYW1lKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGlzIHJlYWQtb25seVwiKTtcbn1cbmZ1bmN0aW9uIF93cml0ZU9ubHlFcnJvcihuYW1lKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGlzIHdyaXRlLW9ubHlcIik7XG59XG5mdW5jdGlvbiBfY2xhc3NOYW1lVERaRXJyb3IobmFtZSkge1xuICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJDbGFzcyBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGNhbm5vdCBiZSByZWZlcmVuY2VkIGluIGNvbXB1dGVkIHByb3BlcnR5IGtleXMuXCIpO1xufVxuZnVuY3Rpb24gX3RlbXBvcmFsVW5kZWZpbmVkKCkge31cbmZ1bmN0aW9uIF90ZHoobmFtZSkge1xuICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IobmFtZSArIFwiIGlzIG5vdCBkZWZpbmVkIC0gdGVtcG9yYWwgZGVhZCB6b25lXCIpO1xufVxuZnVuY3Rpb24gX3RlbXBvcmFsUmVmKHZhbCwgbmFtZSkge1xuICByZXR1cm4gdmFsID09PSBfdGVtcG9yYWxVbmRlZmluZWQgPyBfdGR6KG5hbWUpIDogdmFsO1xufVxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheUxvb3NlKGFyciwgaSkge1xuICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0TG9vc2UoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5mdW5jdGlvbiBfdG9BcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufVxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuZnVuY3Rpb24gX21heWJlQXJyYXlMaWtlKG5leHQsIGFyciwgaSkge1xuICBpZiAoYXJyICYmICFBcnJheS5pc0FycmF5KGFycikgJiYgdHlwZW9mIGFyci5sZW5ndGggPT09IFwibnVtYmVyXCIpIHtcbiAgICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgICByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBpICE9PSB2b2lkIDAgJiYgaSA8IGxlbiA/IGkgOiBsZW4pO1xuICB9XG4gIHJldHVybiBuZXh0KGFyciwgaSk7XG59XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuICByZXR1cm4gYXJyMjtcbn1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHtcbiAgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07XG4gIGlmICghaXQpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAoaXQpIG8gPSBpdDtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKCkge307XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzOiBGLFxuICAgICAgICBuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogb1tpKytdXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9LFxuICAgICAgICBmOiBGXG4gICAgICB9O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG4gIH1cbiAgdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLFxuICAgIGRpZEVyciA9IGZhbHNlLFxuICAgIGVycjtcbiAgcmV0dXJuIHtcbiAgICBzOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCA9IGl0LmNhbGwobyk7XG4gICAgfSxcbiAgICBuOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RlcCA9IGl0Lm5leHQoKTtcbiAgICAgIG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7XG4gICAgICByZXR1cm4gc3RlcDtcbiAgICB9LFxuICAgIGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBkaWRFcnIgPSB0cnVlO1xuICAgICAgZXJyID0gZTtcbiAgICB9LFxuICAgIGY6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdC5yZXR1cm4gIT0gbnVsbCkgaXQucmV0dXJuKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvLCBhbGxvd0FycmF5TGlrZSkge1xuICB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTtcbiAgaWYgKGl0KSByZXR1cm4gKGl0ID0gaXQuY2FsbChvKSkubmV4dC5iaW5kKGl0KTtcbiAgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmIChpdCkgbyA9IGl0O1xuICAgIHZhciBpID0gMDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7XG4gICAgICAgIGRvbmU6IHRydWVcbiAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IG9baSsrXVxuICAgICAgfTtcbiAgICB9O1xuICB9XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cbmZ1bmN0aW9uIF9za2lwRmlyc3RHZW5lcmF0b3JOZXh0KGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGl0ID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpdC5uZXh0KCk7XG4gICAgcmV0dXJuIGl0O1xuICB9O1xufVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDtcbiAgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdO1xuICBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7XG4gICAgaWYgKHR5cGVvZiByZXMgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpO1xuICB9XG4gIHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpO1xufVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7XG4gIHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTtcbiAgcmV0dXJuIHR5cGVvZiBrZXkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTtcbn1cbmZ1bmN0aW9uIF9pbml0aWFsaXplcldhcm5pbmdIZWxwZXIoZGVzY3JpcHRvciwgY29udGV4dCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0RlY29yYXRpbmcgY2xhc3MgcHJvcGVydHkgZmFpbGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgJyArICd0cmFuc2Zvcm0tY2xhc3MtcHJvcGVydGllcyBpcyBlbmFibGVkIGFuZCBydW5zIGFmdGVyIHRoZSBkZWNvcmF0b3JzIHRyYW5zZm9ybS4nKTtcbn1cbmZ1bmN0aW9uIF9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IsIGNvbnRleHQpIHtcbiAgaWYgKCFkZXNjcmlwdG9yKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB7XG4gICAgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlLFxuICAgIGNvbmZpZ3VyYWJsZTogZGVzY3JpcHRvci5jb25maWd1cmFibGUsXG4gICAgd3JpdGFibGU6IGRlc2NyaXB0b3Iud3JpdGFibGUsXG4gICAgdmFsdWU6IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIgPyBkZXNjcmlwdG9yLmluaXRpYWxpemVyLmNhbGwoY29udGV4dCkgOiB2b2lkIDBcbiAgfSk7XG59XG5mdW5jdGlvbiBfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHksIGRlY29yYXRvcnMsIGRlc2NyaXB0b3IsIGNvbnRleHQpIHtcbiAgdmFyIGRlc2MgPSB7fTtcbiAgT2JqZWN0LmtleXMoZGVzY3JpcHRvcikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgZGVzY1trZXldID0gZGVzY3JpcHRvcltrZXldO1xuICB9KTtcbiAgZGVzYy5lbnVtZXJhYmxlID0gISFkZXNjLmVudW1lcmFibGU7XG4gIGRlc2MuY29uZmlndXJhYmxlID0gISFkZXNjLmNvbmZpZ3VyYWJsZTtcbiAgaWYgKCd2YWx1ZScgaW4gZGVzYyB8fCBkZXNjLmluaXRpYWxpemVyKSB7XG4gICAgZGVzYy53cml0YWJsZSA9IHRydWU7XG4gIH1cbiAgZGVzYyA9IGRlY29yYXRvcnMuc2xpY2UoKS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChkZXNjLCBkZWNvcmF0b3IpIHtcbiAgICByZXR1cm4gZGVjb3JhdG9yKHRhcmdldCwgcHJvcGVydHksIGRlc2MpIHx8IGRlc2M7XG4gIH0sIGRlc2MpO1xuICBpZiAoY29udGV4dCAmJiBkZXNjLmluaXRpYWxpemVyICE9PSB2b2lkIDApIHtcbiAgICBkZXNjLnZhbHVlID0gZGVzYy5pbml0aWFsaXplciA/IGRlc2MuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KSA6IHZvaWQgMDtcbiAgICBkZXNjLmluaXRpYWxpemVyID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChkZXNjLmluaXRpYWxpemVyID09PSB2b2lkIDApIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzYyk7XG4gICAgZGVzYyA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIGRlc2M7XG59XG52YXIgaWQgPSAwO1xuZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkobmFtZSkge1xuICByZXR1cm4gXCJfX3ByaXZhdGVfXCIgKyBpZCsrICsgXCJfXCIgKyBuYW1lO1xufVxuZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHJlY2VpdmVyLCBwcml2YXRlS2V5KSB7XG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlY2VpdmVyLCBwcml2YXRlS2V5KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gdXNlIHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xuICB9XG4gIHJldHVybiByZWNlaXZlcjtcbn1cbmZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xuICB2YXIgZGVzY3JpcHRvciA9IF9jbGFzc0V4dHJhY3RGaWVsZERlc2NyaXB0b3IocmVjZWl2ZXIsIHByaXZhdGVNYXAsIFwiZ2V0XCIpO1xuICByZXR1cm4gX2NsYXNzQXBwbHlEZXNjcmlwdG9yR2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yKTtcbn1cbmZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBfY2xhc3NFeHRyYWN0RmllbGREZXNjcmlwdG9yKHJlY2VpdmVyLCBwcml2YXRlTWFwLCBcInNldFwiKTtcbiAgX2NsYXNzQXBwbHlEZXNjcmlwdG9yU2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yLCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZERlc3RydWN0dXJlU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gX2NsYXNzRXh0cmFjdEZpZWxkRGVzY3JpcHRvcihyZWNlaXZlciwgcHJpdmF0ZU1hcCwgXCJzZXRcIik7XG4gIHJldHVybiBfY2xhc3NBcHBseURlc2NyaXB0b3JEZXN0cnVjdHVyZVNldChyZWNlaXZlciwgZGVzY3JpcHRvcik7XG59XG5mdW5jdGlvbiBfY2xhc3NFeHRyYWN0RmllbGREZXNjcmlwdG9yKHJlY2VpdmVyLCBwcml2YXRlTWFwLCBhY3Rpb24pIHtcbiAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIFwiICsgYWN0aW9uICsgXCIgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XG4gIH1cbiAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcbn1cbmZ1bmN0aW9uIF9jbGFzc1N0YXRpY1ByaXZhdGVGaWVsZFNwZWNHZXQocmVjZWl2ZXIsIGNsYXNzQ29uc3RydWN0b3IsIGRlc2NyaXB0b3IpIHtcbiAgX2NsYXNzQ2hlY2tQcml2YXRlU3RhdGljQWNjZXNzKHJlY2VpdmVyLCBjbGFzc0NvbnN0cnVjdG9yKTtcbiAgX2NsYXNzQ2hlY2tQcml2YXRlU3RhdGljRmllbGREZXNjcmlwdG9yKGRlc2NyaXB0b3IsIFwiZ2V0XCIpO1xuICByZXR1cm4gX2NsYXNzQXBwbHlEZXNjcmlwdG9yR2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yKTtcbn1cbmZ1bmN0aW9uIF9jbGFzc1N0YXRpY1ByaXZhdGVGaWVsZFNwZWNTZXQocmVjZWl2ZXIsIGNsYXNzQ29uc3RydWN0b3IsIGRlc2NyaXB0b3IsIHZhbHVlKSB7XG4gIF9jbGFzc0NoZWNrUHJpdmF0ZVN0YXRpY0FjY2VzcyhyZWNlaXZlciwgY2xhc3NDb25zdHJ1Y3Rvcik7XG4gIF9jbGFzc0NoZWNrUHJpdmF0ZVN0YXRpY0ZpZWxkRGVzY3JpcHRvcihkZXNjcmlwdG9yLCBcInNldFwiKTtcbiAgX2NsYXNzQXBwbHlEZXNjcmlwdG9yU2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yLCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9jbGFzc1N0YXRpY1ByaXZhdGVNZXRob2RHZXQocmVjZWl2ZXIsIGNsYXNzQ29uc3RydWN0b3IsIG1ldGhvZCkge1xuICBfY2xhc3NDaGVja1ByaXZhdGVTdGF0aWNBY2Nlc3MocmVjZWl2ZXIsIGNsYXNzQ29uc3RydWN0b3IpO1xuICByZXR1cm4gbWV0aG9kO1xufVxuZnVuY3Rpb24gX2NsYXNzU3RhdGljUHJpdmF0ZU1ldGhvZFNldCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcmVhZCBvbmx5IHN0YXRpYyBwcml2YXRlIGZpZWxkXCIpO1xufVxuZnVuY3Rpb24gX2NsYXNzQXBwbHlEZXNjcmlwdG9yR2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yKSB7XG4gIGlmIChkZXNjcmlwdG9yLmdldCkge1xuICAgIHJldHVybiBkZXNjcmlwdG9yLmdldC5jYWxsKHJlY2VpdmVyKTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvci52YWx1ZTtcbn1cbmZ1bmN0aW9uIF9jbGFzc0FwcGx5RGVzY3JpcHRvclNldChyZWNlaXZlciwgZGVzY3JpcHRvciwgdmFsdWUpIHtcbiAgaWYgKGRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgZGVzY3JpcHRvci5zZXQuY2FsbChyZWNlaXZlciwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIGlmICghZGVzY3JpcHRvci53cml0YWJsZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcmVhZCBvbmx5IHByaXZhdGUgZmllbGRcIik7XG4gICAgfVxuICAgIGRlc2NyaXB0b3IudmFsdWUgPSB2YWx1ZTtcbiAgfVxufVxuZnVuY3Rpb24gX2NsYXNzQXBwbHlEZXNjcmlwdG9yRGVzdHJ1Y3R1cmVTZXQocmVjZWl2ZXIsIGRlc2NyaXB0b3IpIHtcbiAgaWYgKGRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgaWYgKCEoXCJfX2Rlc3RyT2JqXCIgaW4gZGVzY3JpcHRvcikpIHtcbiAgICAgIGRlc2NyaXB0b3IuX19kZXN0ck9iaiA9IHtcbiAgICAgICAgc2V0IHZhbHVlKHYpIHtcbiAgICAgICAgICBkZXNjcmlwdG9yLnNldC5jYWxsKHJlY2VpdmVyLCB2KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc2NyaXB0b3IuX19kZXN0ck9iajtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWRlc2NyaXB0b3Iud3JpdGFibGUpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHJlYWQgb25seSBwcml2YXRlIGZpZWxkXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgfVxufVxuZnVuY3Rpb24gX2NsYXNzU3RhdGljUHJpdmF0ZUZpZWxkRGVzdHJ1Y3R1cmVTZXQocmVjZWl2ZXIsIGNsYXNzQ29uc3RydWN0b3IsIGRlc2NyaXB0b3IpIHtcbiAgX2NsYXNzQ2hlY2tQcml2YXRlU3RhdGljQWNjZXNzKHJlY2VpdmVyLCBjbGFzc0NvbnN0cnVjdG9yKTtcbiAgX2NsYXNzQ2hlY2tQcml2YXRlU3RhdGljRmllbGREZXNjcmlwdG9yKGRlc2NyaXB0b3IsIFwic2V0XCIpO1xuICByZXR1cm4gX2NsYXNzQXBwbHlEZXNjcmlwdG9yRGVzdHJ1Y3R1cmVTZXQocmVjZWl2ZXIsIGRlc2NyaXB0b3IpO1xufVxuZnVuY3Rpb24gX2NsYXNzQ2hlY2tQcml2YXRlU3RhdGljQWNjZXNzKHJlY2VpdmVyLCBjbGFzc0NvbnN0cnVjdG9yKSB7XG4gIGlmIChyZWNlaXZlciAhPT0gY2xhc3NDb25zdHJ1Y3Rvcikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIHN0YXRpYyBhY2Nlc3Mgb2Ygd3JvbmcgcHJvdmVuYW5jZVwiKTtcbiAgfVxufVxuZnVuY3Rpb24gX2NsYXNzQ2hlY2tQcml2YXRlU3RhdGljRmllbGREZXNjcmlwdG9yKGRlc2NyaXB0b3IsIGFjdGlvbikge1xuICBpZiAoZGVzY3JpcHRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBcIiArIGFjdGlvbiArIFwiIHByaXZhdGUgc3RhdGljIGZpZWxkIGJlZm9yZSBpdHMgZGVjbGFyYXRpb25cIik7XG4gIH1cbn1cbmZ1bmN0aW9uIF9kZWNvcmF0ZShkZWNvcmF0b3JzLCBmYWN0b3J5LCBzdXBlckNsYXNzLCBtaXhpbnMpIHtcbiAgdmFyIGFwaSA9IF9nZXREZWNvcmF0b3JzQXBpKCk7XG4gIGlmIChtaXhpbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykge1xuICAgICAgYXBpID0gbWl4aW5zW2ldKGFwaSk7XG4gICAgfVxuICB9XG4gIHZhciByID0gZmFjdG9yeShmdW5jdGlvbiBpbml0aWFsaXplKE8pIHtcbiAgICBhcGkuaW5pdGlhbGl6ZUluc3RhbmNlRWxlbWVudHMoTywgZGVjb3JhdGVkLmVsZW1lbnRzKTtcbiAgfSwgc3VwZXJDbGFzcyk7XG4gIHZhciBkZWNvcmF0ZWQgPSBhcGkuZGVjb3JhdGVDbGFzcyhfY29hbGVzY2VDbGFzc0VsZW1lbnRzKHIuZC5tYXAoX2NyZWF0ZUVsZW1lbnREZXNjcmlwdG9yKSksIGRlY29yYXRvcnMpO1xuICBhcGkuaW5pdGlhbGl6ZUNsYXNzRWxlbWVudHMoci5GLCBkZWNvcmF0ZWQuZWxlbWVudHMpO1xuICByZXR1cm4gYXBpLnJ1bkNsYXNzRmluaXNoZXJzKHIuRiwgZGVjb3JhdGVkLmZpbmlzaGVycyk7XG59XG5mdW5jdGlvbiBfZ2V0RGVjb3JhdG9yc0FwaSgpIHtcbiAgX2dldERlY29yYXRvcnNBcGkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFwaTtcbiAgfTtcbiAgdmFyIGFwaSA9IHtcbiAgICBlbGVtZW50c0RlZmluaXRpb25PcmRlcjogW1tcIm1ldGhvZFwiXSwgW1wiZmllbGRcIl1dLFxuICAgIGluaXRpYWxpemVJbnN0YW5jZUVsZW1lbnRzOiBmdW5jdGlvbiAoTywgZWxlbWVudHMpIHtcbiAgICAgIFtcIm1ldGhvZFwiLCBcImZpZWxkXCJdLmZvckVhY2goZnVuY3Rpb24gKGtpbmQpIHtcbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgIGlmIChlbGVtZW50LmtpbmQgPT09IGtpbmQgJiYgZWxlbWVudC5wbGFjZW1lbnQgPT09IFwib3duXCIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lQ2xhc3NFbGVtZW50KE8sIGVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9LFxuICAgIGluaXRpYWxpemVDbGFzc0VsZW1lbnRzOiBmdW5jdGlvbiAoRiwgZWxlbWVudHMpIHtcbiAgICAgIHZhciBwcm90byA9IEYucHJvdG90eXBlO1xuICAgICAgW1wibWV0aG9kXCIsIFwiZmllbGRcIl0uZm9yRWFjaChmdW5jdGlvbiAoa2luZCkge1xuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIHBsYWNlbWVudCA9IGVsZW1lbnQucGxhY2VtZW50O1xuICAgICAgICAgIGlmIChlbGVtZW50LmtpbmQgPT09IGtpbmQgJiYgKHBsYWNlbWVudCA9PT0gXCJzdGF0aWNcIiB8fCBwbGFjZW1lbnQgPT09IFwicHJvdG90eXBlXCIpKSB7XG4gICAgICAgICAgICB2YXIgcmVjZWl2ZXIgPSBwbGFjZW1lbnQgPT09IFwic3RhdGljXCIgPyBGIDogcHJvdG87XG4gICAgICAgICAgICB0aGlzLmRlZmluZUNsYXNzRWxlbWVudChyZWNlaXZlciwgZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH0sXG4gICAgZGVmaW5lQ2xhc3NFbGVtZW50OiBmdW5jdGlvbiAocmVjZWl2ZXIsIGVsZW1lbnQpIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gZWxlbWVudC5kZXNjcmlwdG9yO1xuICAgICAgaWYgKGVsZW1lbnQua2luZCA9PT0gXCJmaWVsZFwiKSB7XG4gICAgICAgIHZhciBpbml0aWFsaXplciA9IGVsZW1lbnQuaW5pdGlhbGl6ZXI7XG4gICAgICAgIGRlc2NyaXB0b3IgPSB7XG4gICAgICAgICAgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlLFxuICAgICAgICAgIHdyaXRhYmxlOiBkZXNjcmlwdG9yLndyaXRhYmxlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZGVzY3JpcHRvci5jb25maWd1cmFibGUsXG4gICAgICAgICAgdmFsdWU6IGluaXRpYWxpemVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbml0aWFsaXplci5jYWxsKHJlY2VpdmVyKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlY2VpdmVyLCBlbGVtZW50LmtleSwgZGVzY3JpcHRvcik7XG4gICAgfSxcbiAgICBkZWNvcmF0ZUNsYXNzOiBmdW5jdGlvbiAoZWxlbWVudHMsIGRlY29yYXRvcnMpIHtcbiAgICAgIHZhciBuZXdFbGVtZW50cyA9IFtdO1xuICAgICAgdmFyIGZpbmlzaGVycyA9IFtdO1xuICAgICAgdmFyIHBsYWNlbWVudHMgPSB7XG4gICAgICAgIHN0YXRpYzogW10sXG4gICAgICAgIHByb3RvdHlwZTogW10sXG4gICAgICAgIG93bjogW11cbiAgICAgIH07XG4gICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuYWRkRWxlbWVudFBsYWNlbWVudChlbGVtZW50LCBwbGFjZW1lbnRzKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgICAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBpZiAoIV9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpKSByZXR1cm4gbmV3RWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgdmFyIGVsZW1lbnRGaW5pc2hlcnNFeHRyYXMgPSB0aGlzLmRlY29yYXRlRWxlbWVudChlbGVtZW50LCBwbGFjZW1lbnRzKTtcbiAgICAgICAgbmV3RWxlbWVudHMucHVzaChlbGVtZW50RmluaXNoZXJzRXh0cmFzLmVsZW1lbnQpO1xuICAgICAgICBuZXdFbGVtZW50cy5wdXNoLmFwcGx5KG5ld0VsZW1lbnRzLCBlbGVtZW50RmluaXNoZXJzRXh0cmFzLmV4dHJhcyk7XG4gICAgICAgIGZpbmlzaGVycy5wdXNoLmFwcGx5KGZpbmlzaGVycywgZWxlbWVudEZpbmlzaGVyc0V4dHJhcy5maW5pc2hlcnMpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgICBpZiAoIWRlY29yYXRvcnMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBlbGVtZW50czogbmV3RWxlbWVudHMsXG4gICAgICAgICAgZmluaXNoZXJzOiBmaW5pc2hlcnNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLmRlY29yYXRlQ29uc3RydWN0b3IobmV3RWxlbWVudHMsIGRlY29yYXRvcnMpO1xuICAgICAgZmluaXNoZXJzLnB1c2guYXBwbHkoZmluaXNoZXJzLCByZXN1bHQuZmluaXNoZXJzKTtcbiAgICAgIHJlc3VsdC5maW5pc2hlcnMgPSBmaW5pc2hlcnM7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgYWRkRWxlbWVudFBsYWNlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQsIHBsYWNlbWVudHMsIHNpbGVudCkge1xuICAgICAgdmFyIGtleXMgPSBwbGFjZW1lbnRzW2VsZW1lbnQucGxhY2VtZW50XTtcbiAgICAgIGlmICghc2lsZW50ICYmIGtleXMuaW5kZXhPZihlbGVtZW50LmtleSkgIT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEdXBsaWNhdGVkIGVsZW1lbnQgKFwiICsgZWxlbWVudC5rZXkgKyBcIilcIik7XG4gICAgICB9XG4gICAgICBrZXlzLnB1c2goZWxlbWVudC5rZXkpO1xuICAgIH0sXG4gICAgZGVjb3JhdGVFbGVtZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgcGxhY2VtZW50cykge1xuICAgICAgdmFyIGV4dHJhcyA9IFtdO1xuICAgICAgdmFyIGZpbmlzaGVycyA9IFtdO1xuICAgICAgZm9yICh2YXIgZGVjb3JhdG9ycyA9IGVsZW1lbnQuZGVjb3JhdG9ycywgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIGtleXMgPSBwbGFjZW1lbnRzW2VsZW1lbnQucGxhY2VtZW50XTtcbiAgICAgICAga2V5cy5zcGxpY2Uoa2V5cy5pbmRleE9mKGVsZW1lbnQua2V5KSwgMSk7XG4gICAgICAgIHZhciBlbGVtZW50T2JqZWN0ID0gdGhpcy5mcm9tRWxlbWVudERlc2NyaXB0b3IoZWxlbWVudCk7XG4gICAgICAgIHZhciBlbGVtZW50RmluaXNoZXJFeHRyYXMgPSB0aGlzLnRvRWxlbWVudEZpbmlzaGVyRXh0cmFzKCgwLCBkZWNvcmF0b3JzW2ldKShlbGVtZW50T2JqZWN0KSB8fCBlbGVtZW50T2JqZWN0KTtcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRGaW5pc2hlckV4dHJhcy5lbGVtZW50O1xuICAgICAgICB0aGlzLmFkZEVsZW1lbnRQbGFjZW1lbnQoZWxlbWVudCwgcGxhY2VtZW50cyk7XG4gICAgICAgIGlmIChlbGVtZW50RmluaXNoZXJFeHRyYXMuZmluaXNoZXIpIHtcbiAgICAgICAgICBmaW5pc2hlcnMucHVzaChlbGVtZW50RmluaXNoZXJFeHRyYXMuZmluaXNoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXdFeHRyYXMgPSBlbGVtZW50RmluaXNoZXJFeHRyYXMuZXh0cmFzO1xuICAgICAgICBpZiAobmV3RXh0cmFzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZXdFeHRyYXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRWxlbWVudFBsYWNlbWVudChuZXdFeHRyYXNbal0sIHBsYWNlbWVudHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBleHRyYXMucHVzaC5hcHBseShleHRyYXMsIG5ld0V4dHJhcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIGZpbmlzaGVyczogZmluaXNoZXJzLFxuICAgICAgICBleHRyYXM6IGV4dHJhc1xuICAgICAgfTtcbiAgICB9LFxuICAgIGRlY29yYXRlQ29uc3RydWN0b3I6IGZ1bmN0aW9uIChlbGVtZW50cywgZGVjb3JhdG9ycykge1xuICAgICAgdmFyIGZpbmlzaGVycyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIG9iaiA9IHRoaXMuZnJvbUNsYXNzRGVzY3JpcHRvcihlbGVtZW50cyk7XG4gICAgICAgIHZhciBlbGVtZW50c0FuZEZpbmlzaGVyID0gdGhpcy50b0NsYXNzRGVzY3JpcHRvcigoMCwgZGVjb3JhdG9yc1tpXSkob2JqKSB8fCBvYmopO1xuICAgICAgICBpZiAoZWxlbWVudHNBbmRGaW5pc2hlci5maW5pc2hlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZmluaXNoZXJzLnB1c2goZWxlbWVudHNBbmRGaW5pc2hlci5maW5pc2hlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnRzQW5kRmluaXNoZXIuZWxlbWVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVsZW1lbnRzID0gZWxlbWVudHNBbmRGaW5pc2hlci5lbGVtZW50cztcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGVsZW1lbnRzLmxlbmd0aCAtIDE7IGorKykge1xuICAgICAgICAgICAgZm9yICh2YXIgayA9IGogKyAxOyBrIDwgZWxlbWVudHMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzW2pdLmtleSA9PT0gZWxlbWVudHNba10ua2V5ICYmIGVsZW1lbnRzW2pdLnBsYWNlbWVudCA9PT0gZWxlbWVudHNba10ucGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkR1cGxpY2F0ZWQgZWxlbWVudCAoXCIgKyBlbGVtZW50c1tqXS5rZXkgKyBcIilcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZW1lbnRzOiBlbGVtZW50cyxcbiAgICAgICAgZmluaXNoZXJzOiBmaW5pc2hlcnNcbiAgICAgIH07XG4gICAgfSxcbiAgICBmcm9tRWxlbWVudERlc2NyaXB0b3I6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICB2YXIgb2JqID0ge1xuICAgICAgICBraW5kOiBlbGVtZW50LmtpbmQsXG4gICAgICAgIGtleTogZWxlbWVudC5rZXksXG4gICAgICAgIHBsYWNlbWVudDogZWxlbWVudC5wbGFjZW1lbnQsXG4gICAgICAgIGRlc2NyaXB0b3I6IGVsZW1lbnQuZGVzY3JpcHRvclxuICAgICAgfTtcbiAgICAgIHZhciBkZXNjID0ge1xuICAgICAgICB2YWx1ZTogXCJEZXNjcmlwdG9yXCIsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIFN5bWJvbC50b1N0cmluZ1RhZywgZGVzYyk7XG4gICAgICBpZiAoZWxlbWVudC5raW5kID09PSBcImZpZWxkXCIpIG9iai5pbml0aWFsaXplciA9IGVsZW1lbnQuaW5pdGlhbGl6ZXI7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgdG9FbGVtZW50RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIChlbGVtZW50T2JqZWN0cykge1xuICAgICAgaWYgKGVsZW1lbnRPYmplY3RzID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgIHJldHVybiBfdG9BcnJheShlbGVtZW50T2JqZWN0cykubWFwKGZ1bmN0aW9uIChlbGVtZW50T2JqZWN0KSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy50b0VsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnRPYmplY3QpO1xuICAgICAgICB0aGlzLmRpc2FsbG93UHJvcGVydHkoZWxlbWVudE9iamVjdCwgXCJmaW5pc2hlclwiLCBcIkFuIGVsZW1lbnQgZGVzY3JpcHRvclwiKTtcbiAgICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGVsZW1lbnRPYmplY3QsIFwiZXh0cmFzXCIsIFwiQW4gZWxlbWVudCBkZXNjcmlwdG9yXCIpO1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH0sXG4gICAgdG9FbGVtZW50RGVzY3JpcHRvcjogZnVuY3Rpb24gKGVsZW1lbnRPYmplY3QpIHtcbiAgICAgIHZhciBraW5kID0gU3RyaW5nKGVsZW1lbnRPYmplY3Qua2luZCk7XG4gICAgICBpZiAoa2luZCAhPT0gXCJtZXRob2RcIiAmJiBraW5kICE9PSBcImZpZWxkXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQW4gZWxlbWVudCBkZXNjcmlwdG9yXFwncyAua2luZCBwcm9wZXJ0eSBtdXN0IGJlIGVpdGhlciBcIm1ldGhvZFwiIG9yJyArICcgXCJmaWVsZFwiLCBidXQgYSBkZWNvcmF0b3IgY3JlYXRlZCBhbiBlbGVtZW50IGRlc2NyaXB0b3Igd2l0aCcgKyAnIC5raW5kIFwiJyArIGtpbmQgKyAnXCInKTtcbiAgICAgIH1cbiAgICAgIHZhciBrZXkgPSBfdG9Qcm9wZXJ0eUtleShlbGVtZW50T2JqZWN0LmtleSk7XG4gICAgICB2YXIgcGxhY2VtZW50ID0gU3RyaW5nKGVsZW1lbnRPYmplY3QucGxhY2VtZW50KTtcbiAgICAgIGlmIChwbGFjZW1lbnQgIT09IFwic3RhdGljXCIgJiYgcGxhY2VtZW50ICE9PSBcInByb3RvdHlwZVwiICYmIHBsYWNlbWVudCAhPT0gXCJvd25cIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbiBlbGVtZW50IGRlc2NyaXB0b3JcXCdzIC5wbGFjZW1lbnQgcHJvcGVydHkgbXVzdCBiZSBvbmUgb2YgXCJzdGF0aWNcIiwnICsgJyBcInByb3RvdHlwZVwiIG9yIFwib3duXCIsIGJ1dCBhIGRlY29yYXRvciBjcmVhdGVkIGFuIGVsZW1lbnQgZGVzY3JpcHRvcicgKyAnIHdpdGggLnBsYWNlbWVudCBcIicgKyBwbGFjZW1lbnQgKyAnXCInKTtcbiAgICAgIH1cbiAgICAgIHZhciBkZXNjcmlwdG9yID0gZWxlbWVudE9iamVjdC5kZXNjcmlwdG9yO1xuICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGVsZW1lbnRPYmplY3QsIFwiZWxlbWVudHNcIiwgXCJBbiBlbGVtZW50IGRlc2NyaXB0b3JcIik7XG4gICAgICB2YXIgZWxlbWVudCA9IHtcbiAgICAgICAga2luZDoga2luZCxcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgICBkZXNjcmlwdG9yOiBPYmplY3QuYXNzaWduKHt9LCBkZXNjcmlwdG9yKVxuICAgICAgfTtcbiAgICAgIGlmIChraW5kICE9PSBcImZpZWxkXCIpIHtcbiAgICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGVsZW1lbnRPYmplY3QsIFwiaW5pdGlhbGl6ZXJcIiwgXCJBIG1ldGhvZCBkZXNjcmlwdG9yXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGRlc2NyaXB0b3IsIFwiZ2V0XCIsIFwiVGhlIHByb3BlcnR5IGRlc2NyaXB0b3Igb2YgYSBmaWVsZCBkZXNjcmlwdG9yXCIpO1xuICAgICAgICB0aGlzLmRpc2FsbG93UHJvcGVydHkoZGVzY3JpcHRvciwgXCJzZXRcIiwgXCJUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBvZiBhIGZpZWxkIGRlc2NyaXB0b3JcIik7XG4gICAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShkZXNjcmlwdG9yLCBcInZhbHVlXCIsIFwiVGhlIHByb3BlcnR5IGRlc2NyaXB0b3Igb2YgYSBmaWVsZCBkZXNjcmlwdG9yXCIpO1xuICAgICAgICBlbGVtZW50LmluaXRpYWxpemVyID0gZWxlbWVudE9iamVjdC5pbml0aWFsaXplcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH0sXG4gICAgdG9FbGVtZW50RmluaXNoZXJFeHRyYXM6IGZ1bmN0aW9uIChlbGVtZW50T2JqZWN0KSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMudG9FbGVtZW50RGVzY3JpcHRvcihlbGVtZW50T2JqZWN0KTtcbiAgICAgIHZhciBmaW5pc2hlciA9IF9vcHRpb25hbENhbGxhYmxlUHJvcGVydHkoZWxlbWVudE9iamVjdCwgXCJmaW5pc2hlclwiKTtcbiAgICAgIHZhciBleHRyYXMgPSB0aGlzLnRvRWxlbWVudERlc2NyaXB0b3JzKGVsZW1lbnRPYmplY3QuZXh0cmFzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIGZpbmlzaGVyOiBmaW5pc2hlcixcbiAgICAgICAgZXh0cmFzOiBleHRyYXNcbiAgICAgIH07XG4gICAgfSxcbiAgICBmcm9tQ2xhc3NEZXNjcmlwdG9yOiBmdW5jdGlvbiAoZWxlbWVudHMpIHtcbiAgICAgIHZhciBvYmogPSB7XG4gICAgICAgIGtpbmQ6IFwiY2xhc3NcIixcbiAgICAgICAgZWxlbWVudHM6IGVsZW1lbnRzLm1hcCh0aGlzLmZyb21FbGVtZW50RGVzY3JpcHRvciwgdGhpcylcbiAgICAgIH07XG4gICAgICB2YXIgZGVzYyA9IHtcbiAgICAgICAgdmFsdWU6IFwiRGVzY3JpcHRvclwiLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH07XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBTeW1ib2wudG9TdHJpbmdUYWcsIGRlc2MpO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIHRvQ2xhc3NEZXNjcmlwdG9yOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICB2YXIga2luZCA9IFN0cmluZyhvYmoua2luZCk7XG4gICAgICBpZiAoa2luZCAhPT0gXCJjbGFzc1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0EgY2xhc3MgZGVzY3JpcHRvclxcJ3MgLmtpbmQgcHJvcGVydHkgbXVzdCBiZSBcImNsYXNzXCIsIGJ1dCBhIGRlY29yYXRvcicgKyAnIGNyZWF0ZWQgYSBjbGFzcyBkZXNjcmlwdG9yIHdpdGggLmtpbmQgXCInICsga2luZCArICdcIicpO1xuICAgICAgfVxuICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KG9iaiwgXCJrZXlcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7XG4gICAgICB0aGlzLmRpc2FsbG93UHJvcGVydHkob2JqLCBcInBsYWNlbWVudFwiLCBcIkEgY2xhc3MgZGVzY3JpcHRvclwiKTtcbiAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosIFwiZGVzY3JpcHRvclwiLCBcIkEgY2xhc3MgZGVzY3JpcHRvclwiKTtcbiAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosIFwiaW5pdGlhbGl6ZXJcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7XG4gICAgICB0aGlzLmRpc2FsbG93UHJvcGVydHkob2JqLCBcImV4dHJhc1wiLCBcIkEgY2xhc3MgZGVzY3JpcHRvclwiKTtcbiAgICAgIHZhciBmaW5pc2hlciA9IF9vcHRpb25hbENhbGxhYmxlUHJvcGVydHkob2JqLCBcImZpbmlzaGVyXCIpO1xuICAgICAgdmFyIGVsZW1lbnRzID0gdGhpcy50b0VsZW1lbnREZXNjcmlwdG9ycyhvYmouZWxlbWVudHMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWxlbWVudHM6IGVsZW1lbnRzLFxuICAgICAgICBmaW5pc2hlcjogZmluaXNoZXJcbiAgICAgIH07XG4gICAgfSxcbiAgICBydW5DbGFzc0ZpbmlzaGVyczogZnVuY3Rpb24gKGNvbnN0cnVjdG9yLCBmaW5pc2hlcnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmluaXNoZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuZXdDb25zdHJ1Y3RvciA9ICgwLCBmaW5pc2hlcnNbaV0pKGNvbnN0cnVjdG9yKTtcbiAgICAgICAgaWYgKG5ld0NvbnN0cnVjdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG5ld0NvbnN0cnVjdG9yICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGaW5pc2hlcnMgbXVzdCByZXR1cm4gYSBjb25zdHJ1Y3Rvci5cIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0cnVjdG9yID0gbmV3Q29uc3RydWN0b3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjb25zdHJ1Y3RvcjtcbiAgICB9LFxuICAgIGRpc2FsbG93UHJvcGVydHk6IGZ1bmN0aW9uIChvYmosIG5hbWUsIG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChvYmpbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG9iamVjdFR5cGUgKyBcIiBjYW4ndCBoYXZlIGEgLlwiICsgbmFtZSArIFwiIHByb3BlcnR5LlwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBhcGk7XG59XG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudERlc2NyaXB0b3IoZGVmKSB7XG4gIHZhciBrZXkgPSBfdG9Qcm9wZXJ0eUtleShkZWYua2V5KTtcbiAgdmFyIGRlc2NyaXB0b3I7XG4gIGlmIChkZWYua2luZCA9PT0gXCJtZXRob2RcIikge1xuICAgIGRlc2NyaXB0b3IgPSB7XG4gICAgICB2YWx1ZTogZGVmLnZhbHVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgIH07XG4gIH0gZWxzZSBpZiAoZGVmLmtpbmQgPT09IFwiZ2V0XCIpIHtcbiAgICBkZXNjcmlwdG9yID0ge1xuICAgICAgZ2V0OiBkZWYudmFsdWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgIH07XG4gIH0gZWxzZSBpZiAoZGVmLmtpbmQgPT09IFwic2V0XCIpIHtcbiAgICBkZXNjcmlwdG9yID0ge1xuICAgICAgc2V0OiBkZWYudmFsdWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgIH07XG4gIH0gZWxzZSBpZiAoZGVmLmtpbmQgPT09IFwiZmllbGRcIikge1xuICAgIGRlc2NyaXB0b3IgPSB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9O1xuICB9XG4gIHZhciBlbGVtZW50ID0ge1xuICAgIGtpbmQ6IGRlZi5raW5kID09PSBcImZpZWxkXCIgPyBcImZpZWxkXCIgOiBcIm1ldGhvZFwiLFxuICAgIGtleToga2V5LFxuICAgIHBsYWNlbWVudDogZGVmLnN0YXRpYyA/IFwic3RhdGljXCIgOiBkZWYua2luZCA9PT0gXCJmaWVsZFwiID8gXCJvd25cIiA6IFwicHJvdG90eXBlXCIsXG4gICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvclxuICB9O1xuICBpZiAoZGVmLmRlY29yYXRvcnMpIGVsZW1lbnQuZGVjb3JhdG9ycyA9IGRlZi5kZWNvcmF0b3JzO1xuICBpZiAoZGVmLmtpbmQgPT09IFwiZmllbGRcIikgZWxlbWVudC5pbml0aWFsaXplciA9IGRlZi52YWx1ZTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5mdW5jdGlvbiBfY29hbGVzY2VHZXR0ZXJTZXR0ZXIoZWxlbWVudCwgb3RoZXIpIHtcbiAgaWYgKGVsZW1lbnQuZGVzY3JpcHRvci5nZXQgIT09IHVuZGVmaW5lZCkge1xuICAgIG90aGVyLmRlc2NyaXB0b3IuZ2V0ID0gZWxlbWVudC5kZXNjcmlwdG9yLmdldDtcbiAgfSBlbHNlIHtcbiAgICBvdGhlci5kZXNjcmlwdG9yLnNldCA9IGVsZW1lbnQuZGVzY3JpcHRvci5zZXQ7XG4gIH1cbn1cbmZ1bmN0aW9uIF9jb2FsZXNjZUNsYXNzRWxlbWVudHMoZWxlbWVudHMpIHtcbiAgdmFyIG5ld0VsZW1lbnRzID0gW107XG4gIHZhciBpc1NhbWVFbGVtZW50ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgcmV0dXJuIG90aGVyLmtpbmQgPT09IFwibWV0aG9kXCIgJiYgb3RoZXIua2V5ID09PSBlbGVtZW50LmtleSAmJiBvdGhlci5wbGFjZW1lbnQgPT09IGVsZW1lbnQucGxhY2VtZW50O1xuICB9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICB2YXIgb3RoZXI7XG4gICAgaWYgKGVsZW1lbnQua2luZCA9PT0gXCJtZXRob2RcIiAmJiAob3RoZXIgPSBuZXdFbGVtZW50cy5maW5kKGlzU2FtZUVsZW1lbnQpKSkge1xuICAgICAgaWYgKF9pc0RhdGFEZXNjcmlwdG9yKGVsZW1lbnQuZGVzY3JpcHRvcikgfHwgX2lzRGF0YURlc2NyaXB0b3Iob3RoZXIuZGVzY3JpcHRvcikpIHtcbiAgICAgICAgaWYgKF9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpIHx8IF9oYXNEZWNvcmF0b3JzKG90aGVyKSkge1xuICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIkR1cGxpY2F0ZWQgbWV0aG9kcyAoXCIgKyBlbGVtZW50LmtleSArIFwiKSBjYW4ndCBiZSBkZWNvcmF0ZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIG90aGVyLmRlc2NyaXB0b3IgPSBlbGVtZW50LmRlc2NyaXB0b3I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoX2hhc0RlY29yYXRvcnMoZWxlbWVudCkpIHtcbiAgICAgICAgICBpZiAoX2hhc0RlY29yYXRvcnMob3RoZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJEZWNvcmF0b3JzIGNhbid0IGJlIHBsYWNlZCBvbiBkaWZmZXJlbnQgYWNjZXNzb3JzIHdpdGggZm9yIFwiICsgXCJ0aGUgc2FtZSBwcm9wZXJ0eSAoXCIgKyBlbGVtZW50LmtleSArIFwiKS5cIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIG90aGVyLmRlY29yYXRvcnMgPSBlbGVtZW50LmRlY29yYXRvcnM7XG4gICAgICAgIH1cbiAgICAgICAgX2NvYWxlc2NlR2V0dGVyU2V0dGVyKGVsZW1lbnQsIG90aGVyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmV3RWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld0VsZW1lbnRzO1xufVxuZnVuY3Rpb24gX2hhc0RlY29yYXRvcnMoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5kZWNvcmF0b3JzICYmIGVsZW1lbnQuZGVjb3JhdG9ycy5sZW5ndGg7XG59XG5mdW5jdGlvbiBfaXNEYXRhRGVzY3JpcHRvcihkZXNjKSB7XG4gIHJldHVybiBkZXNjICE9PSB1bmRlZmluZWQgJiYgIShkZXNjLnZhbHVlID09PSB1bmRlZmluZWQgJiYgZGVzYy53cml0YWJsZSA9PT0gdW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIF9vcHRpb25hbENhbGxhYmxlUHJvcGVydHkob2JqLCBuYW1lKSB7XG4gIHZhciB2YWx1ZSA9IG9ialtuYW1lXTtcbiAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgJ1wiICsgbmFtZSArIFwiJyB0byBiZSBhIGZ1bmN0aW9uXCIpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVNZXRob2RHZXQocmVjZWl2ZXIsIHByaXZhdGVTZXQsIGZuKSB7XG4gIGlmICghcHJpdmF0ZVNldC5oYXMocmVjZWl2ZXIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XG4gIH1cbiAgcmV0dXJuIGZuO1xufVxuZnVuY3Rpb24gX2NoZWNrUHJpdmF0ZVJlZGVjbGFyYXRpb24ob2JqLCBwcml2YXRlQ29sbGVjdGlvbikge1xuICBpZiAocHJpdmF0ZUNvbGxlY3Rpb24uaGFzKG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGluaXRpYWxpemUgdGhlIHNhbWUgcHJpdmF0ZSBlbGVtZW50cyB0d2ljZSBvbiBhbiBvYmplY3RcIik7XG4gIH1cbn1cbmZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZEluaXRTcGVjKG9iaiwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcbiAgX2NoZWNrUHJpdmF0ZVJlZGVjbGFyYXRpb24ob2JqLCBwcml2YXRlTWFwKTtcbiAgcHJpdmF0ZU1hcC5zZXQob2JqLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBfY2xhc3NQcml2YXRlTWV0aG9kSW5pdFNwZWMob2JqLCBwcml2YXRlU2V0KSB7XG4gIF9jaGVja1ByaXZhdGVSZWRlY2xhcmF0aW9uKG9iaiwgcHJpdmF0ZVNldCk7XG4gIHByaXZhdGVTZXQuYWRkKG9iaik7XG59XG5mdW5jdGlvbiBfY2xhc3NQcml2YXRlTWV0aG9kU2V0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHJlYXNzaWduIHByaXZhdGUgbWV0aG9kXCIpO1xufVxuZnVuY3Rpb24gX2lkZW50aXR5KHgpIHtcbiAgcmV0dXJuIHg7XG59Il19