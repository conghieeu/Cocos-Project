System.register("bundle://main/_virtual/AddAutoScale.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AutoScale.ts"],(function(e){var n,o,t,i,r,l,d,c,a;return{setters:[function(e){n=e.applyDecoratedDescriptor,o=e.inheritsLoose,t=e.initializerDefineProperty,i=e.assertThisInitialized},function(e){r=e.cclegacy,l=e._decorator,d=e.Node,c=e.Component},function(e){a=e.AutoScale}],execute:function(){var u,s,h,f,p;r._RF.push({},"da465iMnM1GsrHzOQCl0bpV","AddAutoScale",void 0);var C=l.ccclass,A=l.property,S=l.executeInEditMode;e("AddAutoScale",(u=C("AddAutoScale"),s=A({type:[d]}),u(h=S((p=n((f=function(e){function n(){for(var n,o=arguments.length,r=new Array(o),l=0;l<o;l++)r[l]=arguments[l];return n=e.call.apply(e,[this].concat(r))||this,t(n,"nodesChildren",p,i(n)),n}o(n,e);var r=n.prototype;return r.start=function(){this.getNodesChildren(),this.addAutoScaleToChildren()},r.onEnable=function(){this.addAutoScaleToChildren()},r.onDisable=function(){this.removeAutoScaleFromChildren()},r.getNodesChildren=function(){var e=this;this.node.children.forEach((function(n){-1===e.nodesChildren.indexOf(n)&&e.nodesChildren.push(n)}))},r.addAutoScaleToChildren=function(){this.nodesChildren.forEach((function(e){e.getComponent(a)||e.addComponent(a)}))},r.removeAutoScaleFromChildren=function(){this.nodesChildren.forEach((function(e){null!=e&&e.isValid&&e.removeComponent("AutoScale")}))},n}(c)).prototype,"nodesChildren",[s],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),h=f))||h)||h));r._RF.pop()}}}));

System.register("bundle://main/_virtual/AspectRatioFitter.ts",["./rollupPluginModLoBabelHelpers.js","cc","./MoveLayoutToCenter.ts"],(function(t){var i,e,o,s,n,a,h,r,l,c,p;return{setters:[function(t){i=t.applyDecoratedDescriptor,e=t.inheritsLoose,o=t.initializerDefineProperty,s=t.assertThisInitialized},function(t){n=t.cclegacy,a=t._decorator,h=t.Enum,r=t.UITransform,l=t.math,c=t.Component},function(t){p=t.MoveLayoutToCenter}],execute:function(){var d,u,g,w,R,f,F,m,v;n._RF.push({},"0793ei8zH1JaKjbFRWtksgw","AspectRatioFitter",void 0);var b=a.ccclass,y=a.property,A=a.executeInEditMode,z=a.requireComponent,M=function(t){return t[t.None=0]="None",t[t.FitInside=1]="FitInside",t[t.FitOutside=2]="FitOutside",t}(M||{});t("AspectRatioFitter",(d=b("AspectRatioFitter"),u=z(p),g=y({type:h(M)}),d(w=A(w=u((f=i((R=function(t){function i(){for(var i,e=arguments.length,n=new Array(e),a=0;a<e;a++)n[a]=arguments[a];return i=t.call.apply(t,[this].concat(n))||this,o(i,"aspectRatio",f,s(i)),o(i,"isFollowWidth",F,s(i)),o(i,"isFollowHeight",m,s(i)),o(i,"aspectMode",v,s(i)),i}e(i,t);var n=i.prototype;return n.onEnable=function(){this.getAspectRatio()},n.update=function(t){this.aspectMode==M.FitInside?this.InsideAspectRatio():this.aspectMode==M.FitOutside&&this.OutsideAspectRatio()},n.getAspectRatio=function(){var t=this.node.getComponent(r);if(t){var i=t.getBoundingBox();this.aspectRatio=i.width/i.height}},n.getRotatedDimensions=function(t,i,e){var o=l.toRadian(e),s=Math.abs(Math.cos(o)),n=Math.abs(Math.sin(o));return{width:t*s+i*n,height:t*n+i*s}},n.InsideAspectRatio=function(){var t=this.node.parent;if(t){var i=t.getComponent(r),e=this.node.getComponent(r);if(i&&e){var o,s,n=t.eulerAngles.z,a=this.getRotatedDimensions(i.width,i.height,n);this.isFollowWidth&&!this.isFollowHeight?s=(o=a.width)/this.aspectRatio:this.isFollowHeight&&!this.isFollowWidth?o=(s=a.height)*this.aspectRatio:this.isFollowWidth&&this.isFollowHeight&&(a.width/a.height<this.aspectRatio?s=(o=a.width)/this.aspectRatio:o=(s=a.height)*this.aspectRatio);var h=this.node.eulerAngles.z,l=this.getRotatedDimensions(o,s,-h);e.setContentSize(l.width,l.height)}}},n.OutsideAspectRatio=function(){var t=this.node.parent;if(t){var i=t.getComponent(r),e=this.node.getComponent(r);if(i&&e){var o,s,n=t.eulerAngles.z,a=this.getRotatedDimensions(i.width,i.height,n);this.isFollowWidth&&!this.isFollowHeight?s=(o=a.width)/this.aspectRatio:this.isFollowHeight&&!this.isFollowWidth?o=(s=a.height)*this.aspectRatio:this.isFollowWidth&&this.isFollowHeight&&(a.width/a.height>this.aspectRatio?s=(o=a.width)/this.aspectRatio:o=(s=a.height)*this.aspectRatio);var h=this.node.eulerAngles.z,l=this.getRotatedDimensions(o,s,-h);e.setContentSize(l.width,l.height)}}},i}(c)).prototype,"aspectRatio",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),F=i(R.prototype,"isFollowWidth",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),m=i(R.prototype,"isFollowHeight",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),v=i(R.prototype,"aspectMode",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return M.FitInside}}),w=R))||w)||w)||w));n._RF.pop()}}}));

System.register("bundle://main/_virtual/AspectRatioFitterFollowNode.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,o,n,i,r,a,p,l,c,u;return{setters:[function(t){e=t.applyDecoratedDescriptor,o=t.inheritsLoose,n=t.initializerDefineProperty,i=t.assertThisInitialized},function(t){r=t.cclegacy,a=t._decorator,p=t.Node,l=t.UITransform,c=t.Size,u=t.Component}],execute:function(){var d,h,s,g,f,b,w,y,m,N,R,v,S,x,z,B,A,M,C,D,F;r._RF.push({},"864d0Fw0/9At6cyOWkzpUKZ","AspectRatioFitterFollowNode",void 0);var T=a.ccclass,W=a.property,K=a.executeInEditMode;t("AspectRatioFitterFollowNode",(d=T("AspectRatioFitterFollowNode"),h=W({type:p,tooltip:"Node bên trái để căn chỉnh"}),s=W({tooltip:"Khoảng cách với node bên trái"}),g=W({type:p,tooltip:"Node bên phải để căn chỉnh"}),f=W({tooltip:"Khoảng cách với node bên phải"}),b=W({type:p,tooltip:"Node phía dưới để căn chỉnh"}),w=W({tooltip:"Khoảng cách với node phía dưới"}),y=W({type:p,tooltip:"Node phía trên để căn chỉnh"}),m=W({tooltip:"Khoảng cách với node phía trên"}),N=W({type:Number,tooltip:"Tỷ lệ khung hình mong muốn (width / height)"}),d(R=K((S=e((v=function(t){function e(){for(var e,o=arguments.length,r=new Array(o),a=0;a<o;a++)r[a]=arguments[a];return e=t.call.apply(t,[this].concat(r))||this,n(e,"leftNode",S,i(e)),n(e,"leftSpacing",x,i(e)),n(e,"rightNode",z,i(e)),n(e,"rightSpacing",B,i(e)),n(e,"nodeDown",A,i(e)),n(e,"downSpacing",M,i(e)),n(e,"nodeUp",C,i(e)),n(e,"upSpacing",D,i(e)),n(e,"aspectRatio",F,i(e)),e}o(e,t);var r=e.prototype;return r.onEnable=function(){this.setAspectRatio()},r.update=function(t){if(this.leftNode&&!this.nodeDown&&this.updateAspectRatioX(),this.nodeDown&&!this.leftNode)this.updateAspectRatioY();else if(this.leftNode&&this.nodeDown){var e=this.node.getComponent(l),o=this.leftNode.getComponent(l),n=this.nodeDown.getComponent(l);if(!e||!o||!n)return;var i=e.getBoundingBoxToWorld(),r=o.getBoundingBoxToWorld(),a=n.getBoundingBoxToWorld();Math.abs(i.xMin-r.xMin)-this.leftSpacing<Math.abs(i.yMax-a.yMin)-this.downSpacing?this.updateAspectRatioX():this.updateAspectRatioY()}},r.setAspectRatio=function(){var t=this.node.getComponent(l);t&&(this.aspectRatio=t.width/t.height)},r.updateAspectRatioX=function(){if(this.leftNode){var t=this.node.getComponent(l),e=this.leftNode.getComponent(l);if(t&&e){var o=t.getBoundingBoxToWorld(),n=e.getBoundingBoxToWorld(),i=Math.abs(o.xMin-n.xMin)-this.leftSpacing,r=i/this.aspectRatio;t.setContentSize(new c(i,r))}}},r.updateAspectRatioY=function(){if(this.nodeDown){var t=this.node.getComponent(l),e=this.nodeDown.getComponent(l);if(t&&e){var o=t.getBoundingBoxToWorld(),n=e.getBoundingBoxToWorld(),i=Math.abs(o.yMax-n.yMin)-this.downSpacing,r=i*this.aspectRatio;t.setContentSize(new c(r,i))}}},e}(u)).prototype,"leftNode",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),x=e(v.prototype,"leftSpacing",[s],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),z=e(v.prototype,"rightNode",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),B=e(v.prototype,"rightSpacing",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),A=e(v.prototype,"nodeDown",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),M=e(v.prototype,"downSpacing",[w],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),C=e(v.prototype,"nodeUp",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),D=e(v.prototype,"upSpacing",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),F=e(v.prototype,"aspectRatio",[N],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),R=v))||R)||R));r._RF.pop()}}}));

System.register("bundle://main/_virtual/AspectRatioFitterHold.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,i,o,n,r,a,s,c,l;return{setters:[function(t){e=t.applyDecoratedDescriptor,i=t.inheritsLoose,o=t.initializerDefineProperty,n=t.assertThisInitialized},function(t){r=t.cclegacy,a=t._decorator,s=t.UITransform,c=t.Vec2,l=t.Component}],execute:function(){var p,h,u,d,f,g,w;r._RF.push({},"a19fdGvIKtE9YwpIcpyG/WH","AspectRatioFitterHold",void 0);var R=a.ccclass,v=a.property,y=a.executeInEditMode;t("AspectRatioFitterHold",R("AspectRatioFitterHold")(p=y((u=e((h=function(t){function e(){for(var e,i=arguments.length,r=new Array(i),a=0;a<i;a++)r[a]=arguments[a];return e=t.call.apply(t,[this].concat(r))||this,o(e,"autoUpdate",u,n(e)),o(e,"aspectRatio",d,n(e)),o(e,"isFollowWidth",f,n(e)),o(e,"isFollowHeight",g,n(e)),o(e,"isHold",w,n(e)),e}i(e,t);var r=e.prototype;return r.start=function(){this.getAspectRatio()},r.update=function(t){this.autoUpdate&&(this.moveToParentCenter(),this.updateAspectRatio())},r.resetInEditor=function(){this.getAspectRatio(),this.autoUpdate=!0},r.getAspectRatio=function(){var t=this.node.getComponent(s);t&&(this.aspectRatio=t.width/t.height)},r.updateAspectRatio=function(){var t=this.node.parent;if(t){var e=t.getComponent(s),i=this.node.getComponent(s);if(e&&i){var o,n,r=e.width,a=e.height,c=r/a;if(this.isHold&&c<this.aspectRatio)return void i.setContentSize(e.contentSize.x,e.contentSize.y);this.isFollowWidth&&!this.isFollowHeight?n=(o=e.width)/this.aspectRatio:this.isFollowHeight&&!this.isFollowWidth?o=(n=e.height)*this.aspectRatio:this.isFollowWidth&&this.isFollowHeight&&(r/a<this.aspectRatio?n=(o=r)/this.aspectRatio:o=(n=a)*this.aspectRatio),i.setContentSize(o,n)}}},r.getParentPointCenter=function(){var t=this.node.parent;if(t){var e=t.getComponent(s),i=this.node.getComponent(s);if(e&&i){var o=e.contentSize,n=e.anchorPoint,r=i.anchorPoint;return new c(o.width*(.5-n.x+.5-r.x),o.height*(.5-n.y+.5-r.y))}}},r.moveToParentCenter=function(){var t=this.getParentPointCenter();t&&this.node.setPosition(t.x,t.y)},e}(l)).prototype,"autoUpdate",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),d=e(h.prototype,"aspectRatio",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),f=e(h.prototype,"isFollowWidth",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),g=e(h.prototype,"isFollowHeight",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),w=e(h.prototype,"isHold",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),p=h))||p)||p);r._RF.pop()}}}));

System.register("bundle://main/_virtual/AspectRatioManager.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,i,n,o,r,a,c,h;return{setters:[function(t){e=t.applyDecoratedDescriptor,i=t.inheritsLoose,n=t.initializerDefineProperty,o=t.assertThisInitialized},function(t){r=t.cclegacy,a=t._decorator,c=t.Node,h=t.Component}],execute:function(){var s,u,d,l,p,g,f,m,v;r._RF.push({},"e11cfqa1xtGOYuEQEUxuh1o","AspectRatioManager",void 0);var y=a.ccclass,b=a.property;t("AspectRatioManager",(s=y("AspectRatioManager"),u=b({type:[c],tooltip:"Danh sách node sẽ được active khi ratio >= 1 (màn hình ngang)"}),d=b({type:[c],tooltip:"Danh sách node sẽ được active khi ratio < 1 (màn hình dọc)"}),l=b({tooltip:"Tỷ lệ khung hình tối thiểu"}),s((f=e((g=function(t){function e(){for(var e,i=arguments.length,r=new Array(i),a=0;a<i;a++)r[a]=arguments[a];return e=t.call.apply(t,[this].concat(r))||this,n(e,"nodeWidth",f,o(e)),n(e,"nodeHeight",m,o(e)),n(e,"minRate",v,o(e)),e}i(e,t);var r=e.prototype;return r.update=function(t){this.getRate()<this.minRate?(this.setActiveNodes(this.nodeWidth,!1),this.setActiveNodes(this.nodeHeight,!0)):(this.setActiveNodes(this.nodeWidth,!0),this.setActiveNodes(this.nodeHeight,!1))},r.setActiveNodes=function(t,e){t.forEach((function(t){t&&(t.active=e)}))},r.getRate=function(){return(window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth)/(window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight)},e}(h)).prototype,"nodeWidth",[u],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),m=e(g.prototype,"nodeHeight",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),v=e(g.prototype,"minRate",[l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),p=g))||p));r._RF.pop()}}}));

System.register("bundle://main/_virtual/AutoChangeVideo.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var i,t,o,r,n,a,s,d,l,c,h;return{setters:[function(e){i=e.applyDecoratedDescriptor,t=e.inheritsLoose,o=e.initializerDefineProperty,r=e.assertThisInitialized},function(e){n=e.cclegacy,a=e._decorator,s=e.VideoClip,d=e.VideoPlayer,l=e.CCFloat,c=e.sys,h=e.Component}],execute:function(){var u,y,v,p,f,V,P,m,C;n._RF.push({},"41bf6Zipe1BRKZimwotFmXo","AutoChangeVideo",void 0);var b=a.ccclass,g=a.property;e("AutoChangeVideo",(u=b("AutoChangeVideo"),y=g({type:[s],tooltip:"List of videos to play in sequence"}),v=g({type:d}),p=g({type:l,tooltip:"Delay between retries (seconds)"}),u((P=i((V=function(e){function i(){for(var i,t=arguments.length,n=new Array(t),a=0;a<t;a++)n[a]=arguments[a];return i=e.call.apply(e,[this].concat(n))||this,o(i,"videoList",P,r(i)),o(i,"videoPlayer",m,r(i)),i.currentVideoIndex=0,i.retryCount=0,i.maxRetries=3,o(i,"retryDelay",C,r(i)),i}t(i,e);var n=i.prototype;return n.start=function(){var e=this;this.initializeVideo(),c.isBrowser&&(window.addEventListener("beforeunload",(function(){var i;localStorage.setItem("videoState",JSON.stringify({index:e.currentVideoIndex,time:(null==(i=e.videoPlayer)?void 0:i.currentTime)||0,timestamp:Date.now()}))})),this.checkPreviousState()),window.addEventListener("websiteLoaded",(function(){e.restartVideo()})),window.addEventListener("websiteVisibilityChanged",(function(i){i.detail.isVisible&&e.checkAndRestartVideo()}))},n.checkPreviousState=function(){var e=this;try{var i=localStorage.getItem("videoState");if(i){var t=JSON.parse(i);Date.now()-t.timestamp<3e3&&(this.currentVideoIndex=t.index,this.scheduleOnce((function(){e.playCurrentVideo(),e.videoPlayer&&(e.videoPlayer.currentTime=t.time)}),.5)),localStorage.removeItem("videoState")}}catch(e){console.error("Error restoring video state:",e)}},n.initializeVideo=function(){var e=this;this.videoPlayer&&0!==this.videoList.length?(this.videoPlayer.node.off("completed",this.onVideoCompleted,this),this.videoPlayer.node.off("error",this.onVideoError,this),this.videoPlayer.node.on("completed",this.onVideoCompleted,this),this.videoPlayer.node.on("error",this.onVideoError,this),this.scheduleOnce((function(){e.playCurrentVideo()}),.1)):console.warn("Video player or video list not properly initialized")},n.playCurrentVideo=function(){var e=this;this.currentVideoIndex>=this.videoList.length&&(this.currentVideoIndex=0);try{if(this.retryCount=0,c.isBrowser&&!navigator.onLine)return void this.scheduleOnce((function(){e.playCurrentVideo()}),1e3);this.videoPlayer.isPlaying&&this.videoPlayer.stop(),this.videoPlayer.clip=this.videoList[this.currentVideoIndex],this.scheduleOnce((function(){e.videoPlayer.play(),e.schedule(e.checkVideoPlayback,.5,5)}),.3)}catch(e){console.error("Error playing video:",e),this.handlePlaybackFailure()}},n.checkVideoPlayback=function(){this.videoPlayer&&!this.videoPlayer.isPlaying&&this.handlePlaybackFailure()},n.handlePlaybackFailure=function(){var e=this;this.retryCount<this.maxRetries?(console.warn("Retry attempt "+(this.retryCount+1)+" of "+this.maxRetries),this.retryCount++,this.scheduleOnce((function(){e.playCurrentVideo()}),this.retryDelay*this.retryCount)):(console.error("Max retries reached, moving to next video"),this.retryCount=0,this.currentVideoIndex++,this.playCurrentVideo())},n.checkAndRestartVideo=function(){!this.videoPlayer||this.videoPlayer.isPlaying&&this.videoPlayer.currentTime!==this.videoPlayer.duration||this.restartVideo()},n.onVideoCompleted=function(){this.currentVideoIndex++,this.playCurrentVideo()},n.onVideoError=function(e){console.error("Video playback error:",e),this.handlePlaybackFailure()},n.onDestroy=function(){this.videoPlayer&&(this.videoPlayer.node.off("completed",this.onVideoCompleted,this),this.videoPlayer.node.off("error",this.onVideoError,this)),window.removeEventListener("websiteLoaded",this.restartVideo),window.removeEventListener("websiteVisibilityChanged",null)},n.restartVideo=function(){this.currentVideoIndex=0,this.retryCount=0,this.initializeVideo()},i}(h)).prototype,"videoList",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),m=i(V.prototype,"videoPlayer",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),C=i(V.prototype,"retryDelay",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),f=V))||f));n._RF.pop()}}}));

System.register("bundle://main/_virtual/AutoGridLayout.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,o,i,n,r,s,a,u,p,l,c;return{setters:[function(t){e=t.applyDecoratedDescriptor,o=t.inheritsLoose,i=t.initializerDefineProperty,n=t.assertThisInitialized,r=t.createForOfIteratorHelperLoose},function(t){s=t.cclegacy,a=t._decorator,u=t.Enum,p=t.Vec3,l=t.UITransform,c=t.Component}],execute:function(){var h,d,y,f,g,v,z;s._RF.push({},"1ba05WvYfhIeaasCJFisQ1o","AutoGridLayout",void 0);var C=a.ccclass,m=a.property,L=a.executeInEditMode,b=function(t){return t[t.None=0]="None",t[t.Horizontal=1]="Horizontal",t[t.Vertical=2]="Vertical",t}(b||{}),T=function(t){return t[t.None=0]="None",t[t.Children=1]="Children",t}(T||{});t("AutoGridLayout",(h=C("AutoGridLayout"),d=m({type:u(b)}),y=m({type:u(T)}),h(f=L((v=e((g=function(t){function e(){for(var e,o=arguments.length,r=new Array(o),s=0;s<o;s++)r[s]=arguments[s];return e=t.call.apply(t,[this].concat(r))||this,i(e,"sortType",v,n(e)),i(e,"resizeMode",z,n(e)),e}o(e,t);var s=e.prototype;return s.onLoad=function(){this.updateLayout()},s.update=function(t){this.updateLayout()},s.updateLayout=function(){var t=this.node.children;this.sortType!==b.None&&this.sortChildren(t),this.resizeMode===T.Children&&this.resizeChildren(t)},s.sortChildren=function(t){this.sortType===b.Horizontal?t.sort((function(t,e){return t.position.x-e.position.x})):this.sortType===b.Vertical&&t.sort((function(t,e){return t.position.y-e.position.y}));for(var e,o=0,i=r(t);!(e=i()).done;){var n=e.value;this.sortType===b.Horizontal?(n.setPosition(new p(o,n.position.y,n.position.z)),o+=n.getComponent(l).width):this.sortType===b.Vertical&&(n.setPosition(new p(n.position.x,o,n.position.z)),o+=n.getComponent(l).height)}},s.resizeChildren=function(t){for(var e,o=this.node.getComponent(l),i=o.width,n=o.height,s=r(t);!(e=s()).done;){var a=e.value.getComponent(l);a.width=i/t.length,a.height=n/t.length}},e}(c)).prototype,"sortType",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return b.None}}),z=e(g.prototype,"resizeMode",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return T.None}}),f=g))||f)||f));s._RF.pop()}}}));

System.register("bundle://main/_virtual/AutoPlayClips.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(i){var n,t,e,r,a,o,l,s;return{setters:[function(i){n=i.applyDecoratedDescriptor,t=i.inheritsLoose,e=i.initializerDefineProperty,r=i.assertThisInitialized},function(i){a=i.cclegacy,o=i._decorator,l=i.Animation,s=i.Component}],execute:function(){var p,u,c,h,y;a._RF.push({},"98c21ufBJZJnIVe4nxgl9Oh","AutoPlayClips",void 0);var m=o.ccclass,f=o.property;i("PlayAnimationClips",(p=m("PlayAnimationClips"),u=f(l),p((y=n((h=function(i){function n(){for(var n,t=arguments.length,a=new Array(t),o=0;o<t;o++)a[o]=arguments[o];return n=i.call.apply(i,[this].concat(a))||this,e(n,"anim",y,r(n)),n.currentClipIndex=0,n}t(n,i);var a=n.prototype;return a.start=function(){this.anim&&(this.anim.on(l.EventType.FINISHED,this.onAnimationFinished,this),this.playCurrentClip())},a.playCurrentClip=function(){var i=this.anim.clips;i.length>0&&(this.currentClipIndex>=i.length&&(this.currentClipIndex=0),this.anim.play(i[this.currentClipIndex].name))},a.onAnimationFinished=function(){this.currentClipIndex++,this.playCurrentClip()},a.onDestroy=function(){this.anim&&this.anim.off(l.EventType.FINISHED,this.onAnimationFinished,this)},n}(s)).prototype,"anim",[u],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),c=h))||c));a._RF.pop()}}}));

System.register("bundle://main/_virtual/AutoScale.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var n,e,i,o,r,a,p,s,l,c;return{setters:[function(t){n=t.applyDecoratedDescriptor,e=t.inheritsLoose,i=t.initializerDefineProperty,o=t.assertThisInitialized},function(t){r=t.cclegacy,a=t._decorator,p=t.UITransform,s=t.Vec2,l=t.Vec3,c=t.Component}],execute:function(){var u,h,f,d,m,y,b,z,S,g,v;r._RF.push({},"37c5etQ80JE85LhXB+YB+i5","AutoScale",void 0);var w=a.ccclass,T=a.property,C=a.executeInEditMode;t("AutoScale",(u=w("AutoScale"),h=T({type:p,tooltip:"Node cha"}),f=T({type:s,tooltip:"Kích thước của node cha"}),d=T({type:s,tooltip:"Kích thước ban đầu của node con"}),m=T({type:s,tooltip:"Vị trí ban đầu của node con"}),u(y=C((z=n((b=function(t){function n(){for(var n,e=arguments.length,r=new Array(e),a=0;a<e;a++)r[a]=arguments[a];return n=t.call.apply(t,[this].concat(r))||this,i(n,"parentTransform",z,o(n)),i(n,"parentContentSize",S,o(n)),i(n,"contentSize",g,o(n)),i(n,"position",v,o(n)),n}e(n,t);var r=n.prototype;return r.onEnable=function(){var t,n,e,i,o;this.parentTransform=(null==(t=this.node.parent)?void 0:t.getComponent(p))||null,this.parentContentSize=new s((null==(n=this.parentTransform)?void 0:n.width)||0,(null==(e=this.parentTransform)?void 0:e.height)||0),this.contentSize=new s((null==(i=this.node.getComponent(p))?void 0:i.width)||0,(null==(o=this.node.getComponent(p))?void 0:o.height)||0),this.position=new s(this.node.position.x,this.node.position.y)},r.update=function(){this.updateUITransform()},r.updateUITransform=function(){var t;if(this.parentTransform){var n=this.parentTransform.width/this.parentContentSize.x,e=this.parentTransform.height/this.parentContentSize.y;null==(t=this.node.getComponent(p))||t.setContentSize(this.contentSize.x*n,this.contentSize.y*e),this.node.position=new l(this.position.x*n,this.position.y*e,0)}},n}(c)).prototype,"parentTransform",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),S=n(b.prototype,"parentContentSize",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new s(0,0)}}),g=n(b.prototype,"contentSize",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new s(0,0)}}),v=n(b.prototype,"position",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new s(0,0)}}),y=b))||y)||y));r._RF.pop()}}}));

System.register("bundle://main/_virtual/LayoutTopDown.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var o,e,i,n,a,r,u,l,p,s,h,y;return{setters:[function(t){o=t.applyDecoratedDescriptor,e=t.inheritsLoose,i=t.initializerDefineProperty,n=t.assertThisInitialized,a=t.createForOfIteratorHelperLoose},function(t){r=t.cclegacy,u=t._decorator,l=t.Node,p=t.Vec2,s=t.CCBoolean,h=t.UITransform,y=t.Component}],execute:function(){var c,m,f,g,d,T,w,b,z,C,L,B,S;r._RF.push({},"83a2frEQjZHUov4lKrm1iIU","LayoutTopDown",void 0);var v=u.ccclass,_=u.property,D=u.executeInEditMode;t("LayoutTopDown",(c=v("LayoutTopDown"),m=_({type:l,tooltip:"Layout trên"}),f=_({type:l,tooltip:"Layout dưới"}),g=_({type:p,visible:!1}),d=_({type:p,visible:!1}),T=_({type:s,tooltip:"Tự động cập nhật trong runtime"}),c(w=D((z=o((b=function(t){function o(){for(var o,e=arguments.length,a=new Array(e),r=0;r<e;r++)a[r]=arguments[r];return(o=t.call.apply(t,[this].concat(a))||this)._parentTransform=null,i(o,"layoutTop",z,n(o)),i(o,"layoutBottom",C,n(o)),i(o,"layoutTopSize",L,n(o)),i(o,"layoutBottomSize",B,n(o)),i(o,"autoUpdate",S,n(o)),o}e(o,t);var r=o.prototype;return r.start=function(){this._parentTransform=this.node.getComponent(h)},r.resetInEditor=function(){this.autoUpdate=!0,this.getLayoutTopDown(),this.getLayoutSize(),this.updateLayout()},r.getLayoutTopDown=function(){this.layoutTop=this.node.children[1],this.layoutBottom=this.node.children[0],this.layoutTop.getComponent(h).setAnchorPoint(0,0),this.layoutBottom.getComponent(h).setAnchorPoint(0,0)},r.update=function(){this.autoUpdate&&this.updateLayout()},r.updateLayout=function(){if(this.layoutTop&&this.layoutBottom){for(var t,o=this._parentTransform.width,e=a(this.node.children);!(t=e()).done;){var i=t.value;i.getComponent(h).setContentSize(o,i.getComponent(h).height)}this.layoutTop.setPosition(0,this._parentTransform.height-this.layoutTop.getComponent(h).height),this.layoutBottom.setPosition(0,0),this.autoScaleLayout()}},r.autoScaleLayout=function(){var t=this._parentTransform.width,o=this.layoutTop.getComponent(h),e=this.layoutBottom.getComponent(h);o.height+e.height>this._parentTransform.height?o.setContentSize(t,this._parentTransform.height-e.height):o.setContentSize(t,this.layoutTopSize.y)},r.getLayoutSize=function(){this.layoutTop&&this.layoutBottom&&(this.layoutTopSize=new p(this.layoutTop.getComponent(h).width,this.layoutTop.getComponent(h).height),this.layoutBottomSize=new p(this.layoutBottom.getComponent(h).width,this.layoutBottom.getComponent(h).height))},o}(y)).prototype,"layoutTop",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),C=o(b.prototype,"layoutBottom",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),L=o(b.prototype,"layoutTopSize",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new p(0,0)}}),B=o(b.prototype,"layoutBottomSize",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new p(0,0)}}),S=o(b.prototype,"autoUpdate",[T],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),w=b))||w)||w));r._RF.pop()}}}));

System.register("bundle://main/_virtual/ListenWebBehavior.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var i,t,n,o;return{setters:[function(e){i=e.inheritsLoose},function(e){t=e.cclegacy,n=e._decorator,o=e.Component}],execute:function(){var s;t._RF.push({},"37049bOenlNRbUCAbSnT1Fi","ListenWebBehavior",void 0);var a=n.ccclass;n.property,e("ListenWebBehavior",a("ListenWebBehavior")(s=function(e){function t(){return e.apply(this,arguments)||this}i(t,e);var n=t.prototype;return n.start=function(){var e=this;window.addEventListener("websiteLoaded",(function(i){var t=i.detail,n=t.isFirstLoad,o=t.fromCache,s=t.loadTime,a=t.timestamp;console.log("Website loaded:",{isFirstLoad:n,fromCache:o,loadTime:s,timestamp:a}),e.onWebsiteReady()})),window.addEventListener("websiteVisibilityChanged",(function(i){var t=i.detail,n=t.isVisible,o=t.timestamp;console.log("Website visibility changed:",{isVisible:n,timestamp:o}),n?e.onWebsiteVisible():e.onWebsiteHidden()}))},n.onWebsiteReady=function(){},n.onWebsiteVisible=function(){},n.onWebsiteHidden=function(){},n.onDestroy=function(){window.removeEventListener("websiteLoaded",null),window.removeEventListener("websiteVisibilityChanged",null)},t}(o))||s);t._RF.pop()}}}));

System.register("bundle://main/_virtual/main",["./OnClickThis.ts","./OpenPanelWhenClick.ts","./OnCountdown.ts","./WebsiteLoadDetector.ts","./AddAutoScale.ts","./AspectRatioFitter.ts","./AspectRatioFitterFollowNode.ts","./AspectRatioFitterHold.ts","./AutoGridLayout.ts","./AutoScale.ts","./MoveLayoutToCenter.ts","./VerticalLayout.ts","./AspectRatioManager.ts","./AutoChangeVideo.ts","./AutoPlayClips.ts","./LayoutTopDown.ts","./ListenWebBehavior.ts","./MinScreenSize.ts","./PlayAnimationClips.ts","./RatioAutoScale.ts","./ScaleFollowLayout.ts","./ScreenRatio.ts","./VerticalLayoutNoScale.ts","./Test.ts"],(function(){return{setters:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],execute:function(){}}}));

System.register("bundle://main/_virtual/MinScreenSize.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,i,n,r,o,a;return{setters:[function(e){t=e.inheritsLoose},function(e){i=e.cclegacy,n=e._decorator,r=e.sys,o=e.view,a=e.Component}],execute:function(){var s;i._RF.push({},"b2344G7acdGCKnPLt3gnAFz","MinScreenSize",void 0);var c=n.ccclass;n.property,e("MinScreenSize",c("MinScreenSize")(s=function(e){function i(){for(var t,i=arguments.length,n=new Array(i),r=0;r<i;r++)n[r]=arguments[r];return(t=e.call.apply(e,[this].concat(n))||this).MIN_WIDTH=400,t.MIN_HEIGHT=300,t}return t(i,e),i.prototype.start=function(){var e=this;if(r.isBrowser){var t=o.getFrameSize();o.setFrameSize(Math.max(this.MIN_WIDTH,t.width),Math.max(this.MIN_HEIGHT,t.height)),window.addEventListener("resize",(function(){var t=o.getFrameSize(),i=window.innerWidth,n=window.innerHeight,r=Math.max(e.MIN_WIDTH,i),a=Math.max(e.MIN_HEIGHT,n);t.width===r&&t.height===a||(o.setFrameSize(r,a),o.setDesignResolutionSize(r,a,o.getResolutionPolicy()))}))}},i}(a))||s);i._RF.pop()}}}));

System.register("bundle://main/_virtual/MoveLayoutToCenter.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,n,o,r,i,a,c,u,s;return{setters:[function(e){t=e.applyDecoratedDescriptor,n=e.inheritsLoose,o=e.initializerDefineProperty,r=e.assertThisInitialized},function(e){i=e.cclegacy,a=e._decorator,c=e.UITransform,u=e.Vec2,s=e.Component}],execute:function(){var p,h,l;i._RF.push({},"a310eEl2rpAXKCYoXjTk/Pt","MoveLayoutToCenter",void 0);var v=a.ccclass,d=a.property,f=a.executeInEditMode;e("MoveLayoutToCenter",v("MoveLayoutToCenter")(p=f((l=t((h=function(e){function t(){for(var t,n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];return t=e.call.apply(e,[this].concat(i))||this,o(t,"autoUpdate",l,r(t)),t}n(t,e);var i=t.prototype;return i.start=function(){this.moveToParentCenter()},i.update=function(e){this.autoUpdate&&this.moveToParentCenter()},i.getPointCenter=function(){var e=this.node.parent;if(e){var t=e.getComponent(c),n=this.node.getComponent(c);if(t&&n){var o=t.contentSize,r=n.contentSize,i=t.anchorPoint,a=n.anchorPoint,s=new u(o.width*(.5-i.x),o.height*(.5-i.y)),p=r.width*(.5-a.x),h=r.height*(.5-a.y);return new u(s.x-p,s.y-h)}}},i.moveToParentCenter=function(){var e=this.getPointCenter();e&&this.node.setPosition(e.x,e.y)},t}(s)).prototype,"autoUpdate",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),p=h))||p)||p);i._RF.pop()}}}));

System.register("bundle://main/_virtual/OnClickThis.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(i){var n,e,t,o,r,a,c,l,s;return{setters:[function(i){n=i.applyDecoratedDescriptor,e=i.inheritsLoose,t=i.initializerDefineProperty,o=i.assertThisInitialized},function(i){r=i.cclegacy,a=i._decorator,c=i.Node,l=i.Animation,s=i.Component}],execute:function(){var u,p,h,f,d,y,b,T,v,m,g;r._RF.push({},"8163bHnYC5MQqC0DBDIl3aJ","OnClickThis",void 0);var k=a.ccclass,A=a.property;i("OpenPanelWhenClick",(u=k("OpenPanelWhenClick"),p=A({type:[c],tooltip:"Danh sách node sẽ được active khi click"}),h=A({type:[c],tooltip:"Danh sách node sẽ được disable khi click"}),f=A({type:[c],tooltip:"Danh sách animation sẽ được play khi click"}),d=A({tooltip:"Đường dẫn đến trang web"}),u((T=n((b=function(i){function n(){for(var n,e=arguments.length,r=new Array(e),a=0;a<e;a++)r[a]=arguments[a];return n=i.call.apply(i,[this].concat(r))||this,t(n,"nodesToActive",T,o(n)),t(n,"nodesToDisable",v,o(n)),t(n,"nodesToAnimation",m,o(n)),t(n,"url",g,o(n)),n.isAnimationPlaying=!1,n}e(n,i);var r=n.prototype;return r.start=function(){this.node.on(c.EventType.TOUCH_START,this.onClick,this)},r.onClick=function(){var i=this;this.nodesToActive.forEach((function(i){i&&(i.active=!0)})),this.nodesToDisable.forEach((function(i){i&&(i.active=!1)})),this.nodesToAnimation.forEach((function(n){if(n){var e=n.getComponent(l);e&&!i.isAnimationPlaying&&(e.play(),i.isAnimationPlaying=!0)}})),""!==this.url&&window.open(this.url,"_blank")},r.onDestroy=function(){this.node.off(c.EventType.TOUCH_START,this.onClick,this)},n}(s)).prototype,"nodesToActive",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),v=n(b.prototype,"nodesToDisable",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),m=n(b.prototype,"nodesToAnimation",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),g=n(b.prototype,"url",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),y=b))||y));r._RF.pop()}}}));

System.register("bundle://main/_virtual/OnCountdown.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(n){var t,e,i,o,r,a,c,u;return{setters:[function(n){t=n.applyDecoratedDescriptor,e=n.inheritsLoose,i=n.initializerDefineProperty,o=n.assertThisInitialized},function(n){r=n.cclegacy,a=n._decorator,c=n.Node,u=n.Component}],execute:function(){var l,s,h,p,d,f,y,v,b,g,w;r._RF.push({},"c4c63/5UDlL6ofS1PNaAN46","OnCountdown",void 0);var m=a.ccclass,D=a.property;n("OnCountdown",(l=m("OnCountdown"),s=D({type:[c],tooltip:"Danh sách node sẽ được active sau thời gian định sẵn"}),h=D({type:[c],tooltip:"Danh sách node sẽ được inactive sau thời gian định sẵn"}),p=D({tooltip:"Thời gian chờ trước khi chuyển (giây)"}),d=D({tooltip:"Đường dẫn website sẽ được mở sau khi hết thời gian"}),l((v=t((y=function(n){function t(){for(var t,e=arguments.length,r=new Array(e),a=0;a<e;a++)r[a]=arguments[a];return t=n.call.apply(n,[this].concat(r))||this,i(t,"nodeActive",v,o(t)),i(t,"nodeInactive",b,o(t)),i(t,"delayTime",g,o(t)),i(t,"url",w,o(t)),t}e(t,n);var r=t.prototype;return r.start=function(){var n=this;this.scheduleOnce((function(){n.switchNodes()}),this.delayTime)},r.switchNodes=function(){this.nodeActive.forEach((function(n){n&&(n.active=!0)})),this.nodeInactive.forEach((function(n){n&&(n.active=!1)})),""!==this.url&&window.open(this.url,"_blank")},r.onDestroy=function(){this.unscheduleAllCallbacks()},t}(u)).prototype,"nodeActive",[s],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),b=t(y.prototype,"nodeInactive",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),g=t(y.prototype,"delayTime",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 5}}),w=t(y.prototype,"url",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),f=y))||f));r._RF.pop()}}}));

System.register("bundle://main/_virtual/OpenPanelWhenClick.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(i){var n,e,t,o,r,a,c,l,s;return{setters:[function(i){n=i.applyDecoratedDescriptor,e=i.inheritsLoose,t=i.initializerDefineProperty,o=i.assertThisInitialized},function(i){r=i.cclegacy,a=i._decorator,c=i.Node,l=i.Animation,s=i.Component}],execute:function(){var u,p,h,f,d,y,T,b,v,m,g;r._RF.push({},"c8e0fdeUY9EUL7ETvahI0pv","OpenPanelWhenClick",void 0);var k=a.ccclass,A=a.property;i("OnClickThis",(u=k("OnClickThis"),p=A({type:[c],tooltip:"Danh sách node sẽ được active khi click"}),h=A({type:[c],tooltip:"Danh sách node sẽ được disable khi click"}),f=A({type:[c],tooltip:"Danh sách animation sẽ được play khi click"}),d=A({tooltip:"Đường dẫn đến trang web"}),u((b=n((T=function(i){function n(){for(var n,e=arguments.length,r=new Array(e),a=0;a<e;a++)r[a]=arguments[a];return n=i.call.apply(i,[this].concat(r))||this,t(n,"nodesToActive",b,o(n)),t(n,"nodesToDisable",v,o(n)),t(n,"nodesToAnimation",m,o(n)),t(n,"url",g,o(n)),n.isAnimationPlaying=!1,n}e(n,i);var r=n.prototype;return r.start=function(){this.node.on(c.EventType.TOUCH_START,this.onClick,this)},r.onClick=function(){var i=this;this.nodesToActive.forEach((function(i){i&&(i.active=!0)})),this.nodesToDisable.forEach((function(i){i&&(i.active=!1)})),this.nodesToAnimation.forEach((function(n){if(n){var e=n.getComponent(l);e&&!i.isAnimationPlaying&&(e.play(),i.isAnimationPlaying=!0)}})),""!==this.url&&window.open(this.url,"_blank")},r.onDestroy=function(){this.node.off(c.EventType.TOUCH_START,this.onClick,this)},n}(s)).prototype,"nodesToActive",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),v=n(T.prototype,"nodesToDisable",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),m=n(T.prototype,"nodesToAnimation",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),g=n(T.prototype,"url",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),y=T))||y));r._RF.pop()}}}));

System.register("bundle://main/_virtual/PlayAnimationClips.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(i){var n,t,e,r,o,l,a,p;return{setters:[function(i){n=i.applyDecoratedDescriptor,t=i.inheritsLoose,e=i.initializerDefineProperty,r=i.assertThisInitialized},function(i){o=i.cclegacy,l=i._decorator,a=i.Animation,p=i.Component}],execute:function(){var s,c,u,h,m,y,d;o._RF.push({},"027822t0jxGEKZkgTxVdEI5","PlayAnimationClips",void 0);var f=l.ccclass,C=l.property;i("AutoPlayClips",(s=f("AutoPlayClips"),c=C(a),u=C({type:Number,tooltip:"Clip sẽ được lập đi lập lại khi mảng hết"}),s((y=n((m=function(i){function n(){for(var n,t=arguments.length,o=new Array(t),l=0;l<t;l++)o[l]=arguments[l];return n=i.call.apply(i,[this].concat(o))||this,e(n,"anim",y,r(n)),n.currentClipIndex=0,e(n,"clipLoopIndex",d,r(n)),n}t(n,i);var o=n.prototype;return o.start=function(){this.anim&&(this.anim.on(a.EventType.FINISHED,this.onAnimationFinished,this),this.playCurrentClip())},o.playCurrentClip=function(){var i=this.anim.clips;i.length>0&&(this.currentClipIndex>=i.length&&(this.currentClipIndex=this.clipLoopIndex),this.anim.play(i[this.currentClipIndex].name))},o.onAnimationFinished=function(){this.currentClipIndex++,this.playCurrentClip()},o.onDestroy=function(){this.anim&&this.anim.off(a.EventType.FINISHED,this.onAnimationFinished,this)},n}(p)).prototype,"anim",[c],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),d=n(m.prototype,"clipLoopIndex",[u],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),h=m))||h));o._RF.pop()}}}));

System.register("bundle://main/_virtual/RatioAutoScale.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,n,i,o,r,a,p,s,l,u;return{setters:[function(t){e=t.applyDecoratedDescriptor,n=t.inheritsLoose,i=t.initializerDefineProperty,o=t.assertThisInitialized},function(t){r=t.cclegacy,a=t._decorator,p=t.UITransform,s=t.Vec2,l=t.Vec3,u=t.Component}],execute:function(){var c,h,d,f,m,y,b,g,z,w,S,v,T;r._RF.push({},"f373747W2VAAZiQt56095sn","RatioAutoScale",void 0);var C=a.ccclass,A=a.property,U=a.executeInEditMode;t("RatioAutoScale",(c=C("RatioAutoScale"),h=A({type:p,tooltip:"Node cha"}),d=A({type:s,tooltip:"Kích thước của node cha"}),f=A({type:s,tooltip:"Kích thước ban đầu của node con"}),m=A({type:s,tooltip:"Vị trí ban đầu của node con"}),y=A({type:Boolean,tooltip:"Tự động cập nhật trong runtime"}),c(b=U((z=e((g=function(t){function e(){for(var e,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return e=t.call.apply(t,[this].concat(r))||this,i(e,"parentTransform",z,o(e)),i(e,"parentContentSize",w,o(e)),i(e,"contentSize",S,o(e)),i(e,"position",v,o(e)),i(e,"autoUpdate",T,o(e)),e}n(e,t);var r=e.prototype;return r.resetInEditor=function(){var t,e,n,i,o;this.parentTransform=(null==(t=this.node.parent)?void 0:t.getComponent(p))||null,this.parentContentSize=new s((null==(e=this.parentTransform)?void 0:e.width)||0,(null==(n=this.parentTransform)?void 0:n.height)||0),this.contentSize=new s((null==(i=this.node.getComponent(p))?void 0:i.width)||0,(null==(o=this.node.getComponent(p))?void 0:o.height)||0),this.position=new s(this.node.position.x,this.node.position.y),this.autoUpdate=!0},r.update=function(){this.autoUpdate&&this.updateUITransform()},r.updateUITransform=function(){var t;if(this.parentTransform){var e=this.parentTransform.width/this.parentContentSize.x,n=this.parentTransform.height/this.parentContentSize.y;null==(t=this.node.getComponent(p))||t.setContentSize(this.contentSize.x*e,this.contentSize.y*n),this.node.position=new l(this.position.x*e,this.position.y*n,0)}},e}(u)).prototype,"parentTransform",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),w=e(g.prototype,"parentContentSize",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new s(0,0)}}),S=e(g.prototype,"contentSize",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new s(0,0)}}),v=e(g.prototype,"position",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new s(0,0)}}),T=e(g.prototype,"autoUpdate",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),b=g))||b)||b));r._RF.pop()}}}));

System.register("bundle://main/_virtual/rollupPluginModLoBabelHelpers.js",[],(function(e){return{execute:function(){function r(t,i){return(r=e("setPrototypeOf",Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,r){return e.__proto__=r,e}))(t,i)}function t(e,r){if(e){if("string"==typeof e)return i(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?i(e,r):void 0}}function i(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,i=new Array(r);t<r;t++)i[t]=e[t];return i}e({applyDecoratedDescriptor:function(e,r,t,i,n){var o={};Object.keys(i).forEach((function(e){o[e]=i[e]})),o.enumerable=!!o.enumerable,o.configurable=!!o.configurable,("value"in o||o.initializer)&&(o.writable=!0);o=t.slice().reverse().reduce((function(t,i){return i(e,r,t)||t}),o),n&&void 0!==o.initializer&&(o.value=o.initializer?o.initializer.call(n):void 0,o.initializer=void 0);void 0===o.initializer&&(Object.defineProperty(e,r,o),o=null);return o},arrayLikeToArray:i,assertThisInitialized:function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},createForOfIteratorHelperLoose:function(e,r){var i="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(i)return(i=i.call(e)).next.bind(i);if(Array.isArray(e)||(i=t(e))||r&&e&&"number"==typeof e.length){i&&(e=i);var n=0;return function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},inheritsLoose:function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)},initializerDefineProperty:function(e,r,t,i){if(!t)return;Object.defineProperty(e,r,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(i):void 0})},setPrototypeOf:r,unsupportedIterableToArray:t})}}}));

System.register("bundle://main/_virtual/ScaleFollowLayout.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,o,i,l,n,a,r,c,h;return{setters:[function(t){e=t.applyDecoratedDescriptor,o=t.inheritsLoose,i=t.initializerDefineProperty,l=t.assertThisInitialized},function(t){n=t.cclegacy,a=t._decorator,r=t.UITransform,c=t.CCBoolean,h=t.Component}],execute:function(){var s,u,p,f,d,y,w,g,b;n._RF.push({},"9f062hZLAdH05sayOT71P2J","ScaleFollowLayout",void 0);var S=a.ccclass,v=a.property;a.executeInEditMode,t("ScaleFollowLayout",(s=S("ScaleFollowLayout"),u=v({type:r,tooltip:"Node cha"}),p=v({type:c,tooltip:"Theo chiều rộng"}),f=v({type:c,tooltip:"Theo chiều cao"}),s((w=e((y=function(t){function e(){for(var e,o=arguments.length,n=new Array(o),a=0;a<o;a++)n[a]=arguments[a];return e=t.call.apply(t,[this].concat(n))||this,i(e,"parent",w,l(e)),i(e,"followWidth",g,l(e)),i(e,"followHeight",b,l(e)),e}o(e,t);var n=e.prototype;return n.start=function(){this.updateScale()},n.update=function(){this.updateScale()},n.updateScale=function(){if(this.parent){var t=this.node.getComponent(r);if(t){var e=this.parent.width,o=this.parent.height,i=e/t.width,l=o/t.height;if(this.followWidth&&this.followHeight){var n=Math.min(i,l);this.node.setScale(n,n)}else this.followWidth?this.node.setScale(i,this.node.scale.y):this.followHeight&&this.node.setScale(this.node.scale.x,l)}}},e}(h)).prototype,"parent",[u],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),g=e(y.prototype,"followWidth",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),b=e(y.prototype,"followHeight",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),d=y))||d));n._RF.pop()}}}));

System.register("bundle://main/_virtual/ScreenRatio.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var n,t,i,o;return{setters:[function(e){n=e.inheritsLoose},function(e){t=e.cclegacy,i=e._decorator,o=e.Component}],execute:function(){var r;t._RF.push({},"0c3a5hkyOpDS6uV6mVVnA2P","ScreenRatio",void 0);var c=i.ccclass;i.property,e("ScreenRatio",c("ScreenRatio")(r=function(e){function t(){return e.apply(this,arguments)||this}n(t,e);var i=t.prototype;return i.start=function(){window.addEventListener("resize",this.onResize.bind(this)),this.onResize()},i.onResize=function(){var e=window.innerWidth/window.innerHeight;console.log("Screen ratio: "+e);var n=new CustomEvent("screenRatioChanged",{detail:{ratio:e}});window.dispatchEvent(n)},i.update=function(e){},t}(o))||r);t._RF.pop()}}}));

System.register("bundle://main/_virtual/Test.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,n,i,o,r,u,c,a;return{setters:[function(t){e=t.applyDecoratedDescriptor,n=t.inheritsLoose,i=t.initializerDefineProperty,o=t.assertThisInitialized},function(t){r=t.cclegacy,u=t._decorator,c=t.Label,a=t.Component}],execute:function(){var l,s,p,b,f,h,y,d;r._RF.push({},"4bbc1dBwyZP+70n3EpO8Wuh","Test",void 0);var g=u.ccclass,L=u.property;t("Test",(l=g("Test"),s=L({tooltip:"Tốc độ thay đổi giá trị"}),p=L(c),l((h=e((f=function(t){function e(){for(var e,n=arguments.length,r=new Array(n),u=0;u<n;u++)r[u]=arguments[u];return e=t.call.apply(t,[this].concat(r))||this,i(e,"_count",h,o(e)),i(e,"increment",y,o(e)),i(e,"countLabel",d,o(e)),e}n(e,t);var r=e.prototype;return r.start=function(){this.updateLabel()},r.updateLabel=function(){this.countLabel&&(this.countLabel.string="Count: "+this._count)},r.increaseCount=function(){this._count+=this.increment,this.updateLabel(),console.log("Count increased to:",this._count)},r.resetCount=function(){this._count=0,this.updateLabel(),console.log("Count reset")},e}(a)).prototype,"_count",[L],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),y=e(f.prototype,"increment",[s],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),d=e(f.prototype,"countLabel",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),b=f))||b));r._RF.pop()}}}));

System.register("bundle://main/_virtual/VerticalLayout.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,n,r,i,o,a,c,s,h,u,l;return{setters:[function(t){e=t.applyDecoratedDescriptor,n=t.inheritsLoose,r=t.initializerDefineProperty,i=t.assertThisInitialized,o=t.createForOfIteratorHelperLoose},function(t){a=t.cclegacy,c=t._decorator,s=t.CCFloat,h=t.UITransform,u=t.Vec3,l=t.Component}],execute:function(){var p,d,g,f,y;a._RF.push({},"8b258G7CI1BcI14RET2WjuG","VerticalLayout",void 0);var m=c.ccclass,v=c.property,C=c.executeInEditMode;t("default",(p=m("VerticalLayout"),d=v({type:s,tooltip:"Khoảng cách giữa các phần tử con",min:0}),p(g=C((y=e((f=function(t){function e(){for(var e,n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return e=t.call.apply(t,[this].concat(o))||this,r(e,"spacing",y,i(e)),e._parentTransform=null,e}n(e,t);var a=e.prototype;return a.start=function(){this._parentTransform=this.node.getComponent(h),this._parentTransform.setAnchorPoint(0,0),this.updateLayout()},a.update=function(){this.updateLayout()},a.updateLayout=function(){for(var t,e=this._parentTransform.width,n=this.getChildHeight(),r=o(this.node.children);!(t=r()).done;){t.value.getComponent(h).setContentSize(e,n)}for(var i=new u(0,0,0),a=0;a<this.node.children.length;a++){var c=this.node.children[a];c.getComponent(h).setAnchorPoint(0,0),c.setPosition(i),i.y+=n+this.getSpacing()}},a.getSpacing=function(){var t=this.node.children.length;return this.spacing*(t-1)/t},a.getChildHeight=function(){var t=this.node.children.length;return(this._parentTransform.height-this.getSpacing()*(t-1))/t},e}(l)).prototype,"spacing",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 10}}),g=f))||g)||g));a._RF.pop()}}}));

System.register("bundle://main/_virtual/VerticalLayoutNoScale.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,n,i,o,r,a,h,l,s,c,d;return{setters:[function(t){e=t.applyDecoratedDescriptor,n=t.inheritsLoose,i=t.initializerDefineProperty,o=t.assertThisInitialized,r=t.createForOfIteratorHelperLoose},function(t){a=t.cclegacy,h=t._decorator,l=t.CCBoolean,s=t.Vec2,c=t.UITransform,d=t.Component}],execute:function(){var u,p,f,g,m,y,v;a._RF.push({},"7b6a6NiRBNBfIOzwcwZ12Aw","VerticalLayoutNoScale",void 0);var C=h.ccclass,z=h.property,S=h.executeInEditMode;t("default",(u=C("VerticalLayoutNoScale"),p=z({type:l,tooltip:"Tự động cập nhật trong runtime"}),f=z({type:[s]}),u(g=S((y=e((m=function(t){function e(){for(var e,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return(e=t.call.apply(t,[this].concat(r))||this)._parentTransform=null,i(e,"autoUpdate",y,o(e)),i(e,"childSize",v,o(e)),e}n(e,t);var a=e.prototype;return a.start=function(){this.initChildSize(),this._parentTransform=this.node.getComponent(c),this._parentTransform.setAnchorPoint(0,0),this.updateLayout();for(var t,e=r(this.node.children);!(t=e()).done;){t.value.getComponent(c).setAnchorPoint(0,0)}},a.resetInEditor=function(){this.initChildSize(),this.autoUpdate=!0},a.update=function(){this.autoUpdate||this.updateLayout()},a.initChildSize=function(){this.childSize=[];for(var t,e=r(this.node.children);!(t=e()).done;){var n=t.value;this.childSize.push(new s(n.getComponent(c).width,n.getComponent(c).height))}},a.updateLayout=function(){var t=this._parentTransform.width,e=this.getChildHeight(),n=this.node.children[this.node.children.length-1],i=this._parentTransform.height-n.getComponent(c).height;this.node.children[this.node.children.length-1].setPosition(new Vec3(0,i));for(var o=new Vec3(0,0,0),r=0;r<this.node.children.length-1;r++){this.node.children[r].setPosition(o),o.y+=e}for(var a=0;a<this.node.children.length;a++){var h=this.node.children[a];h.getComponent(c).setContentSize(t,h.getComponent(c).height)}},a.getChildHeight=function(){var t=this.node.children.length;return this._parentTransform.height/t},e}(d)).prototype,"autoUpdate",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),v=e(m.prototype,"childSize",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),g=m))||g)||g));a._RF.pop()}}}));

System.register("bundle://main/_virtual/WebsiteLoadDetector.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var i,t,o,n,s,a,d,r;return{setters:[function(e){i=e.applyDecoratedDescriptor,t=e.inheritsLoose,o=e.initializerDefineProperty,n=e.assertThisInitialized},function(e){s=e.cclegacy,a=e._decorator,d=e.sys,r=e.Component}],execute:function(){var c,l,u;s._RF.push({},"4c0dfh7ZzpFi5v4t+MOk02F","WebsiteLoadDetector",void 0);var b=a.ccclass,h=a.property;e("WebsiteLoadDetector",b("WebsiteLoadDetector")((u=i((l=function(e){function i(){for(var i,t=arguments.length,s=new Array(t),a=0;a<t;a++)s[a]=arguments[a];return i=e.call.apply(e,[this].concat(s))||this,o(i,"debugLog",u,n(i)),i.isFirstLoad=!0,i.loadTimestamp=0,i}t(i,e);var s=i.prototype;return s.start=function(){var e=this;this.loadTimestamp=Date.now(),d.isBrowser&&("complete"===document.readyState?this.onPageLoaded():window.addEventListener("load",(function(){e.onPageLoaded()})),window.addEventListener("pageshow",(function(i){i.persisted&&e.onPageLoaded(!0)})),document.addEventListener("visibilitychange",(function(){"visible"===document.visibilityState?e.onVisibilityChanged(!0):e.onVisibilityChanged(!1)})))},s.onPageLoaded=function(e){void 0===e&&(e=!1);var i=Date.now()-this.loadTimestamp;this.debugLog&&console.log("Page loaded "+(e?"from cache":"fresh")+" in "+i+"ms");var t=new CustomEvent("websiteLoaded",{detail:{isFirstLoad:this.isFirstLoad,fromCache:e,loadTime:i,timestamp:Date.now()}});window.dispatchEvent(t),this.isFirstLoad=!1,this.onWebsiteLoaded()},s.onVisibilityChanged=function(e){this.debugLog&&console.log("Page visibility changed: "+(e?"visible":"hidden"));var i=new CustomEvent("websiteVisibilityChanged",{detail:{isVisible:e,timestamp:Date.now()}});window.dispatchEvent(i),e?this.onWebsiteVisible():this.onWebsiteHidden()},s.onWebsiteLoaded=function(){},s.onWebsiteVisible=function(){},s.onWebsiteHidden=function(){},s.isPageVisible=function(){return!d.isBrowser||"visible"===document.visibilityState},s.getLoadTimestamp=function(){return this.loadTimestamp},i}(r)).prototype,"debugLog",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),c=l))||c);s._RF.pop()}}}));

(function(r) {
  r('virtual:///prerequisite-imports/main', 'bundle://main/_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,